
strathTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae18  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a4  0800b0a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0ac  0800b0ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0ac  0800b0ac  0001b0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0b0  0800b0b0  0001b0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800b0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  2000000c  0800b0c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800b0c0  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efcb  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303b  00000000  00000000  0003f00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00042048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  00043510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036cd5  00000000  00000000  000448b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4e6  00000000  00000000  0007b585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015c371  00000000  00000000  00097a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f3ddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  001f3e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	e000      	b.n	800025e <__do_global_dtors_aux+0x12>
 800025c:	bf00      	nop
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800b04c 	.word	0x0800b04c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	e000      	b.n	800027e <frame_dummy+0xe>
 800027c:	bf00      	nop
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	0800b04c 	.word	0x0800b04c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002c2:	4604      	mov	r4, r0
 80002c4:	460f      	mov	r7, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0xa0>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4694      	mov	ip, r2
 80002ce:	d961      	bls.n	8000394 <__udivmoddi4+0xd8>
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	b143      	cbz	r3, 80002e8 <__udivmoddi4+0x2c>
 80002d6:	f1c3 0120 	rsb	r1, r3, #32
 80002da:	409f      	lsls	r7, r3
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	409c      	lsls	r4, r3
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	430f      	orrs	r7, r1
 80002e8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002ec:	fa1f fe8c 	uxth.w	lr, ip
 80002f0:	0c22      	lsrs	r2, r4, #16
 80002f2:	fbb7 f6f1 	udiv	r6, r7, r1
 80002f6:	fb01 7716 	mls	r7, r1, r6, r7
 80002fa:	fb06 f00e 	mul.w	r0, r6, lr
 80002fe:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000302:	4290      	cmp	r0, r2
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x5c>
 8000306:	eb1c 0202 	adds.w	r2, ip, r2
 800030a:	f106 37ff 	add.w	r7, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x5a>
 8000310:	4290      	cmp	r0, r2
 8000312:	f200 8137 	bhi.w	8000584 <__udivmoddi4+0x2c8>
 8000316:	463e      	mov	r6, r7
 8000318:	1a12      	subs	r2, r2, r0
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000320:	fb01 2210 	mls	r2, r1, r0, r2
 8000324:	fb00 fe0e 	mul.w	lr, r0, lr
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	45a6      	cmp	lr, r4
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x86>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 32ff 	add.w	r2, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x84>
 800033a:	45a6      	cmp	lr, r4
 800033c:	f200 811c 	bhi.w	8000578 <__udivmoddi4+0x2bc>
 8000340:	4610      	mov	r0, r2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	2600      	movs	r6, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c5 4300 	strd	r4, r3, [r5]
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d909      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000360:	2d00      	cmp	r5, #0
 8000362:	f000 80fd 	beq.w	8000560 <__udivmoddi4+0x2a4>
 8000366:	2600      	movs	r6, #0
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	4630      	mov	r0, r6
 800036e:	4631      	mov	r1, r6
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f683 	clz	r6, r3
 8000378:	2e00      	cmp	r6, #0
 800037a:	d14b      	bne.n	8000414 <__udivmoddi4+0x158>
 800037c:	428b      	cmp	r3, r1
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4630      	mov	r0, r6
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e3      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038e:	e9c5 4700 	strd	r4, r7, [r5]
 8000392:	e7e0      	b.n	8000356 <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xdc>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809d 	bne.w	80004dc <__udivmoddi4+0x220>
 80003a2:	1a89      	subs	r1, r1, r2
 80003a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a8:	b297      	uxth	r7, r2
 80003aa:	2601      	movs	r6, #1
 80003ac:	0c20      	lsrs	r0, r4, #16
 80003ae:	fbb1 f2fe 	udiv	r2, r1, lr
 80003b2:	fb0e 1112 	mls	r1, lr, r2, r1
 80003b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ba:	fb07 f002 	mul.w	r0, r7, r2
 80003be:	4288      	cmp	r0, r1
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1c 0101 	adds.w	r1, ip, r1
 80003c6:	f102 38ff 	add.w	r8, r2, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4288      	cmp	r0, r1
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80cf 	beq.w	800057e <__udivmoddi4+0x2c2>
 80003e0:	4642      	mov	r2, r8
 80003e2:	1a09      	subs	r1, r1, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x150>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14e>
 8000404:	42a7      	cmp	r7, r4
 8000406:	f200 80b4 	bhi.w	8000572 <__udivmoddi4+0x2b6>
 800040a:	4608      	mov	r0, r1
 800040c:	1be4      	subs	r4, r4, r7
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	e79b      	b.n	800034c <__udivmoddi4+0x90>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa01 f406 	lsl.w	r4, r1, r6
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	40f9      	lsrs	r1, r7
 8000424:	40b2      	lsls	r2, r6
 8000426:	ea4c 0c03 	orr.w	ip, ip, r3
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	431c      	orrs	r4, r3
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	0c20      	lsrs	r0, r4, #16
 800043e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000442:	fb09 1118 	mls	r1, r9, r8, r1
 8000446:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044a:	fb08 f00e 	mul.w	r0, r8, lr
 800044e:	4288      	cmp	r0, r1
 8000450:	d90f      	bls.n	8000472 <__udivmoddi4+0x1b6>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f108 3aff 	add.w	sl, r8, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	4288      	cmp	r0, r1
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b4>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ce>
 8000470:	46d0      	mov	r8, sl
 8000472:	1a09      	subs	r1, r1, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb1 f0f9 	udiv	r0, r1, r9
 800047a:	fb09 1110 	mls	r1, r9, r0, r1
 800047e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000482:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000486:	458e      	cmp	lr, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x1de>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000492:	d201      	bcs.n	8000498 <__udivmoddi4+0x1dc>
 8000494:	458e      	cmp	lr, r1
 8000496:	d87f      	bhi.n	8000598 <__udivmoddi4+0x2dc>
 8000498:	4620      	mov	r0, r4
 800049a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	fba0 9802 	umull	r9, r8, r0, r2
 80004a6:	4541      	cmp	r1, r8
 80004a8:	464c      	mov	r4, r9
 80004aa:	46c6      	mov	lr, r8
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0x1f8>
 80004ae:	d106      	bne.n	80004be <__udivmoddi4+0x202>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d204      	bcs.n	80004be <__udivmoddi4+0x202>
 80004b4:	3801      	subs	r0, #1
 80004b6:	ebb9 0402 	subs.w	r4, r9, r2
 80004ba:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d070      	beq.n	80005a4 <__udivmoddi4+0x2e8>
 80004c2:	1b1a      	subs	r2, r3, r4
 80004c4:	eb61 010e 	sbc.w	r1, r1, lr
 80004c8:	fa22 f306 	lsr.w	r3, r2, r6
 80004cc:	fa01 f707 	lsl.w	r7, r1, r7
 80004d0:	40f1      	lsrs	r1, r6
 80004d2:	2600      	movs	r6, #0
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c5 7100 	strd	r7, r1, [r5]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0020 	rsb	r0, r3, #32
 80004e4:	fa01 f203 	lsl.w	r2, r1, r3
 80004e8:	fa21 f600 	lsr.w	r6, r1, r0
 80004ec:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f0:	fa24 f100 	lsr.w	r1, r4, r0
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	409c      	lsls	r4, r3
 80004fa:	4311      	orrs	r1, r2
 80004fc:	fbb6 f0fe 	udiv	r0, r6, lr
 8000500:	0c0a      	lsrs	r2, r1, #16
 8000502:	fb0e 6610 	mls	r6, lr, r0, r6
 8000506:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800050a:	fb00 f607 	mul.w	r6, r0, r7
 800050e:	4296      	cmp	r6, r2
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x274>
 8000512:	eb1c 0202 	adds.w	r2, ip, r2
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	4296      	cmp	r6, r2
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x272>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d6>
 800052e:	4640      	mov	r0, r8
 8000530:	1b92      	subs	r2, r2, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb2 f6fe 	udiv	r6, r2, lr
 8000538:	fb0e 2216 	mls	r2, lr, r6, r2
 800053c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000540:	fb06 f207 	mul.w	r2, r6, r7
 8000544:	428a      	cmp	r2, r1
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x29c>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000552:	428a      	cmp	r2, r1
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2e2>
 8000556:	4646      	mov	r6, r8
 8000558:	1a89      	subs	r1, r1, r2
 800055a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055e:	e725      	b.n	80003ac <__udivmoddi4+0xf0>
 8000560:	462e      	mov	r6, r5
 8000562:	4628      	mov	r0, r5
 8000564:	e6f7      	b.n	8000356 <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb61 0303 	sbc.w	r3, r1, r3
 800056c:	2001      	movs	r0, #1
 800056e:	461f      	mov	r7, r3
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xce>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e749      	b.n	800040c <__udivmoddi4+0x150>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e1      	b.n	8000342 <__udivmoddi4+0x86>
 800057e:	3a02      	subs	r2, #2
 8000580:	4461      	add	r1, ip
 8000582:	e72e      	b.n	80003e2 <__udivmoddi4+0x126>
 8000584:	3e02      	subs	r6, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c6      	b.n	8000318 <__udivmoddi4+0x5c>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4461      	add	r1, ip
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b6>
 8000592:	3802      	subs	r0, #2
 8000594:	4462      	add	r2, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x274>
 8000598:	3802      	subs	r0, #2
 800059a:	4461      	add	r1, ip
 800059c:	e77d      	b.n	800049a <__udivmoddi4+0x1de>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x29c>
 80005a4:	462e      	mov	r6, r5
 80005a6:	e6d6      	b.n	8000356 <__udivmoddi4+0x9a>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d0:	68fb      	ldr	r3, [r7, #12]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	44020c00 	.word	0x44020c00

080005e4 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_APB1_GRP2_EnableClock+0x34>)
 80005fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	44020c00 	.word	0x44020c00

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f001 f867 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f861 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fac1 	bl	8000bb0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800062e:	f000 f8cd 	bl	80007cc <MX_ADC1_Init>
  MX_ETH_Init();
 8000632:	f000 f931 	bl	8000898 <MX_ETH_Init>
  MX_ICACHE_Init();
 8000636:	f000 f9bb 	bl	80009b0 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 800063a:	f000 f9c5 	bl	80009c8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800063e:	f000 fa0d 	bl	8000a5c <MX_USART3_UART_Init>
  MX_UCPD1_Init();
 8000642:	f000 fa5d 	bl	8000b00 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000646:	f000 fa7f 	bl	8000b48 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800064a:	f000 f971 	bl	8000930 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buf[10];
  uint16_t distance, clear1, clear2, red, green, blue;
  uint8_t sent[] = {0x80, 0x03};
 800064e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000652:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, (uint8_t)0x39*2, sent, 2, HAL_MAX_DELAY);
 8000654:	1d3a      	adds	r2, r7, #4
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2302      	movs	r3, #2
 800065e:	2172      	movs	r1, #114	; 0x72
 8000660:	4820      	ldr	r0, [pc, #128]	; (80006e4 <main+0xc8>)
 8000662:	f002 ff5b 	bl	800351c <HAL_I2C_Master_Transmit>
  uint8_t sent2[] = {0x8F, 0x03};
 8000666:	f240 338f 	movw	r3, #911	; 0x38f
 800066a:	803b      	strh	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c2, (uint8_t)0x39*2, sent2, 2, HAL_MAX_DELAY);
 800066c:	463a      	mov	r2, r7
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2302      	movs	r3, #2
 8000676:	2172      	movs	r1, #114	; 0x72
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <main+0xc8>)
 800067a:	f002 ff4f 	bl	800351c <HAL_I2C_Master_Transmit>
	//myState = HAL_I2C_Master_Transmit(&hi2c2, (uint8_t)0x20, sent, 1, HAL_MAX_DELAY);
	//HAL_Delay(10);
	//myState = HAL_I2C_Master_Receive(&hi2c2, (uint8_t)0x21, buf, 4, HAL_MAX_DELAY);


	HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800067e:	2101      	movs	r1, #1
 8000680:	4819      	ldr	r0, [pc, #100]	; (80006e8 <main+0xcc>)
 8000682:	f002 fea1 	bl	80033c8 <HAL_GPIO_TogglePin>
	distance = getLidarDistance(&hi2c2);
 8000686:	4817      	ldr	r0, [pc, #92]	; (80006e4 <main+0xc8>)
 8000688:	f000 fb7d 	bl	8000d86 <getLidarDistance>
 800068c:	4603      	mov	r3, r0
 800068e:	83fb      	strh	r3, [r7, #30]
	clear1 = getAPDSData(&hi2c2, buf);
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	4619      	mov	r1, r3
 8000696:	4813      	ldr	r0, [pc, #76]	; (80006e4 <main+0xc8>)
 8000698:	f000 fbae 	bl	8000df8 <getAPDSData>
 800069c:	4603      	mov	r3, r0
 800069e:	83bb      	strh	r3, [r7, #28]
	clear2 = buf[2] << 8 | buf[1];
 80006a0:	7abb      	ldrb	r3, [r7, #10]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	7a7b      	ldrb	r3, [r7, #9]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	837b      	strh	r3, [r7, #26]
	red = buf[4] << 8 | buf[3];
 80006b0:	7b3b      	ldrb	r3, [r7, #12]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b21b      	sxth	r3, r3
 80006be:	833b      	strh	r3, [r7, #24]
	green = buf[6] << 8 | buf[5];
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	7b7b      	ldrb	r3, [r7, #13]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	82fb      	strh	r3, [r7, #22]
	blue = buf[8] << 8 | buf[7];
 80006d0:	7c3b      	ldrb	r3, [r7, #16]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	b21b      	sxth	r3, r3
 80006da:	4313      	orrs	r3, r2
 80006dc:	b21b      	sxth	r3, r3
 80006de:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80006e0:	e7cd      	b.n	800067e <main+0x62>
 80006e2:	bf00      	nop
 80006e4:	20000238 	.word	0x20000238
 80006e8:	42020400 	.word	0x42020400

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09c      	sub	sp, #112	; 0x70
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2250      	movs	r2, #80	; 0x50
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00a fc9e 	bl	800b03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <SystemClock_Config+0xdc>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <SystemClock_Config+0xdc>)
 8000718:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800071c:	6113      	str	r3, [r2, #16]
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <SystemClock_Config+0xdc>)
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072a:	bf00      	nop
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <SystemClock_Config+0xdc>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	2b08      	cmp	r3, #8
 8000736:	d1f9      	bne.n	800072c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000738:	2323      	movs	r3, #35	; 0x23
 800073a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 800073c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000758:	2303      	movs	r3, #3
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000760:	23fa      	movs	r3, #250	; 0xfa
 8000762:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000770:	2304      	movs	r3, #4
 8000772:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000774:	2300      	movs	r3, #0
 8000776:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fced 	bl	8004160 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800078c:	f000 faf6 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	231f      	movs	r3, #31
 8000792:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2303      	movs	r3, #3
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 f90e 	bl	80049d0 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007ba:	f000 fadf 	bl	8000d7c <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3770      	adds	r7, #112	; 0x70
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	44020800 	.word	0x44020800

080007cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2220      	movs	r2, #32
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f00a fc2f 	bl	800b03c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_ADC1_Init+0xc0>)
 80007e0:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <MX_ADC1_Init+0xc4>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0xc0>)
 80007e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0xc0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_ADC1_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0xc0>)
 8000800:	2204      	movs	r2, #4
 8000802:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC1_Init+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_ADC1_Init+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0xc0>)
 8000812:	2201      	movs	r2, #1
 8000814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ADC1_Init+0xc0>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC1_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC1_Init+0xc0>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_ADC1_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_ADC1_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_ADC1_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_ADC1_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_ADC1_Init+0xc0>)
 8000848:	f001 f9e2 	bl	8001c10 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000852:	f000 fa93 	bl	8000d7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_ADC1_Init+0xc8>)
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2306      	movs	r3, #6
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000862:	237f      	movs	r3, #127	; 0x7f
 8000864:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000866:	2304      	movs	r3, #4
 8000868:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_ADC1_Init+0xc0>)
 8000874:	f001 fb20 	bl	8001eb8 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800087e:	f000 fa7d 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000120 	.word	0x20000120
 8000890:	42028000 	.word	0x42028000
 8000894:	4b840000 	.word	0x4b840000

08000898 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_ETH_Init+0x80>)
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_ETH_Init+0x84>)
 80008a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_ETH_Init+0x88>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_ETH_Init+0x88>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_ETH_Init+0x88>)
 80008b0:	22e1      	movs	r2, #225	; 0xe1
 80008b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_ETH_Init+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_ETH_Init+0x88>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_ETH_Init+0x88>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_ETH_Init+0x80>)
 80008c8:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_ETH_Init+0x88>)
 80008ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_ETH_Init+0x80>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ETH_Init+0x80>)
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_ETH_Init+0x8c>)
 80008d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_ETH_Init+0x80>)
 80008da:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_ETH_Init+0x90>)
 80008dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ETH_Init+0x80>)
 80008e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_ETH_Init+0x80>)
 80008e8:	f001 ffd0 	bl	800288c <HAL_ETH_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008f2:	f000 fa43 	bl	8000d7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f6:	2238      	movs	r2, #56	; 0x38
 80008f8:	2100      	movs	r1, #0
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ETH_Init+0x94>)
 80008fc:	f00a fb9e 	bl	800b03c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_ETH_Init+0x94>)
 8000902:	2221      	movs	r2, #33	; 0x21
 8000904:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_ETH_Init+0x94>)
 8000908:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800090c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_ETH_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000188 	.word	0x20000188
 800091c:	40028000 	.word	0x40028000
 8000920:	200006bc 	.word	0x200006bc
 8000924:	200000c0 	.word	0x200000c0
 8000928:	20000060 	.word	0x20000060
 800092c:	20000028 	.word	0x20000028

08000930 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_I2C2_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60808CD3;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_I2C2_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MX_I2C2_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_I2C2_Init+0x74>)
 800096c:	f002 fd46 	bl	80033fc <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 fa01 	bl	8000d7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_I2C2_Init+0x74>)
 800097e:	f003 fa49 	bl	8003e14 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 f9f8 	bl	8000d7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_I2C2_Init+0x74>)
 8000990:	f003 fa8b 	bl	8003eaa <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 f9ef 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000238 	.word	0x20000238
 80009a8:	40005800 	.word	0x40005800
 80009ac:	60808cd3 	.word	0x60808cd3

080009b0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009b4:	f003 fac6 	bl	8003f44 <HAL_ICACHE_Enable>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80009be:	f000 f9dd 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009ce:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <MX_LPUART1_UART_Init+0x8c>)
 80009d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009d4:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <MX_LPUART1_UART_Init+0x90>)
 80009d6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009ec:	220c      	movs	r2, #12
 80009ee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 8000a0a:	f009 fb75 	bl	800a0f8 <HAL_UART_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000a14:	f000 f9b2 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 8000a1c:	f009 fffc 	bl	800aa18 <HAL_UARTEx_SetTxFifoThreshold>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000a26:	f000 f9a9 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 8000a2e:	f00a f831 	bl	800aa94 <HAL_UARTEx_SetRxFifoThreshold>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000a38:	f000 f9a0 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_LPUART1_UART_Init+0x88>)
 8000a3e:	f009 ffb2 	bl	800a9a6 <HAL_UARTEx_DisableFifoMode>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000a48:	f000 f998 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000028c 	.word	0x2000028c
 8000a54:	44002400 	.word	0x44002400
 8000a58:	00033324 	.word	0x00033324

08000a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a62:	4a26      	ldr	r2, [pc, #152]	; (8000afc <MX_USART3_UART_Init+0xa0>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a92:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000aa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aae:	4812      	ldr	r0, [pc, #72]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000ab0:	f009 fb22 	bl	800a0f8 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 8000aba:	f000 f95f 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000ac2:	f009 ffa9 	bl	800aa18 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 8000acc:	f000 f956 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000ad4:	f009 ffde 	bl	800aa94 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART3_UART_Init+0x86>
  {
    Error_Handler();
 8000ade:	f000 f94d 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART3_UART_Init+0x9c>)
 8000ae4:	f009 ff5f 	bl	800a9a6 <HAL_UARTEx_DisableFifoMode>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART3_UART_Init+0x96>
  {
    Error_Handler();
 8000aee:	f000 f945 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000320 	.word	0x20000320
 8000afc:	40004800 	.word	0x40004800

08000b00 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000b16:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b1a:	f7ff fd63 	bl	80005e4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fd44 	bl	80005ac <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000b24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	463b      	mov	r3, r7
 8000b34:	4619      	mov	r1, r3
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MX_UCPD1_Init+0x44>)
 8000b38:	f00a f983 	bl	800ae42 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	42020400 	.word	0x42020400

08000b48 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <MX_USB_PCD_Init+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b54:	2208      	movs	r2, #8
 8000b56:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_USB_PCD_Init+0x60>)
 8000b96:	f003 f9e5 	bl	8003f64 <HAL_PCD_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USB_PCD_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f000 f8ec 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200003b4 	.word	0x200003b4
 8000bac:	40016000 	.word	0x40016000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b67      	ldr	r3, [pc, #412]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bcc:	4a65      	ldr	r2, [pc, #404]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bd6:	4b63      	ldr	r3, [pc, #396]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	623b      	str	r3, [r7, #32]
 8000be2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	4b5f      	ldr	r3, [pc, #380]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bea:	4a5e      	ldr	r2, [pc, #376]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c02:	4b58      	ldr	r3, [pc, #352]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c08:	4a56      	ldr	r2, [pc, #344]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c12:	4b54      	ldr	r3, [pc, #336]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c18:	f003 0320 	and.w	r3, r3, #32
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c20:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c26:	4a4f      	ldr	r2, [pc, #316]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b49      	ldr	r3, [pc, #292]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c44:	4a47      	ldr	r2, [pc, #284]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c4e:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c80:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c9e:	4a31      	ldr	r2, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <MX_GPIO_Init+0x1b4>)
 8000caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2110      	movs	r1, #16
 8000cba:	482b      	ldr	r0, [pc, #172]	; (8000d68 <MX_GPIO_Init+0x1b8>)
 8000cbc:	f002 fb6c 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4829      	ldr	r0, [pc, #164]	; (8000d6c <MX_GPIO_Init+0x1bc>)
 8000cc6:	f002 fb67 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4828      	ldr	r0, [pc, #160]	; (8000d70 <MX_GPIO_Init+0x1c0>)
 8000cd0:	f002 fb62 	bl	8003398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <MX_GPIO_Init+0x1c4>)
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <MX_GPIO_Init+0x1c8>)
 8000cea:	f002 fa03 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8000cee:	2310      	movs	r3, #16
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_GPIO_Init+0x1b8>)
 8000d06:	f002 f9f5 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4812      	ldr	r0, [pc, #72]	; (8000d6c <MX_GPIO_Init+0x1bc>)
 8000d22:	f002 f9e7 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000d26:	2310      	movs	r3, #16
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_GPIO_Init+0x1c0>)
 8000d3e:	f002 f9d9 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_GPIO_Init+0x1c4>)
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_GPIO_Init+0x1c0>)
 8000d56:	f002 f9cd 	bl	80030f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3738      	adds	r7, #56	; 0x38
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	44020c00 	.word	0x44020c00
 8000d68:	42021400 	.word	0x42021400
 8000d6c:	42020400 	.word	0x42020400
 8000d70:	42021800 	.word	0x42021800
 8000d74:	10110000 	.word	0x10110000
 8000d78:	42020800 	.word	0x42020800

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>

08000d86 <getLidarDistance>:
 */

#include "stm32h5xx_hal.h"

uint16_t getLidarDistance(I2C_HandleTypeDef *i2cHandler)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b088      	sub	sp, #32
 8000d8a:	af02      	add	r7, sp, #8
 8000d8c:	6078      	str	r0, [r7, #4]
	uint8_t sent[] = {0x00};
 8000d8e:	2300      	movs	r3, #0
 8000d90:	743b      	strb	r3, [r7, #16]
	uint8_t receive[4] = {0};
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
	uint8_t comError = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	75fb      	strb	r3, [r7, #23]
	uint16_t distance;


	if (HAL_I2C_Master_Transmit(i2cHandler, (uint8_t)0x20, sent, 1, HAL_MAX_DELAY)
 8000d9a:	f107 0210 	add.w	r2, r7, #16
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2301      	movs	r3, #1
 8000da6:	2120      	movs	r1, #32
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f002 fbb7 	bl	800351c <HAL_I2C_Master_Transmit>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10c      	bne.n	8000dce <getLidarDistance+0x48>
	 || HAL_I2C_Master_Receive(i2cHandler, (uint8_t)0x21, receive, 4, HAL_MAX_DELAY))
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	2121      	movs	r1, #33	; 0x21
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f002 fc9e 	bl	8003704 <HAL_I2C_Master_Receive>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <getLidarDistance+0x4c>
	{
		comError = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	75fb      	strb	r3, [r7, #23]
	}

	if (comError == 0) {
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d108      	bne.n	8000dea <getLidarDistance+0x64>
		distance = (receive[1] << 8) | receive[0];
 8000dd8:	7b7b      	ldrb	r3, [r7, #13]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	7b3b      	ldrb	r3, [r7, #12]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	82bb      	strh	r3, [r7, #20]
 8000de8:	e001      	b.n	8000dee <getLidarDistance+0x68>
	} else {
		distance = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	82bb      	strh	r3, [r7, #20]
	}

	return distance;
 8000dee:	8abb      	ldrh	r3, [r7, #20]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <getAPDSData>:

uint16_t getAPDSData(I2C_HandleTypeDef *i2cHandler, uint8_t *data)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	uint8_t sent[] = {0x93};
 8000e02:	2393      	movs	r3, #147	; 0x93
 8000e04:	723b      	strb	r3, [r7, #8]
	uint8_t comError = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]
	uint16_t clear;

	if (HAL_I2C_Master_Transmit(i2cHandler, (uint8_t)0x39*2, sent, 1, HAL_MAX_DELAY)
 8000e0a:	f107 0208 	add.w	r2, r7, #8
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2301      	movs	r3, #1
 8000e16:	2172      	movs	r1, #114	; 0x72
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f002 fb7f 	bl	800351c <HAL_I2C_Master_Transmit>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10b      	bne.n	8000e3c <getAPDSData+0x44>
	 || HAL_I2C_Master_Receive(i2cHandler, (uint8_t)0x39*2+1, data, 10, HAL_MAX_DELAY))
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	2173      	movs	r1, #115	; 0x73
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f002 fc67 	bl	8003704 <HAL_I2C_Master_Receive>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <getAPDSData+0x48>
	{
		comError = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
	}

	if (comError == 0) {
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <getAPDSData+0x68>
		clear = (data[2] << 8) | data[1];
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3302      	adds	r3, #2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	81bb      	strh	r3, [r7, #12]
 8000e5e:	e001      	b.n	8000e64 <getAPDSData+0x6c>
	} else {
		clear = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	81bb      	strh	r3, [r7, #12]
	}

	return clear;
 8000e64:	89bb      	ldrh	r3, [r7, #12]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0cc      	sub	sp, #304	; 0x130
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e8a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ea0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2100      	movs	r1, #0
 8000eae:	f00a f8c5 	bl	800b03c <memset>
  if(hadc->Instance==ADC1)
 8000eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <HAL_ADC_MspInit+0x104>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d157      	bne.n	8000f74 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ec8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000ecc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000edc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f8b2 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8000ef6:	f7ff ff41 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_ADC_MspInit+0x108>)
 8000efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <HAL_ADC_MspInit+0x108>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_ADC_MspInit+0x108>)
 8000f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f10:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f22:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f26:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_ADC_MspInit+0x108>)
 8000f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0x108>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_ADC_MspInit+0x108>)
 8000f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f54:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f56:	2310      	movs	r3, #16
 8000f58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_ADC_MspInit+0x10c>)
 8000f70:	f002 f8c0 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	42028000 	.word	0x42028000
 8000f84:	44020c00 	.word	0x44020c00
 8000f88:	42020000 	.word	0x42020000

08000f8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08e      	sub	sp, #56	; 0x38
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a59      	ldr	r2, [pc, #356]	; (8001110 <HAL_ETH_MspInit+0x184>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	f040 80ab 	bne.w	8001106 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a57      	ldr	r2, [pc, #348]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000fc0:	4b54      	ldr	r3, [pc, #336]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fca:	623b      	str	r3, [r7, #32]
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000fce:	4b51      	ldr	r3, [pc, #324]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000fde:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000fec:	4b49      	ldr	r3, [pc, #292]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a48      	ldr	r2, [pc, #288]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000ffc:	4b45      	ldr	r3, [pc, #276]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b42      	ldr	r3, [pc, #264]	; (8001114 <HAL_ETH_MspInit+0x188>)
 800100c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001010:	4a40      	ldr	r2, [pc, #256]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800101a:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <HAL_ETH_MspInit+0x188>)
 800101c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_ETH_MspInit+0x188>)
 800102a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800102e:	4a39      	ldr	r2, [pc, #228]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_ETH_MspInit+0x188>)
 800103a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104c:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_ETH_MspInit+0x188>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8001058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8001066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800106a:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <HAL_ETH_MspInit+0x188>)
 800106c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001070:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <HAL_ETH_MspInit+0x188>)
 8001076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800107a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001082:	2332      	movs	r3, #50	; 0x32
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001092:	230b      	movs	r3, #11
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	4619      	mov	r1, r3
 800109c:	481e      	ldr	r0, [pc, #120]	; (8001118 <HAL_ETH_MspInit+0x18c>)
 800109e:	f002 f829 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010a2:	2386      	movs	r3, #134	; 0x86
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b2:	230b      	movs	r3, #11
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	4817      	ldr	r0, [pc, #92]	; (800111c <HAL_ETH_MspInit+0x190>)
 80010be:	f002 f819 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d4:	230b      	movs	r3, #11
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4810      	ldr	r0, [pc, #64]	; (8001120 <HAL_ETH_MspInit+0x194>)
 80010e0:	f002 f808 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80010e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f6:	230b      	movs	r3, #11
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <HAL_ETH_MspInit+0x198>)
 8001102:	f001 fff7 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	; 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40028000 	.word	0x40028000
 8001114:	44020c00 	.word	0x44020c00
 8001118:	42020800 	.word	0x42020800
 800111c:	42020000 	.word	0x42020000
 8001120:	42020400 	.word	0x42020400
 8001124:	42021800 	.word	0x42021800

08001128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0cc      	sub	sp, #304	; 0x130
 800112c:	af00      	add	r7, sp, #0
 800112e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001132:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001136:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800114c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001150:	4618      	mov	r0, r3
 8001152:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001156:	461a      	mov	r2, r3
 8001158:	2100      	movs	r1, #0
 800115a:	f009 ff6f 	bl	800b03c <memset>
  if(hi2c->Instance==I2C2)
 800115e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a33      	ldr	r2, [pc, #204]	; (8001238 <HAL_I2C_MspInit+0x110>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d15d      	bne.n	800122c <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001174:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001188:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800118c:	2200      	movs	r2, #0
 800118e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4618      	mov	r0, r3
 8001198:	f003 ff5c 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80011a2:	f7ff fdeb 	bl	8000d7c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011ac:	4a23      	ldr	r2, [pc, #140]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011bc:	f003 0220 	and.w	r2, r3, #32
 80011c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011d2:	681b      	ldr	r3, [r3, #0]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011da:	2312      	movs	r3, #18
 80011dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ec:	2304      	movs	r3, #4
 80011ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011f6:	4619      	mov	r1, r3
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <HAL_I2C_MspInit+0x118>)
 80011fa:	f001 ff7b 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_I2C_MspInit+0x114>)
 8001200:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_I2C_MspInit+0x114>)
 8001206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800120a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_I2C_MspInit+0x114>)
 8001210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001214:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800121c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001226:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800122a:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40005800 	.word	0x40005800
 800123c:	44020c00 	.word	0x44020c00
 8001240:	42021400 	.word	0x42021400

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ce      	sub	sp, #312	; 0x138
 8001248:	af00      	add	r7, sp, #0
 800124a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800124e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001252:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001268:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800126c:	4618      	mov	r0, r3
 800126e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001272:	461a      	mov	r2, r3
 8001274:	2100      	movs	r1, #0
 8001276:	f009 fee1 	bl	800b03c <memset>
  if(huart->Instance==LPUART1)
 800127a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800127e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a67      	ldr	r2, [pc, #412]	; (8001424 <HAL_UART_MspInit+0x1e0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d15e      	bne.n	800134a <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800128c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001290:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80012a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012a8:	2200      	movs	r2, #0
 80012aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0318 	add.w	r3, r7, #24
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fece 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80012be:	f7ff fd5d 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012c2:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80012c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80012c8:	4a57      	ldr	r2, [pc, #348]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ce:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80012d2:	4b55      	ldr	r3, [pc, #340]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80012d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80012d8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80012dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80012ee:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80012f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f6:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001300:	4b49      	ldr	r3, [pc, #292]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 8001302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001306:	f003 0202 	and.w	r2, r3, #2
 800130a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800130e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001318:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800131c:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 800131e:	23c0      	movs	r3, #192	; 0xc0
 8001320:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001336:	2308      	movs	r3, #8
 8001338:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001340:	4619      	mov	r1, r3
 8001342:	483a      	ldr	r0, [pc, #232]	; (800142c <HAL_UART_MspInit+0x1e8>)
 8001344:	f001 fed6 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001348:	e066      	b.n	8001418 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART3)
 800134a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800134e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a36      	ldr	r2, [pc, #216]	; (8001430 <HAL_UART_MspInit+0x1ec>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d15d      	bne.n	8001418 <HAL_UART_MspInit+0x1d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800135c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001360:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001364:	f04f 0204 	mov.w	r2, #4
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001370:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001374:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001378:	2200      	movs	r2, #0
 800137a:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fe67 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 800138c:	f7ff fcf6 	bl	8000d7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 8001392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001396:	4a24      	ldr	r2, [pc, #144]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80013a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013a6:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80013aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013bc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c4:	4a18      	ldr	r2, [pc, #96]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_UART_MspInit+0x1e4>)
 80013d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d4:	f003 0208 	and.w	r2, r3, #8
 80013d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013ea:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80013ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001406:	2307      	movs	r3, #7
 8001408:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001410:	4619      	mov	r1, r3
 8001412:	4808      	ldr	r0, [pc, #32]	; (8001434 <HAL_UART_MspInit+0x1f0>)
 8001414:	f001 fe6e 	bl	80030f4 <HAL_GPIO_Init>
}
 8001418:	bf00      	nop
 800141a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	44002400 	.word	0x44002400
 8001428:	44020c00 	.word	0x44020c00
 800142c:	42020400 	.word	0x42020400
 8001430:	40004800 	.word	0x40004800
 8001434:	42020c00 	.word	0x42020c00

08001438 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0cc      	sub	sp, #304	; 0x130
 800143c:	af00      	add	r7, sp, #0
 800143e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001446:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800145c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001460:	4618      	mov	r0, r3
 8001462:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001466:	461a      	mov	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	f009 fde7 	bl	800b03c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800146e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a33      	ldr	r2, [pc, #204]	; (8001548 <HAL_PCD_MspInit+0x110>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d15e      	bne.n	800153e <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001484:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0310 	mov.w	r3, #16
 8001490:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001498:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800149c:	2230      	movs	r2, #48	; 0x30
 800149e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fdd4 	bl	8005054 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 80014b2:	f7ff fc63 	bl	8000d7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_PCD_MspInit+0x114>)
 80014b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014bc:	4a23      	ldr	r2, [pc, #140]	; (800154c <HAL_PCD_MspInit+0x114>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_PCD_MspInit+0x114>)
 80014c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014cc:	f003 0201 	and.w	r2, r3, #1
 80014d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014e2:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80014e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80014fe:	230a      	movs	r3, #10
 8001500:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001508:	4619      	mov	r1, r3
 800150a:	4811      	ldr	r0, [pc, #68]	; (8001550 <HAL_PCD_MspInit+0x118>)
 800150c:	f001 fdf2 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_PCD_MspInit+0x114>)
 8001512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_PCD_MspInit+0x114>)
 8001518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_PCD_MspInit+0x114>)
 8001522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001526:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800152a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800152e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001538:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800153c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40016000 	.word	0x40016000
 800154c:	44020c00 	.word	0x44020c00
 8001550:	42020000 	.word	0x42020000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f904 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <SystemInit+0xdc>)
 80015b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b4:	4a33      	ldr	r2, [pc, #204]	; (8001684 <SystemInit+0xdc>)
 80015b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <SystemInit+0xe0>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <SystemInit+0xe0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <SystemInit+0xe0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <SystemInit+0xe0>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	492c      	ldr	r1, [pc, #176]	; (8001688 <SystemInit+0xe0>)
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <SystemInit+0xe4>)
 80015d8:	4013      	ands	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <SystemInit+0xe0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <SystemInit+0xe0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <SystemInit+0xe0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <SystemInit+0xe0>)
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <SystemInit+0xe8>)
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <SystemInit+0xe0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <SystemInit+0xe0>)
 80015fc:	4a24      	ldr	r2, [pc, #144]	; (8001690 <SystemInit+0xe8>)
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <SystemInit+0xe0>)
 8001602:	2200      	movs	r2, #0
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <SystemInit+0xe0>)
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <SystemInit+0xe8>)
 800160a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <SystemInit+0xe0>)
 800160e:	2200      	movs	r2, #0
 8001610:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <SystemInit+0xe0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <SystemInit+0xe0>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <SystemInit+0xe0>)
 8001620:	2200      	movs	r2, #0
 8001622:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <SystemInit+0xdc>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <SystemInit+0xec>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001634:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800163c:	d003      	beq.n	8001646 <SystemInit+0x9e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001644:	d117      	bne.n	8001676 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <SystemInit+0xec>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <SystemInit+0xec>)
 8001654:	4a10      	ldr	r2, [pc, #64]	; (8001698 <SystemInit+0xf0>)
 8001656:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <SystemInit+0xec>)
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <SystemInit+0xf4>)
 800165c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <SystemInit+0xec>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <SystemInit+0xec>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <SystemInit+0xec>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <SystemInit+0xec>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	61d3      	str	r3, [r2, #28]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	44020c00 	.word	0x44020c00
 800168c:	eae2eae3 	.word	0xeae2eae3
 8001690:	01010280 	.word	0x01010280
 8001694:	40022000 	.word	0x40022000
 8001698:	08192a3b 	.word	0x08192a3b
 800169c:	4c5d6e7f 	.word	0x4c5d6e7f

080016a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a4:	f7ff ff80 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <LoopForever+0x6>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	; (80016e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <LoopForever+0xe>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	; (80016ec <LoopForever+0x16>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016ce:	f009 fc91 	bl	800aff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016d2:	f7fe ffa3 	bl	800061c <main>

080016d6 <LoopForever>:

LoopForever:
    b LoopForever
 80016d6:	e7fe      	b.n	80016d6 <LoopForever>
  ldr   r0, =_estack
 80016d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016e4:	0800b0b4 	.word	0x0800b0b4
  ldr r2, =_sbss
 80016e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016ec:	200006c8 	.word	0x200006c8

080016f0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC1_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 f895 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80016fe:	f003 fb1f 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_Init+0x40>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	490a      	ldr	r1, [pc, #40]	; (8001738 <HAL_Init+0x44>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_Init+0x48>)
 8001716:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001718:	200f      	movs	r0, #15
 800171a:	f000 f811 	bl	8001740 <HAL_InitTick>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e002      	b.n	800172e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fba1 	bl	8000e6e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	44020c00 	.word	0x44020c00
 8001738:	0800b064 	.word	0x0800b064
 800173c:	20000000 	.word	0x20000000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_InitTick+0x60>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e021      	b.n	8001798 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_InitTick+0x64>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_InitTick+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f001 f881 	bl	8002872 <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f001 f859 	bl	800283e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x68>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008
 80017d0:	200006c4 	.word	0x200006c4

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200006c4 	.word	0x200006c4

080017ec <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80017f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80017fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80017fe:	4905      	ldr	r1, [pc, #20]	; (8001814 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	44000400 	.word	0x44000400

08001818 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	609a      	str	r2, [r3, #8]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80018ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	42028000 	.word	0x42028000

080018cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3360      	adds	r3, #96	; 0x60
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <LL_ADC_SetOffset+0x44>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	4313      	orrs	r3, r2
 80018fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	03fff000 	.word	0x03fff000

08001914 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3360      	adds	r3, #96	; 0x60
 8001922:	461a      	mov	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3360      	adds	r3, #96	; 0x60
 8001950:	461a      	mov	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001976:	b480      	push	{r7}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3360      	adds	r3, #96	; 0x60
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	431a      	orrs	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3360      	adds	r3, #96	; 0x60
 80019bc:	461a      	mov	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	615a      	str	r2, [r3, #20]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3330      	adds	r3, #48	; 0x30
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	211f      	movs	r1, #31
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	f003 011f 	and.w	r1, r3, #31
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3314      	adds	r3, #20
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	0e5b      	lsrs	r3, r3, #25
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	0d1b      	lsrs	r3, r3, #20
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2107      	movs	r1, #7
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	401a      	ands	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	0d1b      	lsrs	r3, r3, #20
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0318 	and.w	r3, r3, #24
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001adc:	40d9      	lsrs	r1, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	000fffff 	.word	0x000fffff

08001b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6093      	str	r3, [r2, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b88:	d101      	bne.n	8001b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <LL_ADC_IsEnabled+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_ADC_IsEnabled+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d101      	bne.n	8001c00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e136      	b.n	8001e98 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff f91f 	bl	8000e7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff67 	bl	8001b24 <LL_ADC_IsDeepPowerDownEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff4d 	bl	8001b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff82 	bl	8001b74 <LL_ADC_IsInternalRegulatorEnabled>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d115      	bne.n	8001ca2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff66 	bl	8001b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c80:	4b87      	ldr	r3, [pc, #540]	; (8001ea0 <HAL_ADC_Init+0x290>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	4a87      	ldr	r2, [pc, #540]	; (8001ea4 <HAL_ADC_Init+0x294>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff64 	bl	8001b74 <LL_ADC_IsInternalRegulatorEnabled>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	f043 0210 	orr.w	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff75 	bl	8001bc2 <LL_ADC_REG_IsConversionOngoing>
 8001cd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 80cf 	bne.w	8001e86 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 80cb 	bne.w	8001e86 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cf8:	f043 0202 	orr.w	r2, r3, #2
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff49 	bl	8001b9c <LL_ADC_IsEnabled>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d110      	bne.n	8001d32 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d10:	4865      	ldr	r0, [pc, #404]	; (8001ea8 <HAL_ADC_Init+0x298>)
 8001d12:	f7ff ff43 	bl	8001b9c <LL_ADC_IsEnabled>
 8001d16:	4604      	mov	r4, r0
 8001d18:	4864      	ldr	r0, [pc, #400]	; (8001eac <HAL_ADC_Init+0x29c>)
 8001d1a:	f7ff ff3f 	bl	8001b9c <LL_ADC_IsEnabled>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4323      	orrs	r3, r4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4860      	ldr	r0, [pc, #384]	; (8001eb0 <HAL_ADC_Init+0x2a0>)
 8001d2e:	f7ff fd73 	bl	8001818 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7e5b      	ldrb	r3, [r3, #25]
 8001d36:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d3c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d42:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d48:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d50:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	3b01      	subs	r3, #1
 8001d66:	045b      	lsls	r3, r3, #17
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_ADC_Init+0x2a4>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	69b9      	ldr	r1, [r7, #24]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff15 	bl	8001be8 <LL_ADC_INJ_IsConversionOngoing>
 8001dbe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13d      	bne.n	8001e42 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d13a      	bne.n	8001e42 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7e1b      	ldrb	r3, [r3, #24]
 8001dd0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dd8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001de8:	f023 0302 	bic.w	r3, r3, #2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	69b9      	ldr	r1, [r7, #24]
 8001df2:	430b      	orrs	r3, r1
 8001df4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d118      	bne.n	8001e32 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e22:	430a      	orrs	r2, r1
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	611a      	str	r2, [r3, #16]
 8001e30:	e007      	b.n	8001e42 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10c      	bne.n	8001e64 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	f023 010f 	bic.w	r1, r3, #15
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
 8001e62:	e007      	b.n	8001e74 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 020f 	bic.w	r2, r2, #15
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f023 0303 	bic.w	r3, r3, #3
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58
 8001e84:	e007      	b.n	8001e96 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f043 0210 	orr.w	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3724      	adds	r7, #36	; 0x24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	053e2d63 	.word	0x053e2d63
 8001ea8:	42028000 	.word	0x42028000
 8001eac:	42028100 	.word	0x42028100
 8001eb0:	42028300 	.word	0x42028300
 8001eb4:	fff04007 	.word	0xfff04007

08001eb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0b6      	sub	sp, #216	; 0xd8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x22>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e3db      	b.n	8002692 <HAL_ADC_ConfigChannel+0x7da>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe6b 	bl	8001bc2 <LL_ADC_REG_IsConversionOngoing>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 83c0 	bne.w	8002674 <HAL_ADC_ConfigChannel+0x7bc>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d104      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fccf 	bl	80018a4 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff fd78 	bl	8001a08 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fe50 	bl	8001bc2 <LL_ADC_REG_IsConversionOngoing>
 8001f22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fe5c 	bl	8001be8 <LL_ADC_INJ_IsConversionOngoing>
 8001f30:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 81d9 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 81d4 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f50:	d10f      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7ff fd7f 	bl	8001a60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fd39 	bl	80019e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f70:	e00e      	b.n	8001f90 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f7ff fd6e 	bl	8001a60 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd29 	bl	80019e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	08db      	lsrs	r3, r3, #3
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d022      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fc2:	f7ff fc83 	bl	80018cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f7ff fccf 	bl	8001976 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x136>
 8001fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fec:	e000      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x138>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f7ff fcdb 	bl	80019ac <LL_ADC_SetOffsetSaturation>
 8001ff6:	e17b      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fc88 	bl	8001914 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x16c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fc7d 	bl	8001914 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 021f 	and.w	r2, r3, #31
 8002022:	e01e      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1aa>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fc72 	bl	8001914 <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800204a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x19e>
  {
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e004      	b.n	8002060 <HAL_ADC_ConfigChannel+0x1a8>
  }
  return __builtin_clz(value);
 8002056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_ADC_ConfigChannel+0x1c2>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	e018      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1f4>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800208e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 800209e:	2320      	movs	r3, #32
 80020a0:	e004      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 80020a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fc41 	bl	8001940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fc25 	bl	8001914 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x232>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fc1a 	bl	8001914 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	e01e      	b.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fc0f 	bl	8001914 <LL_ADC_GetOffsetChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800210c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e004      	b.n	8002126 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 800211c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x288>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	e018      	b.n	8002172 <HAL_ADC_ConfigChannel+0x2ba>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800215c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e004      	b.n	8002172 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8002168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002172:	429a      	cmp	r2, r3
 8002174:	d106      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	2101      	movs	r1, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fbde 	bl	8001940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fbc2 	bl	8001914 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x2f8>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2102      	movs	r1, #2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fbb7 	bl	8001914 <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	f003 021f 	and.w	r2, r3, #31
 80021ae:	e01e      	b.n	80021ee <HAL_ADC_ConfigChannel+0x336>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fbac 	bl	8001914 <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e004      	b.n	80021ec <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80021e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x34e>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	e016      	b.n	8002234 <HAL_ADC_ConfigChannel+0x37c>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800221a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800221e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e004      	b.n	8002234 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800222a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002234:	429a      	cmp	r2, r3
 8002236:	d106      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	2102      	movs	r1, #2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fb7d 	bl	8001940 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2103      	movs	r1, #3
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fb61 	bl	8001914 <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x3ba>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2103      	movs	r1, #3
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fb56 	bl	8001914 <LL_ADC_GetOffsetChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	0e9b      	lsrs	r3, r3, #26
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	e017      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x3ea>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2103      	movs	r1, #3
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fb4b 	bl	8001914 <LL_ADC_GetOffsetChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800228a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800228c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800228e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x402>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e9b      	lsrs	r3, r3, #26
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	e011      	b.n	80022de <HAL_ADC_ConfigChannel+0x426>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e003      	b.n	80022de <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022de:	429a      	cmp	r2, r3
 80022e0:	d106      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2103      	movs	r1, #3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fb28 	bl	8001940 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fc51 	bl	8001b9c <LL_ADC_IsEnabled>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 813f 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	461a      	mov	r2, r3
 8002310:	f7ff fbd2 	bl	8001ab8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a8e      	ldr	r2, [pc, #568]	; (8002554 <HAL_ADC_ConfigChannel+0x69c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	f040 8130 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x490>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2b09      	cmp	r3, #9
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e019      	b.n	800237c <HAL_ADC_ConfigChannel+0x4c4>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002358:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800235a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e003      	b.n	800236c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2b09      	cmp	r3, #9
 8002374:	bf94      	ite	ls
 8002376:	2301      	movls	r3, #1
 8002378:	2300      	movhi	r3, #0
 800237a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237c:	2b00      	cmp	r3, #0
 800237e:	d079      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_ADC_ConfigChannel+0x4e4>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	3301      	adds	r3, #1
 8002394:	069b      	lsls	r3, r3, #26
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	e015      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x510>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e003      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x530>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	e017      	b.n	8002418 <HAL_ADC_ConfigChannel+0x560>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	ea42 0103 	orr.w	r1, r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <HAL_ADC_ConfigChannel+0x586>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	3301      	adds	r3, #1
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	051b      	lsls	r3, r3, #20
 800243c:	e018      	b.n	8002470 <HAL_ADC_ConfigChannel+0x5b8>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e003      	b.n	8002462 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	430b      	orrs	r3, r1
 8002472:	e080      	b.n	8002576 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x5d8>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	069b      	lsls	r3, r3, #26
 800248a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248e:	e015      	b.n	80024bc <HAL_ADC_ConfigChannel+0x604>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x624>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	e017      	b.n	800250c <HAL_ADC_ConfigChannel+0x654>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	61fb      	str	r3, [r7, #28]
  return result;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	ea42 0103 	orr.w	r1, r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10d      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x680>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	3b1e      	subs	r3, #30
 8002530:	051b      	lsls	r3, r3, #20
 8002532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002536:	e01d      	b.n	8002574 <HAL_ADC_ConfigChannel+0x6bc>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	613b      	str	r3, [r7, #16]
  return result;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e005      	b.n	8002560 <HAL_ADC_ConfigChannel+0x6a8>
 8002554:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	051b      	lsls	r3, r3, #20
 8002570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002574:	430b      	orrs	r3, r1
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	4619      	mov	r1, r3
 800257c:	f7ff fa70 	bl	8001a60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b45      	ldr	r3, [pc, #276]	; (800269c <HAL_ADC_ConfigChannel+0x7e4>)
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d07c      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800258c:	4844      	ldr	r0, [pc, #272]	; (80026a0 <HAL_ADC_ConfigChannel+0x7e8>)
 800258e:	f7ff f969 	bl	8001864 <LL_ADC_GetCommonPathInternalCh>
 8002592:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a42      	ldr	r2, [pc, #264]	; (80026a4 <HAL_ADC_ConfigChannel+0x7ec>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d127      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x738>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d121      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x738>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a3d      	ldr	r2, [pc, #244]	; (80026a8 <HAL_ADC_ConfigChannel+0x7f0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d167      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025be:	4619      	mov	r1, r3
 80025c0:	4837      	ldr	r0, [pc, #220]	; (80026a0 <HAL_ADC_ConfigChannel+0x7e8>)
 80025c2:	f7ff f93c 	bl	800183e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c6:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_ADC_ConfigChannel+0x7f4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <HAL_ADC_ConfigChannel+0x7f8>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x730>
          {
            wait_loop_index--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x72a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ee:	e04a      	b.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2f      	ldr	r2, [pc, #188]	; (80026b4 <HAL_ADC_ConfigChannel+0x7fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x76a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x76a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <HAL_ADC_ConfigChannel+0x800>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d13a      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002614:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002618:	4619      	mov	r1, r3
 800261a:	4821      	ldr	r0, [pc, #132]	; (80026a0 <HAL_ADC_ConfigChannel+0x7e8>)
 800261c:	f7ff f90f 	bl	800183e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002620:	e031      	b.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a25      	ldr	r2, [pc, #148]	; (80026bc <HAL_ADC_ConfigChannel+0x804>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d113      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x79c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800262c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x79c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_ADC_ConfigChannel+0x7f0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d121      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800264a:	4619      	mov	r1, r3
 800264c:	4814      	ldr	r0, [pc, #80]	; (80026a0 <HAL_ADC_ConfigChannel+0x7e8>)
 800264e:	f7ff f8f6 	bl	800183e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002652:	e018      	b.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_ADC_ConfigChannel+0x808>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d113      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ADC_ConfigChannel+0x7f0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff f907 	bl	8001880 <LL_ADC_EnableChannelVDDcore>
 8002672:	e008      	b.n	8002686 <HAL_ADC_ConfigChannel+0x7ce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800268e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002692:	4618      	mov	r0, r3
 8002694:	37d8      	adds	r7, #216	; 0xd8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	80080000 	.word	0x80080000
 80026a0:	42028300 	.word	0x42028300
 80026a4:	c3210000 	.word	0xc3210000
 80026a8:	42028000 	.word	0x42028000
 80026ac:	20000000 	.word	0x20000000
 80026b0:	053e2d63 	.word	0x053e2d63
 80026b4:	43290000 	.word	0x43290000
 80026b8:	42028100 	.word	0x42028100
 80026bc:	c7520000 	.word	0xc7520000
 80026c0:	475a0000 	.word	0x475a0000

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ff8e 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff47 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800284c:	f7ff ff5e 	bl	800270c <__NVIC_GetPriorityGrouping>
 8002850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7ff ff90 	bl	800277c <NVIC_EncodePriority>
 800285c:	4602      	mov	r2, r0
 800285e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff5f 	bl	8002728 <__NVIC_SetPriority>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffb2 	bl	80027e4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0d2      	b.n	8002a44 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2223      	movs	r2, #35	; 0x23
 80028ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fe fb6b 	bl	8000f8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_ETH_Init+0x1c0>)
 80028b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028bc:	4a63      	ldr	r2, [pc, #396]	; (8002a4c <HAL_ETH_Init+0x1c0>)
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80028c6:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <HAL_ETH_Init+0x1c0>)
 80028c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7a1b      	ldrb	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe ff85 	bl	80017ec <HAL_SBS_ETHInterfaceSelect>
 80028e2:	e003      	b.n	80028ec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 80028e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80028e8:	f7fe ff80 	bl	80017ec <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_ETH_Init+0x1c4>)
 80028ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002908:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800290a:	f7fe ff63 	bl	80017d4 <HAL_GetTick>
 800290e:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002910:	e011      	b.n	8002936 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002912:	f7fe ff5f 	bl	80017d4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002920:	d909      	bls.n	8002936 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2204      	movs	r2, #4
 8002926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	22e0      	movs	r2, #224	; 0xe0
 800292e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e086      	b.n	8002a44 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e4      	bne.n	8002912 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f885 	bl	8002a58 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800294e:	f002 fb23 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8002952:	4603      	mov	r3, r0
 8002954:	4a3f      	ldr	r2, [pc, #252]	; (8002a54 <HAL_ETH_Init+0x1c8>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9a      	lsrs	r2, r3, #18
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3a01      	subs	r2, #1
 8002962:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa80 	bl	8002e6c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002978:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002984:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002988:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	22e0      	movs	r2, #224	; 0xe0
 80029a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e04b      	b.n	8002a44 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029bc:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6952      	ldr	r2, [r2, #20]
 80029c4:	0051      	lsls	r1, r2, #1
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fae6 	bl	8002fa6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fb2c 	bl	8003038 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	3305      	adds	r3, #5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	021a      	lsls	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	3303      	adds	r3, #3
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	061a      	lsls	r2, r3, #24
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a1e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a2c:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	44020c00 	.word	0x44020c00
 8002a50:	44000400 	.word	0x44000400
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a72:	f002 fa91 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8002a76:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d908      	bls.n	8002a92 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d804      	bhi.n	8002a92 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e034      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d908      	bls.n	8002aac <HAL_ETH_SetMDIOClockRange+0x54>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d204      	bcs.n	8002aac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e027      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4a1a      	ldr	r2, [pc, #104]	; (8002b18 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d303      	bcc.n	8002abc <HAL_ETH_SetMDIOClockRange+0x64>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d91e      	bls.n	8002afa <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d908      	bls.n	8002ad6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d804      	bhi.n	8002ad6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e012      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d908      	bls.n	8002af0 <HAL_ETH_SetMDIOClockRange+0x98>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d804      	bhi.n	8002af0 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e005      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e000      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002afa:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	01312cff 	.word	0x01312cff
 8002b14:	02160ebf 	.word	0x02160ebf
 8002b18:	03938700 	.word	0x03938700
 8002b1c:	05f5e0ff 	.word	0x05f5e0ff
 8002b20:	08f0d17f 	.word	0x08f0d17f
 8002b24:	0ee6b280 	.word	0x0ee6b280

08002b28 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002b3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	791b      	ldrb	r3, [r3, #4]
 8002b40:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002b42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	7b1b      	ldrb	r3, [r3, #12]
 8002b48:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	7b5b      	ldrb	r3, [r3, #13]
 8002b50:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002b52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	7b9b      	ldrb	r3, [r3, #14]
 8002b58:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002b5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	7bdb      	ldrb	r3, [r3, #15]
 8002b60:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002b62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	7c12      	ldrb	r2, [r2, #16]
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d102      	bne.n	8002b72 <ETH_SetMACConfig+0x4a>
 8002b6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b70:	e000      	b.n	8002b74 <ETH_SetMACConfig+0x4c>
 8002b72:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002b74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	7c52      	ldrb	r2, [r2, #17]
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	d102      	bne.n	8002b84 <ETH_SetMACConfig+0x5c>
 8002b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b82:	e000      	b.n	8002b86 <ETH_SetMACConfig+0x5e>
 8002b84:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	7c9b      	ldrb	r3, [r3, #18]
 8002b8c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002b8e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b94:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	7f1b      	ldrb	r3, [r3, #28]
 8002ba0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002ba2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	7f5b      	ldrb	r3, [r3, #29]
 8002ba8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002baa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	7f92      	ldrb	r2, [r2, #30]
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d102      	bne.n	8002bba <ETH_SetMACConfig+0x92>
 8002bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bb8:	e000      	b.n	8002bbc <ETH_SetMACConfig+0x94>
 8002bba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002bbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	7fdb      	ldrb	r3, [r3, #31]
 8002bc2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002bc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002bcc:	2a00      	cmp	r2, #0
 8002bce:	d102      	bne.n	8002bd6 <ETH_SetMACConfig+0xae>
 8002bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd4:	e000      	b.n	8002bd8 <ETH_SetMACConfig+0xb0>
 8002bd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002bd8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002be6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002be8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <ETH_SetMACConfig+0x230>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	430b      	orrs	r3, r1
 8002c04:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c12:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c14:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c1c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002c1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002c26:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002c28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002c30:	2a00      	cmp	r2, #0
 8002c32:	d102      	bne.n	8002c3a <ETH_SetMACConfig+0x112>
 8002c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c38:	e000      	b.n	8002c3c <ETH_SetMACConfig+0x114>
 8002c3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002c3c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <ETH_SetMACConfig+0x234>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	68f9      	ldr	r1, [r7, #12]
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c60:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c88:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	d101      	bne.n	8002c9e <ETH_SetMACConfig+0x176>
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	e000      	b.n	8002ca0 <ETH_SetMACConfig+0x178>
 8002c9e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002ca0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	68f9      	ldr	r1, [r7, #12]
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002cc8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002cd0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f023 0103 	bic.w	r1, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002cf6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	d101      	bne.n	8002d1a <ETH_SetMACConfig+0x1f2>
 8002d16:	2240      	movs	r2, #64	; 0x40
 8002d18:	e000      	b.n	8002d1c <ETH_SetMACConfig+0x1f4>
 8002d1a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002d1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002d24:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002d26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002d2e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d3c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	00048083 	.word	0x00048083
 8002d5c:	c0f88000 	.word	0xc0f88000

08002d60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002d78:	f023 0302 	bic.w	r3, r3, #2
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d8a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	791b      	ldrb	r3, [r3, #4]
 8002d90:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7b1b      	ldrb	r3, [r3, #12]
 8002d9c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	68f9      	ldr	r1, [r7, #12]
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dc0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	7b5b      	ldrb	r3, [r3, #13]
 8002dc6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <ETH_SetDMAConfig+0x104>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	7d1b      	ldrb	r3, [r3, #20]
 8002df8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002dfa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	7f5b      	ldrb	r3, [r3, #29]
 8002e00:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <ETH_SetDMAConfig+0x108>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e22:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	7f1b      	ldrb	r3, [r3, #28]
 8002e2a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e44:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e54:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	fffec000 	.word	0xfffec000
 8002e68:	ffc0efef 	.word	0xffc0efef

08002e6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0a4      	sub	sp, #144	; 0x90
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002ec4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002ec8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002f04:	2320      	movs	r3, #32
 8002f06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002f16:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f20:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002f46:	2300      	movs	r3, #0
 8002f48:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fde6 	bl	8002b28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f60:	2301      	movs	r3, #1
 8002f62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002f8c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fee1 	bl	8002d60 <ETH_SetDMAConfig>
}
 8002f9e:	bf00      	nop
 8002fa0:	3790      	adds	r7, #144	; 0x90
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e01d      	b.n	8002ff0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68d9      	ldr	r1, [r3, #12]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	3206      	adds	r2, #6
 8002fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3301      	adds	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d9de      	bls.n	8002fb4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003004:	461a      	mov	r2, r3
 8003006:	2303      	movs	r3, #3
 8003008:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003018:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003028:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e023      	b.n	800308e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6919      	ldr	r1, [r3, #16]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	3212      	adds	r2, #18
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d9d8      	bls.n	8003046 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ba:	461a      	mov	r2, r3
 80030bc:	2303      	movs	r3, #3
 80030be:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003102:	e136      	b.n	8003372 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8128 	beq.w	800336c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x38>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b12      	cmp	r3, #18
 800312a:	d125      	bne.n	8003178 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4013      	ands	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	08da      	lsrs	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3208      	adds	r2, #8
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0203 	and.w	r2, r3, #3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d00b      	beq.n	80031cc <HAL_GPIO_Init+0xd8>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d007      	beq.n	80031cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b12      	cmp	r3, #18
 80031ca:	d130      	bne.n	800322e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003202:	2201      	movs	r2, #1
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4013      	ands	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 0201 	and.w	r2, r3, #1
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d017      	beq.n	8003266 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4013      	ands	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d07c      	beq.n	800336c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003272:	4a47      	ldr	r2, [pc, #284]	; (8003390 <HAL_GPIO_Init+0x29c>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3318      	adds	r3, #24
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	220f      	movs	r2, #15
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4013      	ands	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0a9a      	lsrs	r2, r3, #10
 800329a:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <HAL_GPIO_Init+0x2a0>)
 800329c:	4013      	ands	r3, r2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	f002 0203 	and.w	r2, r2, #3
 80032a4:	00d2      	lsls	r2, r2, #3
 80032a6:	4093      	lsls	r3, r2
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80032ae:	4938      	ldr	r1, [pc, #224]	; (8003390 <HAL_GPIO_Init+0x29c>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3318      	adds	r3, #24
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80032bc:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_GPIO_Init+0x29c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_GPIO_Init+0x29c>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_GPIO_Init+0x29c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4013      	ands	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800330a:	4a21      	ldr	r2, [pc, #132]	; (8003390 <HAL_GPIO_Init+0x29c>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003310:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_GPIO_Init+0x29c>)
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003316:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43db      	mvns	r3, r3
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4013      	ands	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_GPIO_Init+0x29c>)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_GPIO_Init+0x29c>)
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003344:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_GPIO_Init+0x29c>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	3301      	adds	r3, #1
 8003370:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	f47f aec1 	bne.w	8003104 <HAL_GPIO_Init+0x10>
  }
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	44022000 	.word	0x44022000
 8003394:	002f7f7f 	.word	0x002f7f7f

08003398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
 80033a4:	4613      	mov	r3, r2
 80033a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a8:	787b      	ldrb	r3, [r7, #1]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033b4:	e002      	b.n	80033bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	041a      	lsls	r2, r3, #16
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	43d9      	mvns	r1, r3
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	400b      	ands	r3, r1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e081      	b.n	8003512 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fe80 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800344c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d107      	bne.n	8003476 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	e006      	b.n	8003484 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003482:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d104      	bne.n	8003496 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003494:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69d9      	ldr	r1, [r3, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	f040 80da 	bne.w	80036f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_I2C_Master_Transmit+0x30>
 8003548:	2302      	movs	r3, #2
 800354a:	e0d3      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1d8>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003554:	f7fe f93e 	bl	80017d4 <HAL_GetTick>
 8003558:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2319      	movs	r3, #25
 8003560:	2201      	movs	r2, #1
 8003562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f9e6 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0be      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2210      	movs	r2, #16
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	893a      	ldrh	r2, [r7, #8]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2bff      	cmp	r3, #255	; 0xff
 80035a6:	d90e      	bls.n	80035c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	8979      	ldrh	r1, [r7, #10]
 80035b6:	4b51      	ldr	r3, [pc, #324]	; (80036fc <HAL_I2C_Master_Transmit+0x1e0>)
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fbf6 	bl	8003db0 <I2C_TransferConfig>
 80035c4:	e06c      	b.n	80036a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	8979      	ldrh	r1, [r7, #10]
 80035d8:	4b48      	ldr	r3, [pc, #288]	; (80036fc <HAL_I2C_Master_Transmit+0x1e0>)
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fbe5 	bl	8003db0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035e6:	e05b      	b.n	80036a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	6a39      	ldr	r1, [r7, #32]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f9f2 	bl	80039d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e07b      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d034      	beq.n	80036a0 <HAL_I2C_Master_Transmit+0x184>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	d130      	bne.n	80036a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2200      	movs	r2, #0
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f975 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04d      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	2bff      	cmp	r3, #255	; 0xff
 8003660:	d90e      	bls.n	8003680 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	22ff      	movs	r2, #255	; 0xff
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	b2da      	uxtb	r2, r3
 800366e:	8979      	ldrh	r1, [r7, #10]
 8003670:	2300      	movs	r3, #0
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fb99 	bl	8003db0 <I2C_TransferConfig>
 800367e:	e00f      	b.n	80036a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	b2da      	uxtb	r2, r3
 8003690:	8979      	ldrh	r1, [r7, #10]
 8003692:	2300      	movs	r3, #0
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fb88 	bl	8003db0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d19e      	bne.n	80035e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f9d8 	bl	8003a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e01a      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2220      	movs	r2, #32
 80036c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_I2C_Master_Transmit+0x1e4>)
 80036d2:	400b      	ands	r3, r1
 80036d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	80002000 	.word	0x80002000
 8003700:	fe00e800 	.word	0xfe00e800

08003704 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	460b      	mov	r3, r1
 8003712:	817b      	strh	r3, [r7, #10]
 8003714:	4613      	mov	r3, r2
 8003716:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b20      	cmp	r3, #32
 8003722:	f040 80db 	bne.w	80038dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_I2C_Master_Receive+0x30>
 8003730:	2302      	movs	r3, #2
 8003732:	e0d4      	b.n	80038de <HAL_I2C_Master_Receive+0x1da>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800373c:	f7fe f84a 	bl	80017d4 <HAL_GetTick>
 8003740:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2319      	movs	r3, #25
 8003748:	2201      	movs	r2, #1
 800374a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f8f2 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0bf      	b.n	80038de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2222      	movs	r2, #34	; 0x22
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2210      	movs	r2, #16
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	893a      	ldrh	r2, [r7, #8]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2bff      	cmp	r3, #255	; 0xff
 800378e:	d90e      	bls.n	80037ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	b2da      	uxtb	r2, r3
 800379c:	8979      	ldrh	r1, [r7, #10]
 800379e:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <HAL_I2C_Master_Receive+0x1e4>)
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fb02 	bl	8003db0 <I2C_TransferConfig>
 80037ac:	e06d      	b.n	800388a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	8979      	ldrh	r1, [r7, #10]
 80037c0:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <HAL_I2C_Master_Receive+0x1e4>)
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 faf1 	bl	8003db0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037ce:	e05c      	b.n	800388a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	6a39      	ldr	r1, [r7, #32]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f989 	bl	8003aec <I2C_WaitOnRXNEFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e07c      	b.n	80038de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d034      	beq.n	800388a <HAL_I2C_Master_Receive+0x186>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d130      	bne.n	800388a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2200      	movs	r2, #0
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f880 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e04d      	b.n	80038de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2bff      	cmp	r3, #255	; 0xff
 800384a:	d90e      	bls.n	800386a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	b2da      	uxtb	r2, r3
 8003858:	8979      	ldrh	r1, [r7, #10]
 800385a:	2300      	movs	r3, #0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 faa4 	bl	8003db0 <I2C_TransferConfig>
 8003868:	e00f      	b.n	800388a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	b2da      	uxtb	r2, r3
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	2300      	movs	r3, #0
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fa93 	bl	8003db0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d19d      	bne.n	80037d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	6a39      	ldr	r1, [r7, #32]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f8e3 	bl	8003a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e01a      	b.n	80038de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2220      	movs	r2, #32
 80038ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <HAL_I2C_Master_Receive+0x1e8>)
 80038bc:	400b      	ands	r3, r1
 80038be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	80002400 	.word	0x80002400
 80038ec:	fe00e800 	.word	0xfe00e800

080038f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d103      	bne.n	800390e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d007      	beq.n	800392c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	619a      	str	r2, [r3, #24]
  }
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003948:	e031      	b.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d02d      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fd ff3f 	bl	80017d4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d122      	bne.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4013      	ands	r3, r2
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	429a      	cmp	r2, r3
 8003984:	d113      	bne.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00f      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0be      	beq.n	800394a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039e2:	e033      	b.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f901 	bl	8003bf0 <I2C_IsErrorOccurred>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e031      	b.n	8003a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d025      	beq.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a00:	f7fd fee8 	bl	80017d4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11a      	bne.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d013      	beq.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e007      	b.n	8003a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d1c4      	bne.n	80039e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a70:	e02f      	b.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f8ba 	bl	8003bf0 <I2C_IsErrorOccurred>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e02d      	b.n	8003ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fd fea5 	bl	80017d4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11a      	bne.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d013      	beq.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e007      	b.n	8003ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d1c8      	bne.n	8003a72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003af8:	e06b      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f876 	bl	8003bf0 <I2C_IsErrorOccurred>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e069      	b.n	8003be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d138      	bne.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d105      	bne.n	8003b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e055      	b.n	8003be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d107      	bne.n	8003b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2210      	movs	r2, #16
 8003b4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
 8003b52:	e002      	b.n	8003b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003b6e:	400b      	ands	r3, r1
 8003b70:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e029      	b.n	8003be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fd fe21 	bl	80017d4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d116      	bne.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d00f      	beq.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e007      	b.n	8003be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d18c      	bne.n	8003afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	fe00e800 	.word	0xfe00e800

08003bf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d068      	beq.n	8003cee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2210      	movs	r2, #16
 8003c22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c24:	e049      	b.n	8003cba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d045      	beq.n	8003cba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fd fdd1 	bl	80017d4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <I2C_IsErrorOccurred+0x54>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d13a      	bne.n	8003cba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d121      	bne.n	8003cac <I2C_IsErrorOccurred+0xbc>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c6e:	d01d      	beq.n	8003cac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d01a      	beq.n	8003cac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c86:	f7fd fda5 	bl	80017d4 <HAL_GetTick>
 8003c8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c8c:	e00e      	b.n	8003cac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c8e:	f7fd fda1 	bl	80017d4 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b19      	cmp	r3, #25
 8003c9a:	d907      	bls.n	8003cac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f043 0320 	orr.w	r3, r3, #32
 8003ca2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003caa:	e006      	b.n	8003cba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d1e9      	bne.n	8003c8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d003      	beq.n	8003cd0 <I2C_IsErrorOccurred+0xe0>
 8003cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0aa      	beq.n	8003c26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f043 0308 	orr.w	r3, r3, #8
 8003d28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01c      	beq.n	8003d9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fdc3 	bl	80038f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <I2C_IsErrorOccurred+0x1bc>)
 8003d76:	400b      	ands	r3, r1
 8003d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3728      	adds	r7, #40	; 0x28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	fe00e800 	.word	0xfe00e800

08003db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dc8:	7a7b      	ldrb	r3, [r7, #9]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	0d5b      	lsrs	r3, r3, #21
 8003dea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <I2C_TransferConfig+0x60>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	43db      	mvns	r3, r3
 8003df4:	ea02 0103 	and.w	r1, r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	03ff63ff 	.word	0x03ff63ff

08003e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d138      	bne.n	8003e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e032      	b.n	8003e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d139      	bne.n	8003f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e033      	b.n	8003f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2224      	movs	r2, #36	; 0x24
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_ICACHE_Enable+0x1c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_ICACHE_Enable+0x1c>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40030400 	.word	0x40030400

08003f64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f66:	b08f      	sub	sp, #60	; 0x3c
 8003f68:	af0a      	add	r7, sp, #40	; 0x28
 8003f6a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0cd      	b.n	8004112 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fa54 	bl	8001438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2203      	movs	r2, #3
 8003f94:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f006 ffce 	bl	800af3e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	e03e      	b.n	8004026 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	333d      	adds	r3, #61	; 0x3d
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	440b      	add	r3, r1
 8003fca:	333c      	adds	r3, #60	; 0x3c
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	333f      	adds	r3, #63	; 0x3f
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334c      	adds	r3, #76	; 0x4c
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	440b      	add	r3, r1
 8004006:	3350      	adds	r3, #80	; 0x50
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	440b      	add	r3, r1
 800401a:	3354      	adds	r3, #84	; 0x54
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	3301      	adds	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3bb      	bcc.n	8003fa8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	e044      	b.n	80040c0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	440b      	add	r3, r1
 8004070:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	440b      	add	r3, r1
 8004086:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	3301      	adds	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3b5      	bcc.n	8004036 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	687e      	ldr	r6, [r7, #4]
 80040d2:	466d      	mov	r5, sp
 80040d4:	f106 0410 	add.w	r4, r6, #16
 80040d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80040e8:	1d33      	adds	r3, r6, #4
 80040ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ec:	6838      	ldr	r0, [r7, #0]
 80040ee:	f006 ff5e 	bl	800afae <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b01      	cmp	r3, #1
 8004108:	d102      	bne.n	8004110 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f805 	bl	800411a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800411a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	f043 0202 	orr.w	r2, r3, #2
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f000 bc28 	b.w	80049c4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004174:	4b94      	ldr	r3, [pc, #592]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f003 0318 	and.w	r3, r3, #24
 800417c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800417e:	4b92      	ldr	r3, [pc, #584]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05b      	beq.n	800424c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b08      	cmp	r3, #8
 8004198:	d005      	beq.n	80041a6 <HAL_RCC_OscConfig+0x46>
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b18      	cmp	r3, #24
 800419e:	d114      	bne.n	80041ca <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d111      	bne.n	80041ca <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f000 bc08 	b.w	80049c4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80041b4:	4b84      	ldr	r3, [pc, #528]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	4981      	ldr	r1, [pc, #516]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80041c8:	e040      	b.n	800424c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d023      	beq.n	800421a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041d2:	4b7d      	ldr	r3, [pc, #500]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7c      	ldr	r2, [pc, #496]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fd faf9 	bl	80017d4 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80041e6:	f7fd faf5 	bl	80017d4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e3e5      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041f8:	4b73      	ldr	r3, [pc, #460]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004204:	4b70      	ldr	r3, [pc, #448]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	496d      	ldr	r1, [pc, #436]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004214:	4313      	orrs	r3, r2
 8004216:	618b      	str	r3, [r1, #24]
 8004218:	e018      	b.n	800424c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800421a:	4b6b      	ldr	r3, [pc, #428]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a6a      	ldr	r2, [pc, #424]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fd fad5 	bl	80017d4 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800422e:	f7fd fad1 	bl	80017d4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e3c1      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004240:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a0 	beq.w	800439a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b10      	cmp	r3, #16
 800425e:	d005      	beq.n	800426c <HAL_RCC_OscConfig+0x10c>
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b18      	cmp	r3, #24
 8004264:	d109      	bne.n	800427a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 8092 	bne.w	800439a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e3a4      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x132>
 8004284:	4b50      	ldr	r3, [pc, #320]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a4f      	ldr	r2, [pc, #316]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e058      	b.n	8004344 <HAL_RCC_OscConfig+0x1e4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d112      	bne.n	80042c0 <HAL_RCC_OscConfig+0x160>
 800429a:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a4a      	ldr	r2, [pc, #296]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a47      	ldr	r2, [pc, #284]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a44      	ldr	r2, [pc, #272]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e041      	b.n	8004344 <HAL_RCC_OscConfig+0x1e4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c8:	d112      	bne.n	80042f0 <HAL_RCC_OscConfig+0x190>
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a3e      	ldr	r2, [pc, #248]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b3c      	ldr	r3, [pc, #240]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3b      	ldr	r2, [pc, #236]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a38      	ldr	r2, [pc, #224]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e029      	b.n	8004344 <HAL_RCC_OscConfig+0x1e4>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80042f8:	d112      	bne.n	8004320 <HAL_RCC_OscConfig+0x1c0>
 80042fa:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a32      	ldr	r2, [pc, #200]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2f      	ldr	r2, [pc, #188]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 800430c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e011      	b.n	8004344 <HAL_RCC_OscConfig+0x1e4>
 8004320:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a28      	ldr	r2, [pc, #160]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 800433e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fa42 	bl	80017d4 <HAL_GetTick>
 8004350:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004354:	f7fd fa3e 	bl	80017d4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e32e      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x1f4>
 8004372:	e012      	b.n	800439a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd fa2e 	bl	80017d4 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800437c:	f7fd fa2a 	bl	80017d4 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e31a      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <HAL_RCC_OscConfig+0x268>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 809a 	beq.w	80044dc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_RCC_OscConfig+0x25a>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b18      	cmp	r3, #24
 80043b2:	d149      	bne.n	8004448 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d146      	bne.n	8004448 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d104      	bne.n	80043cc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e2fe      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
 80043c6:	bf00      	nop
 80043c8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11c      	bne.n	800440c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80043d2:	4b9a      	ldr	r3, [pc, #616]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0218 	and.w	r2, r3, #24
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d014      	beq.n	800440c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80043e2:	4b96      	ldr	r3, [pc, #600]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 0218 	bic.w	r2, r3, #24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	4993      	ldr	r1, [pc, #588]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80043f4:	f000 fdd0 	bl	8004f98 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043f8:	4b91      	ldr	r3, [pc, #580]	; (8004640 <HAL_RCC_OscConfig+0x4e0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fd f99f 	bl	8001740 <HAL_InitTick>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e2db      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd f9e2 	bl	80017d4 <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004414:	f7fd f9de 	bl	80017d4 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e2ce      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004426:	4b85      	ldr	r3, [pc, #532]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004432:	4b82      	ldr	r3, [pc, #520]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	497e      	ldr	r1, [pc, #504]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004446:	e049      	b.n	80044dc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02c      	beq.n	80044aa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004450:	4b7a      	ldr	r3, [pc, #488]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 0218 	bic.w	r2, r3, #24
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	4977      	ldr	r1, [pc, #476]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004462:	4b76      	ldr	r3, [pc, #472]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a75      	ldr	r2, [pc, #468]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446e:	f7fd f9b1 	bl	80017d4 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004476:	f7fd f9ad 	bl	80017d4 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e29d      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004488:	4b6c      	ldr	r3, [pc, #432]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004494:	4b69      	ldr	r3, [pc, #420]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	4966      	ldr	r1, [pc, #408]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	610b      	str	r3, [r1, #16]
 80044a8:	e018      	b.n	80044dc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044aa:	4b64      	ldr	r3, [pc, #400]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a63      	ldr	r2, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fd f98d 	bl	80017d4 <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80044be:	f7fd f989 	bl	80017d4 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e279      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d0:	4b5a      	ldr	r3, [pc, #360]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f0      	bne.n	80044be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d03c      	beq.n	8004562 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01c      	beq.n	800452a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f0:	4b52      	ldr	r3, [pc, #328]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80044f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044f6:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80044f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fd f968 	bl	80017d4 <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004508:	f7fd f964 	bl	80017d4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e254      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800451a:	4b48      	ldr	r3, [pc, #288]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 800451c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ef      	beq.n	8004508 <HAL_RCC_OscConfig+0x3a8>
 8004528:	e01b      	b.n	8004562 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800452a:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 800452c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004530:	4a42      	ldr	r2, [pc, #264]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004536:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fd f94b 	bl	80017d4 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004542:	f7fd f947 	bl	80017d4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e237      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800455a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ef      	bne.n	8004542 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80d2 	beq.w	8004714 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004570:	4b34      	ldr	r3, [pc, #208]	; (8004644 <HAL_RCC_OscConfig+0x4e4>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d118      	bne.n	80045ae <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <HAL_RCC_OscConfig+0x4e4>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	4a30      	ldr	r2, [pc, #192]	; (8004644 <HAL_RCC_OscConfig+0x4e4>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004588:	f7fd f924 	bl	80017d4 <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004590:	f7fd f920 	bl	80017d4 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e210      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_RCC_OscConfig+0x4e4>)
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d108      	bne.n	80045c8 <HAL_RCC_OscConfig+0x468>
 80045b6:	4b21      	ldr	r3, [pc, #132]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045bc:	4a1f      	ldr	r2, [pc, #124]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045c6:	e074      	b.n	80046b2 <HAL_RCC_OscConfig+0x552>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d118      	bne.n	8004602 <HAL_RCC_OscConfig+0x4a2>
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d6:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045e0:	4b16      	ldr	r3, [pc, #88]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045e6:	4a15      	ldr	r2, [pc, #84]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045f6:	4a11      	ldr	r2, [pc, #68]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004600:	e057      	b.n	80046b2 <HAL_RCC_OscConfig+0x552>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b05      	cmp	r3, #5
 8004608:	d11e      	bne.n	8004648 <HAL_RCC_OscConfig+0x4e8>
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 800460c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004610:	4a0a      	ldr	r2, [pc, #40]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 800461c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004620:	4a06      	ldr	r2, [pc, #24]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004626:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 800462c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004630:	4a02      	ldr	r2, [pc, #8]	; (800463c <HAL_RCC_OscConfig+0x4dc>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x552>
 800463c:	44020c00 	.word	0x44020c00
 8004640:	20000004 	.word	0x20000004
 8004644:	44020800 	.word	0x44020800
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b85      	cmp	r3, #133	; 0x85
 800464e:	d118      	bne.n	8004682 <HAL_RCC_OscConfig+0x522>
 8004650:	4ba2      	ldr	r3, [pc, #648]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004656:	4aa1      	ldr	r2, [pc, #644]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004660:	4b9e      	ldr	r3, [pc, #632]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004666:	4a9d      	ldr	r2, [pc, #628]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004670:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004676:	4a99      	ldr	r2, [pc, #612]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004680:	e017      	b.n	80046b2 <HAL_RCC_OscConfig+0x552>
 8004682:	4b96      	ldr	r3, [pc, #600]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004688:	4a94      	ldr	r2, [pc, #592]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004692:	4b92      	ldr	r3, [pc, #584]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004698:	4a90      	ldr	r2, [pc, #576]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800469a:	f023 0304 	bic.w	r3, r3, #4
 800469e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046a2:	4b8e      	ldr	r3, [pc, #568]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80046a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a8:	4a8c      	ldr	r2, [pc, #560]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80046aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fd f88b 	bl	80017d4 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fd f887 	bl	80017d4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e175      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d8:	4b80      	ldr	r3, [pc, #512]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ed      	beq.n	80046c2 <HAL_RCC_OscConfig+0x562>
 80046e6:	e015      	b.n	8004714 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd f874 	bl	80017d4 <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd f870 	bl	80017d4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e15e      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004706:	4b75      	ldr	r3, [pc, #468]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1ed      	bne.n	80046f0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d036      	beq.n	800478e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d019      	beq.n	800475c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004728:	4b6c      	ldr	r3, [pc, #432]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6b      	ldr	r2, [pc, #428]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800472e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fd f84e 	bl	80017d4 <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800473c:	f7fd f84a 	bl	80017d4 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e13a      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x5dc>
 800475a:	e018      	b.n	800478e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800475c:	4b5f      	ldr	r3, [pc, #380]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a5e      	ldr	r2, [pc, #376]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fd f834 	bl	80017d4 <HAL_GetTick>
 800476c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004770:	f7fd f830 	bl	80017d4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e120      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004782:	4b56      	ldr	r3, [pc, #344]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 8115 	beq.w	80049c2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b18      	cmp	r3, #24
 800479c:	f000 80af 	beq.w	80048fe <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	f040 8086 	bne.w	80048b6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a4b      	ldr	r2, [pc, #300]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80047b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd f80d 	bl	80017d4 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80047be:	f7fd f809 	bl	80017d4 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0f9      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047d0:	4b42      	ldr	r3, [pc, #264]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f0      	bne.n	80047be <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80047dc:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047e4:	f023 0303 	bic.w	r3, r3, #3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047f0:	0212      	lsls	r2, r2, #8
 80047f2:	430a      	orrs	r2, r1
 80047f4:	4939      	ldr	r1, [pc, #228]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	628b      	str	r3, [r1, #40]	; 0x28
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	3b01      	subs	r3, #1
 8004800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	3b01      	subs	r3, #1
 800480a:	025b      	lsls	r3, r3, #9
 800480c:	b29b      	uxth	r3, r3
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	3b01      	subs	r3, #1
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	3b01      	subs	r3, #1
 8004824:	061b      	lsls	r3, r3, #24
 8004826:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800482a:	492c      	ldr	r1, [pc, #176]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004836:	f023 0310 	bic.w	r3, r3, #16
 800483a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004840:	4a26      	ldr	r2, [pc, #152]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004846:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	4a24      	ldr	r2, [pc, #144]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800484c:	f043 0310 	orr.w	r3, r3, #16
 8004850:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f023 020c 	bic.w	r2, r3, #12
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	491f      	ldr	r1, [pc, #124]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	f023 0220 	bic.w	r2, r3, #32
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	491a      	ldr	r1, [pc, #104]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004876:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 800487c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004880:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 8004888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fc ffa1 	bl	80017d4 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004896:	f7fc ff9d 	bl	80017d4 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e08d      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x736>
 80048b4:	e085      	b.n	80049c2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a08      	ldr	r2, [pc, #32]	; (80048dc <HAL_RCC_OscConfig+0x77c>)
 80048bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fc ff87 	bl	80017d4 <HAL_GetTick>
 80048c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048c8:	e00a      	b.n	80048e0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048ca:	f7fc ff83 	bl	80017d4 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d903      	bls.n	80048e0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e073      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
 80048dc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048e0:	4b3a      	ldr	r3, [pc, #232]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ee      	bne.n	80048ca <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80048ec:	4b37      	ldr	r3, [pc, #220]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	4a36      	ldr	r2, [pc, #216]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 80048f2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80048f6:	f023 0303 	bic.w	r3, r3, #3
 80048fa:	6293      	str	r3, [r2, #40]	; 0x28
 80048fc:	e061      	b.n	80049c2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80048fe:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004904:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 8004906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004908:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	2b01      	cmp	r3, #1
 8004910:	d031      	beq.n	8004976 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d12a      	bne.n	8004976 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d122      	bne.n	8004976 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d11a      	bne.n	8004976 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	0a5b      	lsrs	r3, r3, #9
 8004944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d111      	bne.n	8004976 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d108      	bne.n	8004976 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	0e1b      	lsrs	r3, r3, #24
 8004968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e024      	b.n	80049c4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800497a:	4b14      	ldr	r3, [pc, #80]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	08db      	lsrs	r3, r3, #3
 8004980:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004988:	429a      	cmp	r2, r3
 800498a:	d01a      	beq.n	80049c2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fc ff1c 	bl	80017d4 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800499e:	bf00      	nop
 80049a0:	f7fc ff18 	bl	80017d4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d0f9      	beq.n	80049a0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b0:	4a06      	ldr	r2, [pc, #24]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_RCC_OscConfig+0x86c>)
 80049bc:	f043 0310 	orr.w	r3, r3, #16
 80049c0:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3720      	adds	r7, #32
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	44020c00 	.word	0x44020c00

080049d0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e19e      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b83      	ldr	r3, [pc, #524]	; (8004bf4 <HAL_RCC_ClockConfig+0x224>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d910      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b80      	ldr	r3, [pc, #512]	; (8004bf4 <HAL_RCC_ClockConfig+0x224>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 020f 	bic.w	r2, r3, #15
 80049fa:	497e      	ldr	r1, [pc, #504]	; (8004bf4 <HAL_RCC_ClockConfig+0x224>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b7c      	ldr	r3, [pc, #496]	; (8004bf4 <HAL_RCC_ClockConfig+0x224>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e186      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d012      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	4b74      	ldr	r3, [pc, #464]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d909      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004a32:	4b71      	ldr	r3, [pc, #452]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	496d      	ldr	r1, [pc, #436]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d012      	beq.n	8004a78 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	4b68      	ldr	r3, [pc, #416]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d909      	bls.n	8004a78 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004a64:	4b64      	ldr	r3, [pc, #400]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	4961      	ldr	r1, [pc, #388]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d010      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	4b5b      	ldr	r3, [pc, #364]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d908      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004a94:	4b58      	ldr	r3, [pc, #352]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4955      	ldr	r1, [pc, #340]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d908      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004ac2:	4b4d      	ldr	r3, [pc, #308]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 020f 	bic.w	r2, r3, #15
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	494a      	ldr	r1, [pc, #296]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8093 	beq.w	8004c08 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004aea:	4b43      	ldr	r3, [pc, #268]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d121      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e113      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d115      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e107      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004b1a:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0fb      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2a:	4b33      	ldr	r3, [pc, #204]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0f3      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004b3a:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	492c      	ldr	r1, [pc, #176]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fc fe42 	bl	80017d4 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d112      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b5a:	e00a      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5c:	f7fc fe3a 	bl	80017d4 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e0d7      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b72:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f003 0318 	and.w	r3, r3, #24
 8004b7a:	2b18      	cmp	r3, #24
 8004b7c:	d1ee      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x18c>
 8004b7e:	e043      	b.n	8004c08 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d112      	bne.n	8004bae <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8a:	f7fc fe23 	bl	80017d4 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0c0      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba0:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 0318 	and.w	r3, r3, #24
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d1ee      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1ba>
 8004bac:	e02c      	b.n	8004c08 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d122      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7fc fe0c 	bl	80017d4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0a9      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <HAL_RCC_ClockConfig+0x228>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0318 	and.w	r3, r3, #24
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d1ee      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x1e8>
 8004bda:	e015      	b.n	8004c08 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f7fc fdfa 	bl	80017d4 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d906      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e097      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
 8004bf2:	bf00      	nop
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f003 0318 	and.w	r3, r3, #24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e9      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d208      	bcs.n	8004c36 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004c24:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f023 020f 	bic.w	r2, r3, #15
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	493e      	ldr	r1, [pc, #248]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c36:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <HAL_RCC_ClockConfig+0x360>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d210      	bcs.n	8004c66 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c44:	4b3a      	ldr	r3, [pc, #232]	; (8004d30 <HAL_RCC_ClockConfig+0x360>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 020f 	bic.w	r2, r3, #15
 8004c4c:	4938      	ldr	r1, [pc, #224]	; (8004d30 <HAL_RCC_ClockConfig+0x360>)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c54:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <HAL_RCC_ClockConfig+0x360>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d001      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e05d      	b.n	8004d22 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d208      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4927      	ldr	r1, [pc, #156]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d209      	bcs.n	8004cc6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	491a      	ldr	r1, [pc, #104]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d209      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	490e      	ldr	r1, [pc, #56]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cf8:	f000 f822 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_ClockConfig+0x35c>)
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	490b      	ldr	r1, [pc, #44]	; (8004d34 <HAL_RCC_ClockConfig+0x364>)
 8004d08:	5ccb      	ldrb	r3, [r1, r3]
 8004d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x368>)
 8004d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x36c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fc fd12 	bl	8001740 <HAL_InitTick>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004d20:	7afb      	ldrb	r3, [r7, #11]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	44020c00 	.word	0x44020c00
 8004d30:	40022000 	.word	0x40022000
 8004d34:	0800b064 	.word	0x0800b064
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	20000004 	.word	0x20000004

08004d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	; 0x24
 8004d44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d46:	4b8c      	ldr	r3, [pc, #560]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0318 	and.w	r3, r3, #24
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d102      	bne.n	8004d58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d52:	4b8a      	ldr	r3, [pc, #552]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e107      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d58:	4b87      	ldr	r3, [pc, #540]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f003 0318 	and.w	r3, r3, #24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d112      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d64:	4b84      	ldr	r3, [pc, #528]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d70:	4b81      	ldr	r3, [pc, #516]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	4a81      	ldr	r2, [pc, #516]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e0f1      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004d84:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e0ee      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d8a:	4b7b      	ldr	r3, [pc, #492]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 0318 	and.w	r3, r3, #24
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d102      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d96:	4b7b      	ldr	r3, [pc, #492]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x244>)
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e0e5      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d9c:	4b76      	ldr	r3, [pc, #472]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f003 0318 	and.w	r3, r3, #24
 8004da4:	2b18      	cmp	r3, #24
 8004da6:	f040 80dd 	bne.w	8004f64 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004daa:	4b73      	ldr	r3, [pc, #460]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004db4:	4b70      	ldr	r3, [pc, #448]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004dc0:	4b6d      	ldr	r3, [pc, #436]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004dcc:	4b6a      	ldr	r3, [pc, #424]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004dd0:	08db      	lsrs	r3, r3, #3
 8004dd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80b7 	beq.w	8004f5e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0xbe>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d056      	beq.n	8004eaa <HAL_RCC_GetSysClockFreq+0x16a>
 8004dfc:	e077      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004dfe:	4b5e      	ldr	r3, [pc, #376]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d02d      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	4a5a      	ldr	r2, [pc, #360]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x240>)
 8004e16:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e44:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e48:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004f88 <HAL_RCC_GetSysClockFreq+0x248>
 8004e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e60:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004e64:	e065      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e70:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004f8c <HAL_RCC_GetSysClockFreq+0x24c>
 8004e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e78:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e88:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e8c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004f88 <HAL_RCC_GetSysClockFreq+0x248>
 8004e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ea8:	e043      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004f90 <HAL_RCC_GetSysClockFreq+0x250>
 8004eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ecc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ed0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004f88 <HAL_RCC_GetSysClockFreq+0x248>
 8004ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004eec:	e021      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f94 <HAL_RCC_GetSysClockFreq+0x254>
 8004efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f10:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f14:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004f88 <HAL_RCC_GetSysClockFreq+0x248>
 8004f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004f30:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	0a5b      	lsrs	r3, r3, #9
 8004f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f4a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f56:	ee17 3a90 	vmov	r3, s15
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	e004      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e001      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f66:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004f68:	69fb      	ldr	r3, [r7, #28]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3724      	adds	r7, #36	; 0x24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	44020c00 	.word	0x44020c00
 8004f7c:	003d0900 	.word	0x003d0900
 8004f80:	03d09000 	.word	0x03d09000
 8004f84:	007a1200 	.word	0x007a1200
 8004f88:	46000000 	.word	0x46000000
 8004f8c:	4c742400 	.word	0x4c742400
 8004f90:	4af42400 	.word	0x4af42400
 8004f94:	4a742400 	.word	0x4a742400

08004f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f9c:	f7ff fed0 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004fa6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004faa:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004fac:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004fae:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	4a05      	ldr	r2, [pc, #20]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x34>)
 8004fb8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004fba:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x34>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	44020c00 	.word	0x44020c00
 8004fc8:	0800b064 	.word	0x0800b064
 8004fcc:	20000000 	.word	0x20000000

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004fd4:	f7ff ffe0 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	44020c00 	.word	0x44020c00
 8004ff8:	0800b074 	.word	0x0800b074

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005000:	f7ff ffca 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4904      	ldr	r1, [pc, #16]	; (8005024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	44020c00 	.word	0x44020c00
 8005024:	0800b074 	.word	0x0800b074

08005028 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800502c:	f7ff ffb4 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	0b1b      	lsrs	r3, r3, #12
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4904      	ldr	r1, [pc, #16]	; (8005050 <HAL_RCC_GetPCLK3Freq+0x28>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	bd80      	pop	{r7, pc}
 800504c:	44020c00 	.word	0x44020c00
 8005050:	0800b074 	.word	0x0800b074

08005054 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005058:	b0d8      	sub	sp, #352	; 0x160
 800505a:	af00      	add	r7, sp, #0
 800505c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005060:	2300      	movs	r3, #0
 8005062:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005066:	2300      	movs	r3, #0
 8005068:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800506c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8005078:	2500      	movs	r5, #0
 800507a:	ea54 0305 	orrs.w	r3, r4, r5
 800507e:	d00b      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005080:	4bcd      	ldr	r3, [pc, #820]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005086:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800508a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	4ac9      	ldr	r2, [pc, #804]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005092:	430b      	orrs	r3, r1
 8005094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005098:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f002 0801 	and.w	r8, r2, #1
 80050a4:	f04f 0900 	mov.w	r9, #0
 80050a8:	ea58 0309 	orrs.w	r3, r8, r9
 80050ac:	d042      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80050ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d823      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	08005109 	.word	0x08005109
 80050c4:	080050d9 	.word	0x080050d9
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	08005109 	.word	0x08005109
 80050d0:	08005109 	.word	0x08005109
 80050d4:	08005109 	.word	0x08005109
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050dc:	3308      	adds	r3, #8
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 feda 	bl	8009e98 <RCCEx_PLL2_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80050ea:	e00e      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050f0:	3330      	adds	r3, #48	; 0x30
 80050f2:	4618      	mov	r0, r3
 80050f4:	f004 ff68 	bl	8009fc8 <RCCEx_PLL3_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80050fe:	e004      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005106:	e000      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005112:	4ba9      	ldr	r3, [pc, #676]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005114:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005118:	f023 0107 	bic.w	r1, r3, #7
 800511c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005122:	4aa5      	ldr	r2, [pc, #660]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005124:	430b      	orrs	r3, r1
 8005126:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005130:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f002 0a02 	and.w	sl, r2, #2
 8005140:	f04f 0b00 	mov.w	fp, #0
 8005144:	ea5a 030b 	orrs.w	r3, sl, fp
 8005148:	f000 8088 	beq.w	800525c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800514c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	2b28      	cmp	r3, #40	; 0x28
 8005154:	d868      	bhi.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005231 	.word	0x08005231
 8005160:	08005229 	.word	0x08005229
 8005164:	08005229 	.word	0x08005229
 8005168:	08005229 	.word	0x08005229
 800516c:	08005229 	.word	0x08005229
 8005170:	08005229 	.word	0x08005229
 8005174:	08005229 	.word	0x08005229
 8005178:	08005229 	.word	0x08005229
 800517c:	08005201 	.word	0x08005201
 8005180:	08005229 	.word	0x08005229
 8005184:	08005229 	.word	0x08005229
 8005188:	08005229 	.word	0x08005229
 800518c:	08005229 	.word	0x08005229
 8005190:	08005229 	.word	0x08005229
 8005194:	08005229 	.word	0x08005229
 8005198:	08005229 	.word	0x08005229
 800519c:	08005215 	.word	0x08005215
 80051a0:	08005229 	.word	0x08005229
 80051a4:	08005229 	.word	0x08005229
 80051a8:	08005229 	.word	0x08005229
 80051ac:	08005229 	.word	0x08005229
 80051b0:	08005229 	.word	0x08005229
 80051b4:	08005229 	.word	0x08005229
 80051b8:	08005229 	.word	0x08005229
 80051bc:	08005231 	.word	0x08005231
 80051c0:	08005229 	.word	0x08005229
 80051c4:	08005229 	.word	0x08005229
 80051c8:	08005229 	.word	0x08005229
 80051cc:	08005229 	.word	0x08005229
 80051d0:	08005229 	.word	0x08005229
 80051d4:	08005229 	.word	0x08005229
 80051d8:	08005229 	.word	0x08005229
 80051dc:	08005231 	.word	0x08005231
 80051e0:	08005229 	.word	0x08005229
 80051e4:	08005229 	.word	0x08005229
 80051e8:	08005229 	.word	0x08005229
 80051ec:	08005229 	.word	0x08005229
 80051f0:	08005229 	.word	0x08005229
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005229 	.word	0x08005229
 80051fc:	08005231 	.word	0x08005231
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005204:	3308      	adds	r3, #8
 8005206:	4618      	mov	r0, r3
 8005208:	f004 fe46 	bl	8009e98 <RCCEx_PLL2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005212:	e00e      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005214:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005218:	3330      	adds	r3, #48	; 0x30
 800521a:	4618      	mov	r0, r3
 800521c:	f004 fed4 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005226:	e004      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005232:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10c      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800523a:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800523c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005240:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524a:	4a5b      	ldr	r2, [pc, #364]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800524c:	430b      	orrs	r3, r1
 800524e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005252:	e003      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005254:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005258:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f002 0304 	and.w	r3, r2, #4
 8005268:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005272:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8005276:	460b      	mov	r3, r1
 8005278:	4313      	orrs	r3, r2
 800527a:	d04e      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800527c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005282:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005286:	d02c      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005288:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800528c:	d825      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x286>
 800528e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005292:	d028      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005298:	d81f      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x286>
 800529a:	2bc0      	cmp	r3, #192	; 0xc0
 800529c:	d025      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x296>
 800529e:	2bc0      	cmp	r3, #192	; 0xc0
 80052a0:	d81b      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80052a2:	2b80      	cmp	r3, #128	; 0x80
 80052a4:	d00f      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80052a6:	2b80      	cmp	r3, #128	; 0x80
 80052a8:	d817      	bhi.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01f      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	d113      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052b6:	3308      	adds	r3, #8
 80052b8:	4618      	mov	r0, r3
 80052ba:	f004 fded 	bl	8009e98 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80052c4:	e014      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052ca:	3330      	adds	r3, #48	; 0x30
 80052cc:	4618      	mov	r0, r3
 80052ce:	f004 fe7b 	bl	8009fc8 <RCCEx_PLL3_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052e0:	e006      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052e2:	bf00      	nop
 80052e4:	e004      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052e6:	bf00      	nop
 80052e8:	e002      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052ea:	bf00      	nop
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80052ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10c      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80052f8:	4b2f      	ldr	r3, [pc, #188]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80052fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052fe:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005308:	4a2b      	ldr	r2, [pc, #172]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005316:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800531a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f002 0308 	and.w	r3, r2, #8
 8005326:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005330:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8005334:	460b      	mov	r3, r1
 8005336:	4313      	orrs	r3, r2
 8005338:	d056      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800533a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005344:	d031      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005346:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800534a:	d82a      	bhi.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800534c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005350:	d02d      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005356:	d824      	bhi.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005358:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800535c:	d029      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800535e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005362:	d81e      	bhi.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d011      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536e:	d818      	bhi.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005378:	d113      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800537a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800537e:	3308      	adds	r3, #8
 8005380:	4618      	mov	r0, r3
 8005382:	f004 fd89 	bl	8009e98 <RCCEx_PLL2_Config>
 8005386:	4603      	mov	r3, r0
 8005388:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800538c:	e017      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800538e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005392:	3330      	adds	r3, #48	; 0x30
 8005394:	4618      	mov	r0, r3
 8005396:	f004 fe17 	bl	8009fc8 <RCCEx_PLL3_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80053a0:	e00d      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053a8:	e009      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80053aa:	bf00      	nop
 80053ac:	e007      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80053ae:	bf00      	nop
 80053b0:	e005      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80053b2:	bf00      	nop
 80053b4:	e003      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80053b6:	bf00      	nop
 80053b8:	44020c00 	.word	0x44020c00
        break;
 80053bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80053c6:	4bbb      	ldr	r3, [pc, #748]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80053c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80053cc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80053d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d6:	4ab7      	ldr	r2, [pc, #732]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80053de:	e003      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053e4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f002 0310 	and.w	r3, r2, #16
 80053f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80053fe:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d053      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005408:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005412:	d031      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005414:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005418:	d82a      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800541a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800541e:	d02d      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005424:	d824      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800542a:	d029      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800542c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005430:	d81e      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005436:	d011      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543c:	d818      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d020      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005446:	d113      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800544c:	3308      	adds	r3, #8
 800544e:	4618      	mov	r0, r3
 8005450:	f004 fd22 	bl	8009e98 <RCCEx_PLL2_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800545a:	e014      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800545c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005460:	3330      	adds	r3, #48	; 0x30
 8005462:	4618      	mov	r0, r3
 8005464:	f004 fdb0 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800546e:	e00a      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005476:	e006      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005478:	bf00      	nop
 800547a:	e004      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800547c:	bf00      	nop
 800547e:	e002      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005486:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10c      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800548e:	4b89      	ldr	r3, [pc, #548]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005494:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005498:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	4a85      	ldr	r2, [pc, #532]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80054a0:	430b      	orrs	r3, r1
 80054a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054a6:	e003      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f002 0320 	and.w	r3, r2, #32
 80054bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80054c6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80054ca:	460b      	mov	r3, r1
 80054cc:	4313      	orrs	r3, r2
 80054ce:	d053      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80054d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80054da:	d031      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80054dc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80054e0:	d82a      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80054e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e6:	d02d      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80054e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ec:	d824      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80054ee:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80054f2:	d029      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80054f4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80054f8:	d81e      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80054fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fe:	d011      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005504:	d818      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d020      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800550a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550e:	d113      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005514:	3308      	adds	r3, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f004 fcbe 	bl	8009e98 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005522:	e014      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005524:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005528:	3330      	adds	r3, #48	; 0x30
 800552a:	4618      	mov	r0, r3
 800552c:	f004 fd4c 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005536:	e00a      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800553e:	e006      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005540:	bf00      	nop
 8005542:	e004      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800554c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10c      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005556:	4b57      	ldr	r3, [pc, #348]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005558:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800555c:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8005560:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a53      	ldr	r2, [pc, #332]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005568:	430b      	orrs	r3, r1
 800556a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800556e:	e003      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005574:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005578:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005584:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800558e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d053      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005598:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800559c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80055a2:	d031      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80055a4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80055a8:	d82a      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80055aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ae:	d02d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80055b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b4:	d824      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80055b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055ba:	d029      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80055bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055c0:	d81e      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80055c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055c6:	d011      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x598>
 80055c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055cc:	d818      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d020      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80055d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055d6:	d113      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055dc:	3308      	adds	r3, #8
 80055de:	4618      	mov	r0, r3
 80055e0:	f004 fc5a 	bl	8009e98 <RCCEx_PLL2_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80055ea:	e014      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055f0:	3330      	adds	r3, #48	; 0x30
 80055f2:	4618      	mov	r0, r3
 80055f4:	f004 fce8 	bl	8009fc8 <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80055fe:	e00a      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005606:	e006      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005608:	bf00      	nop
 800560a:	e004      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800560c:	bf00      	nop
 800560e:	e002      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005610:	bf00      	nop
 8005612:	e000      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005616:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800561e:	4b25      	ldr	r3, [pc, #148]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005624:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8005628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005630:	430b      	orrs	r3, r1
 8005632:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005636:	e003      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800563c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800564c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005650:	2300      	movs	r3, #0
 8005652:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005656:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800565a:	460b      	mov	r3, r1
 800565c:	4313      	orrs	r3, r2
 800565e:	d055      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005666:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800566a:	d033      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800566c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005670:	d82c      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005676:	d02f      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800567c:	d826      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800567e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005682:	d02b      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005684:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005688:	d820      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568e:	d013      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005694:	d81a      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d022      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800569a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569e:	d115      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056a4:	3308      	adds	r3, #8
 80056a6:	4618      	mov	r0, r3
 80056a8:	f004 fbf6 	bl	8009e98 <RCCEx_PLL2_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80056b2:	e016      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80056b4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056bc:	3330      	adds	r3, #48	; 0x30
 80056be:	4618      	mov	r0, r3
 80056c0:	f004 fc82 	bl	8009fc8 <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80056ca:	e00a      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056d2:	e006      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80056d4:	bf00      	nop
 80056d6:	e004      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80056d8:	bf00      	nop
 80056da:	e002      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80056dc:	bf00      	nop
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80056e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80056ea:	4bbb      	ldr	r3, [pc, #748]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80056ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056f0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80056f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fa:	4ab7      	ldr	r2, [pc, #732]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005702:	e003      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005704:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005708:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800570c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005718:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800571c:	2300      	movs	r3, #0
 800571e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005722:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005726:	460b      	mov	r3, r1
 8005728:	4313      	orrs	r3, r2
 800572a:	d053      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800572c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005732:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005736:	d031      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005738:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800573c:	d82a      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800573e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005742:	d02d      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005748:	d824      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800574a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800574e:	d029      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005754:	d81e      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800575a:	d011      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800575c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005760:	d818      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d020      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005766:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800576a:	d113      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800576c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005770:	3308      	adds	r3, #8
 8005772:	4618      	mov	r0, r3
 8005774:	f004 fb90 	bl	8009e98 <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800577e:	e014      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005784:	3330      	adds	r3, #48	; 0x30
 8005786:	4618      	mov	r0, r3
 8005788:	f004 fc1e 	bl	8009fc8 <RCCEx_PLL3_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005792:	e00a      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800579a:	e006      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800579c:	bf00      	nop
 800579e:	e004      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80057a0:	bf00      	nop
 80057a2:	e002      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80057a4:	bf00      	nop
 80057a6:	e000      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80057a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80057b2:	4b89      	ldr	r3, [pc, #548]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057b8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80057bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c2:	4a85      	ldr	r2, [pc, #532]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80057ca:	e003      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80057d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80057e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057ea:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	d055      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80057f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057fc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8005800:	d031      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005802:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8005806:	d82a      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800580c:	d02d      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800580e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005812:	d824      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005814:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005818:	d029      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800581a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800581e:	d81e      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005824:	d011      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800582a:	d818      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005834:	d113      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800583a:	3308      	adds	r3, #8
 800583c:	4618      	mov	r0, r3
 800583e:	f004 fb2b 	bl	8009e98 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005848:	e014      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800584a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800584e:	3330      	adds	r3, #48	; 0x30
 8005850:	4618      	mov	r0, r3
 8005852:	f004 fbb9 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800585c:	e00a      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005864:	e006      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005866:	bf00      	nop
 8005868:	e004      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800586a:	bf00      	nop
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800586e:	bf00      	nop
 8005870:	e000      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005874:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10d      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800587c:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800587e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005882:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8005886:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800588a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588e:	4a52      	ldr	r2, [pc, #328]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005890:	430b      	orrs	r3, r1
 8005892:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005898:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800589c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80058a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80058ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058b6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d044      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80058c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d823      	bhi.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80058cc:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	0800591d 	.word	0x0800591d
 80058d8:	080058ed 	.word	0x080058ed
 80058dc:	08005901 	.word	0x08005901
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
 80058e8:	0800591d 	.word	0x0800591d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058f0:	3308      	adds	r3, #8
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 fad0 	bl	8009e98 <RCCEx_PLL2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80058fe:	e00e      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005900:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005904:	3330      	adds	r3, #48	; 0x30
 8005906:	4618      	mov	r0, r3
 8005908:	f004 fb5e 	bl	8009fc8 <RCCEx_PLL3_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005912:	e004      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800591c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10d      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005926:	4b2c      	ldr	r3, [pc, #176]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005928:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800592c:	f023 0107 	bic.w	r1, r3, #7
 8005930:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800593a:	430b      	orrs	r3, r1
 800593c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005940:	e003      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005946:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800594a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005956:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005960:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005964:	460b      	mov	r3, r1
 8005966:	4313      	orrs	r3, r2
 8005968:	d04f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800596a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	2b50      	cmp	r3, #80	; 0x50
 8005974:	d029      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005976:	2b50      	cmp	r3, #80	; 0x50
 8005978:	d823      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d027      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d81f      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005982:	2b30      	cmp	r3, #48	; 0x30
 8005984:	d025      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005986:	2b30      	cmp	r3, #48	; 0x30
 8005988:	d81b      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800598a:	2b20      	cmp	r3, #32
 800598c:	d00f      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800598e:	2b20      	cmp	r3, #32
 8005990:	d817      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d022      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005996:	2b10      	cmp	r3, #16
 8005998:	d113      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800599a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800599e:	3308      	adds	r3, #8
 80059a0:	4618      	mov	r0, r3
 80059a2:	f004 fa79 	bl	8009e98 <RCCEx_PLL2_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80059ac:	e017      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059b2:	3330      	adds	r3, #48	; 0x30
 80059b4:	4618      	mov	r0, r3
 80059b6:	f004 fb07 	bl	8009fc8 <RCCEx_PLL3_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80059c0:	e00d      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80059c8:	e009      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80059ca:	bf00      	nop
 80059cc:	e007      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80059ce:	bf00      	nop
 80059d0:	e005      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80059d2:	bf00      	nop
 80059d4:	e003      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80059d6:	bf00      	nop
 80059d8:	44020c00 	.word	0x44020c00
        break;
 80059dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80059e6:	4baf      	ldr	r3, [pc, #700]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80059ec:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80059f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f8:	4aaa      	ldr	r2, [pc, #680]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059fa:	430b      	orrs	r3, r1
 80059fc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005a00:	e003      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a06:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005a16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4313      	orrs	r3, r2
 8005a28:	d055      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005a36:	d031      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005a38:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005a3c:	d82a      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a42:	d02d      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a48:	d824      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a4e:	d029      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005a50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a54:	d81e      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a5a:	d011      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a60:	d818      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d020      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005a66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a6a:	d113      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a70:	3308      	adds	r3, #8
 8005a72:	4618      	mov	r0, r3
 8005a74:	f004 fa10 	bl	8009e98 <RCCEx_PLL2_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005a7e:	e014      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a84:	3330      	adds	r3, #48	; 0x30
 8005a86:	4618      	mov	r0, r3
 8005a88:	f004 fa9e 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005a92:	e00a      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a9a:	e006      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005a9c:	bf00      	nop
 8005a9e:	e004      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e002      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005aa4:	bf00      	nop
 8005aa6:	e000      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aaa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10d      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005ab2:	4b7c      	ldr	r3, [pc, #496]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ab8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac4:	4a77      	ldr	r2, [pc, #476]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005acc:	e003      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ad2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005aec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005af0:	460b      	mov	r3, r1
 8005af2:	4313      	orrs	r3, r2
 8005af4:	d03d      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005af6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b02:	d01b      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005b04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b08:	d814      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b0e:	d017      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b14:	d80e      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d014      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1e:	d109      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b24:	3330      	adds	r3, #48	; 0x30
 8005b26:	4618      	mov	r0, r3
 8005b28:	f004 fa4e 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005b32:	e008      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b3a:	e004      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005b3c:	bf00      	nop
 8005b3e:	e002      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10d      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005b4e:	4b55      	ldr	r3, [pc, #340]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b54:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	4a50      	ldr	r2, [pc, #320]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b62:	430b      	orrs	r3, r1
 8005b64:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005b68:	e003      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b6e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b82:	2300      	movs	r3, #0
 8005b84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	d03d      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005ba0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ba4:	d814      	bhi.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005ba6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005baa:	d017      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005bac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bb0:	d80e      	bhi.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d014      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bba:	d109      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bc0:	3330      	adds	r3, #48	; 0x30
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f004 fa00 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005bd6:	e004      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005bd8:	bf00      	nop
 8005bda:	e002      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005bdc:	bf00      	nop
 8005bde:	e000      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10d      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005bea:	4b2e      	ldr	r3, [pc, #184]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bf0:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bfc:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005c04:	e003      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c0a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c24:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	d040      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c3a:	d01b      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c40:	d814      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c46:	d017      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c4c:	d80e      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d014      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c56:	d109      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c5c:	3330      	adds	r3, #48	; 0x30
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f004 f9b2 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005c6a:	e008      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c72:	e004      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d110      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005c86:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c8c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c98:	4a02      	ldr	r2, [pc, #8]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005ca0:	e006      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005ca2:	bf00      	nop
 8005ca4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	2100      	movs	r1, #0
 8005cba:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	d03d      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cdc:	d01b      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005cde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ce2:	d814      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005ce4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ce8:	d017      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005cea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cee:	d80e      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d014      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cfe:	3330      	adds	r3, #48	; 0x30
 8005d00:	4618      	mov	r0, r3
 8005d02:	f004 f961 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005d0c:	e008      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d14:	e004      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10d      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005d28:	4bbe      	ldr	r3, [pc, #760]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d2e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d3a:	4aba      	ldr	r2, [pc, #744]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005d58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005d66:	460b      	mov	r3, r1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d035      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d78:	d015      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d7e:	d80e      	bhi.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d012      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d88:	d109      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d8e:	3330      	adds	r3, #48	; 0x30
 8005d90:	4618      	mov	r0, r3
 8005d92:	f004 f919 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005da4:	e002      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10d      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005db4:	4b9b      	ldr	r3, [pc, #620]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005db6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005dba:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8005dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dc6:	4a97      	ldr	r2, [pc, #604]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dd4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	2100      	movs	r1, #0
 8005de2:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005df8:	4b8a      	ldr	r3, [pc, #552]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	4a89      	ldr	r2, [pc, #548]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005dfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e02:	61d3      	str	r3, [r2, #28]
 8005e04:	4b87      	ldr	r3, [pc, #540]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e06:	69d9      	ldr	r1, [r3, #28]
 8005e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005e10:	4a84      	ldr	r2, [pc, #528]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e2c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e30:	460b      	mov	r3, r1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	d055      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e42:	d031      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005e44:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e48:	d82a      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d02d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e54:	d824      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5a:	d029      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e60:	d81e      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e66:	d011      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e6c:	d818      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d020      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e76:	d113      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f004 f80a 	bl	8009e98 <RCCEx_PLL2_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005e8a:	e014      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e90:	3330      	adds	r3, #48	; 0x30
 8005e92:	4618      	mov	r0, r3
 8005e94:	f004 f898 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ea6:	e006      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10d      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005ebe:	4b59      	ldr	r3, [pc, #356]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ec0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005ec4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ed0:	4a54      	ldr	r2, [pc, #336]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005ed8:	e003      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ede:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ef8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4313      	orrs	r3, r2
 8005f00:	d055      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005f0e:	d031      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005f10:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005f14:	d82a      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1a:	d02d      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f20:	d824      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f26:	d029      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f2c:	d81e      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f32:	d011      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f38:	d818      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f42:	d113      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f48:	3308      	adds	r3, #8
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f003 ffa4 	bl	8009e98 <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005f56:	e014      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f5c:	3330      	adds	r3, #48	; 0x30
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 f832 	bl	8009fc8 <RCCEx_PLL3_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f72:	e006      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f74:	bf00      	nop
 8005f76:	e004      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f78:	bf00      	nop
 8005f7a:	e002      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f7c:	bf00      	nop
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10d      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005f90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f9c:	4a21      	ldr	r2, [pc, #132]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005faa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d057      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fda:	d033      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe0:	d82c      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fe6:	d02f      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fec:	d826      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005fee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ff2:	d02b      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005ff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ff8:	d820      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ffe:	d013      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006004:	d81a      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d022      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800600a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600e:	d115      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006010:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006014:	3308      	adds	r3, #8
 8006016:	4618      	mov	r0, r3
 8006018:	f003 ff3e 	bl	8009e98 <RCCEx_PLL2_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006022:	e016      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006024:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800602c:	3330      	adds	r3, #48	; 0x30
 800602e:	4618      	mov	r0, r3
 8006030:	f003 ffca 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800603a:	e00a      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006042:	e006      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006044:	bf00      	nop
 8006046:	e004      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006048:	bf00      	nop
 800604a:	e002      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800604c:	bf00      	nop
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006052:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800605a:	4bbb      	ldr	r3, [pc, #748]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800605c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006060:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006068:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800606c:	4ab6      	ldr	r2, [pc, #728]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800606e:	430b      	orrs	r3, r1
 8006070:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006074:	e003      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800607a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800607e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	2100      	movs	r1, #0
 8006088:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006094:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006098:	460b      	mov	r3, r1
 800609a:	4313      	orrs	r3, r2
 800609c:	d055      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800609e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060a6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80060aa:	d031      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80060ac:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80060b0:	d82a      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80060b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b6:	d02d      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80060b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060bc:	d824      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80060be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060c2:	d029      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80060c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060c8:	d81e      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80060ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ce:	d011      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80060d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060d4:	d818      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d020      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	d113      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060e4:	3308      	adds	r3, #8
 80060e6:	4618      	mov	r0, r3
 80060e8:	f003 fed6 	bl	8009e98 <RCCEx_PLL2_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80060f2:	e014      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060f8:	3330      	adds	r3, #48	; 0x30
 80060fa:	4618      	mov	r0, r3
 80060fc:	f003 ff64 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006106:	e00a      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800610e:	e006      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006110:	bf00      	nop
 8006112:	e004      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006114:	bf00      	nop
 8006116:	e002      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800611c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006126:	4b88      	ldr	r3, [pc, #544]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006128:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800612c:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8006130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006138:	4a83      	ldr	r2, [pc, #524]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800613a:	430b      	orrs	r3, r1
 800613c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006140:	e003      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006146:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800614a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	2100      	movs	r1, #0
 8006154:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006160:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d055      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800616a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800616e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006172:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006176:	d031      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006178:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800617c:	d82a      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800617e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006182:	d02d      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006188:	d824      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800618a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800618e:	d029      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006190:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006194:	d81e      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800619a:	d011      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800619c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061a0:	d818      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d020      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80061a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061aa:	d113      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061b0:	3308      	adds	r3, #8
 80061b2:	4618      	mov	r0, r3
 80061b4:	f003 fe70 	bl	8009e98 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80061be:	e014      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061c4:	3330      	adds	r3, #48	; 0x30
 80061c6:	4618      	mov	r0, r3
 80061c8:	f003 fefe 	bl	8009fc8 <RCCEx_PLL3_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80061d2:	e00a      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80061da:	e006      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061dc:	bf00      	nop
 80061de:	e004      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061e0:	bf00      	nop
 80061e2:	e002      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061e4:	bf00      	nop
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80061e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10d      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80061f2:	4b55      	ldr	r3, [pc, #340]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80061fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006200:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006204:	4a50      	ldr	r2, [pc, #320]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006206:	430b      	orrs	r3, r1
 8006208:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800620c:	e003      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006212:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006216:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	2100      	movs	r1, #0
 8006220:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800622c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006230:	460b      	mov	r3, r1
 8006232:	4313      	orrs	r3, r2
 8006234:	d055      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800623a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800623e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006242:	d031      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006248:	d82a      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624e:	d02d      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d824      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800625a:	d029      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800625c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006260:	d81e      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006266:	d011      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626c:	d818      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d020      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006276:	d113      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006278:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800627c:	3308      	adds	r3, #8
 800627e:	4618      	mov	r0, r3
 8006280:	f003 fe0a 	bl	8009e98 <RCCEx_PLL2_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800628a:	e014      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800628c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006290:	3330      	adds	r3, #48	; 0x30
 8006292:	4618      	mov	r0, r3
 8006294:	f003 fe98 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800629e:	e00a      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80062a6:	e006      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80062a8:	bf00      	nop
 80062aa:	e004      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80062ac:	bf00      	nop
 80062ae:	e002      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80062be:	4b22      	ldr	r3, [pc, #136]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80062c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80062c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80062d8:	e003      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80062ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062f2:	2300      	movs	r3, #0
 80062f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80062f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80062fc:	460b      	mov	r3, r1
 80062fe:	4313      	orrs	r3, r2
 8006300:	d055      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006306:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800630a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800630e:	d035      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006314:	d82e      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006316:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800631a:	d031      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800631c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006320:	d828      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006326:	d01b      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632c:	d822      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006336:	d009      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006338:	e01c      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800633a:	4b03      	ldr	r3, [pc, #12]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	4a02      	ldr	r2, [pc, #8]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006344:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006346:	e01c      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006348:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800634c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006350:	3308      	adds	r3, #8
 8006352:	4618      	mov	r0, r3
 8006354:	f003 fda0 	bl	8009e98 <RCCEx_PLL2_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800635e:	e010      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006364:	3330      	adds	r3, #48	; 0x30
 8006366:	4618      	mov	r0, r3
 8006368:	f003 fe2e 	bl	8009fc8 <RCCEx_PLL3_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006372:	e006      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800637a:	e002      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800637c:	bf00      	nop
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006382:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10d      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800638a:	4bc3      	ldr	r3, [pc, #780]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800638c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006390:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006394:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006398:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800639c:	4abe      	ldr	r2, [pc, #760]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800639e:	430b      	orrs	r3, r1
 80063a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063aa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80063ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80063ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063be:	2300      	movs	r3, #0
 80063c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80063c8:	460b      	mov	r3, r1
 80063ca:	4313      	orrs	r3, r2
 80063cc:	d051      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80063ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80063d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063da:	d033      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80063dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063e0:	d82c      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80063e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80063e6:	d02d      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80063e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80063ec:	d826      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80063ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f2:	d019      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80063f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f8:	d820      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80063fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006402:	d007      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006404:	e01a      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006406:	4ba4      	ldr	r3, [pc, #656]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	4aa3      	ldr	r2, [pc, #652]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800640c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006410:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006412:	e018      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006418:	3308      	adds	r3, #8
 800641a:	4618      	mov	r0, r3
 800641c:	f003 fd3c 	bl	8009e98 <RCCEx_PLL2_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006426:	e00e      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800642c:	3330      	adds	r3, #48	; 0x30
 800642e:	4618      	mov	r0, r3
 8006430:	f003 fdca 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800643a:	e004      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006446:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800644e:	4b92      	ldr	r3, [pc, #584]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006454:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8006458:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800645c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006460:	4a8d      	ldr	r2, [pc, #564]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006462:	430b      	orrs	r3, r1
 8006464:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006468:	e003      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800646e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006472:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800647e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006480:	2300      	movs	r3, #0
 8006482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006484:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d032      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800648e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006496:	2b05      	cmp	r3, #5
 8006498:	d80f      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800649a:	2b03      	cmp	r3, #3
 800649c:	d211      	bcs.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d911      	bls.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d109      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064aa:	3308      	adds	r3, #8
 80064ac:	4618      	mov	r0, r3
 80064ae:	f003 fcf3 	bl	8009e98 <RCCEx_PLL2_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80064b8:	e006      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80064c0:	e002      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80064c2:	bf00      	nop
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80064c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10d      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80064d0:	4b71      	ldr	r3, [pc, #452]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064d6:	f023 0107 	bic.w	r1, r3, #7
 80064da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80064e2:	4a6d      	ldr	r2, [pc, #436]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064e4:	430b      	orrs	r3, r1
 80064e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064ea:	e003      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80064f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80064f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	2100      	movs	r1, #0
 80064fe:	6739      	str	r1, [r7, #112]	; 0x70
 8006500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006504:	677b      	str	r3, [r7, #116]	; 0x74
 8006506:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d024      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800651c:	2b08      	cmp	r3, #8
 800651e:	d005      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006526:	e002      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006528:	bf00      	nop
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800652c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10d      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006536:	4b58      	ldr	r3, [pc, #352]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800653c:	f023 0108 	bic.w	r1, r3, #8
 8006540:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006548:	4a53      	ldr	r2, [pc, #332]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800654a:	430b      	orrs	r3, r1
 800654c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006550:	e003      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006552:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006556:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800655a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006566:	66bb      	str	r3, [r7, #104]	; 0x68
 8006568:	2300      	movs	r3, #0
 800656a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800656c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	f000 80b9 	beq.w	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006578:	4b48      	ldr	r3, [pc, #288]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	4a47      	ldr	r2, [pc, #284]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006584:	f7fb f926 	bl	80017d4 <HAL_GetTick>
 8006588:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800658c:	e00b      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658e:	f7fb f921 	bl	80017d4 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d903      	bls.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80065a4:	e005      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80065a6:	4b3d      	ldr	r3, [pc, #244]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0ed      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80065b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 8093 	bne.w	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065bc:	4b36      	ldr	r3, [pc, #216]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80065ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d023      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80065d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065d6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80065da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80065de:	4293      	cmp	r3, r2
 80065e0:	d01b      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065e2:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065f0:	4b29      	ldr	r3, [pc, #164]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065f6:	4a28      	ldr	r2, [pc, #160]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006606:	4a24      	ldr	r2, [pc, #144]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006610:	4a21      	ldr	r2, [pc, #132]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006612:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006616:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800661a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d019      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006626:	f7fb f8d5 	bl	80017d4 <HAL_GetTick>
 800662a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800662e:	e00d      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006630:	f7fb f8d0 	bl	80017d4 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006640:	429a      	cmp	r2, r3
 8006642:	d903      	bls.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800664a:	e006      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800664c:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800664e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0ea      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800665a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800665e:	2b00      	cmp	r3, #0
 8006660:	d13a      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006662:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006666:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800666a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006672:	d115      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006674:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800667c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006680:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800668e:	4a02      	ldr	r2, [pc, #8]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006690:	430b      	orrs	r3, r1
 8006692:	61d3      	str	r3, [r2, #28]
 8006694:	e00a      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006696:	bf00      	nop
 8006698:	44020c00 	.word	0x44020c00
 800669c:	44020800 	.word	0x44020800
 80066a0:	4b9f      	ldr	r3, [pc, #636]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	4a9e      	ldr	r2, [pc, #632]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066aa:	61d3      	str	r3, [r2, #28]
 80066ac:	4b9c      	ldr	r3, [pc, #624]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066b2:	4a9b      	ldr	r2, [pc, #620]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80066bc:	4b98      	ldr	r3, [pc, #608]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066be:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80066c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80066ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ce:	4a94      	ldr	r2, [pc, #592]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80066d6:	e008      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80066dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80066e0:	e003      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80066e6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80066f6:	663b      	str	r3, [r7, #96]	; 0x60
 80066f8:	2300      	movs	r3, #0
 80066fa:	667b      	str	r3, [r7, #100]	; 0x64
 80066fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006700:	460b      	mov	r3, r1
 8006702:	4313      	orrs	r3, r2
 8006704:	d035      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006706:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800670a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800670e:	2b30      	cmp	r3, #48	; 0x30
 8006710:	d014      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006712:	2b30      	cmp	r3, #48	; 0x30
 8006714:	d80e      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006716:	2b20      	cmp	r3, #32
 8006718:	d012      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800671a:	2b20      	cmp	r3, #32
 800671c:	d80a      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d010      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006722:	2b10      	cmp	r3, #16
 8006724:	d106      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006726:	4b7e      	ldr	r3, [pc, #504]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	4a7d      	ldr	r2, [pc, #500]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800672c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006730:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006732:	e008      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800673a:	e004      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800673c:	bf00      	nop
 800673e:	e002      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006740:	bf00      	nop
 8006742:	e000      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006746:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800674e:	4b74      	ldr	r3, [pc, #464]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006754:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800675c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006760:	4a6f      	ldr	r2, [pc, #444]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006762:	430b      	orrs	r3, r1
 8006764:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006768:	e003      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800676e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006772:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800677e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006780:	2300      	movs	r3, #0
 8006782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006784:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006788:	460b      	mov	r3, r1
 800678a:	4313      	orrs	r3, r2
 800678c:	d033      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800678e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006792:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d007      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800679e:	e010      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a0:	4b5f      	ldr	r3, [pc, #380]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	4a5e      	ldr	r2, [pc, #376]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067aa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80067ac:	e00d      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067b2:	3308      	adds	r3, #8
 80067b4:	4618      	mov	r0, r3
 80067b6:	f003 fb6f 	bl	8009e98 <RCCEx_PLL2_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80067c0:	e003      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80067c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10d      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80067d2:	4b53      	ldr	r3, [pc, #332]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067d8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80067dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80067e4:	4a4e      	ldr	r2, [pc, #312]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067e6:	430b      	orrs	r3, r1
 80067e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80067ec:	e003      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80067f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80067f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006802:	653b      	str	r3, [r7, #80]	; 0x50
 8006804:	2300      	movs	r3, #0
 8006806:	657b      	str	r3, [r7, #84]	; 0x54
 8006808:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d033      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006812:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006816:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d007      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006822:	e010      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	4a3d      	ldr	r2, [pc, #244]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006830:	e00d      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006832:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006836:	3308      	adds	r3, #8
 8006838:	4618      	mov	r0, r3
 800683a:	f003 fb2d 	bl	8009e98 <RCCEx_PLL2_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006844:	e003      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800684c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10d      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006856:	4b32      	ldr	r3, [pc, #200]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800685c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006860:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006864:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8006868:	4a2d      	ldr	r2, [pc, #180]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800686a:	430b      	orrs	r3, r1
 800686c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006870:	e003      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006872:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006876:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800687a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006886:	64bb      	str	r3, [r7, #72]	; 0x48
 8006888:	2300      	movs	r3, #0
 800688a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800688c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006890:	460b      	mov	r3, r1
 8006892:	4313      	orrs	r3, r2
 8006894:	d04a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006896:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800689a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d827      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80068a2:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068bd 	.word	0x080068bd
 80068ac:	080068cb 	.word	0x080068cb
 80068b0:	080068df 	.word	0x080068df
 80068b4:	080068fb 	.word	0x080068fb
 80068b8:	080068fb 	.word	0x080068fb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068bc:	4b18      	ldr	r3, [pc, #96]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	4a17      	ldr	r2, [pc, #92]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80068c8:	e018      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068ce:	3308      	adds	r3, #8
 80068d0:	4618      	mov	r0, r3
 80068d2:	f003 fae1 	bl	8009e98 <RCCEx_PLL2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80068dc:	e00e      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068e2:	3330      	adds	r3, #48	; 0x30
 80068e4:	4618      	mov	r0, r3
 80068e6:	f003 fb6f 	bl	8009fc8 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80068f0:	e004      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80068fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10f      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800690a:	f023 0107 	bic.w	r1, r3, #7
 800690e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006916:	4a02      	ldr	r2, [pc, #8]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006918:	430b      	orrs	r3, r1
 800691a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800691e:	e005      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006920:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006924:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006928:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800692c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006938:	643b      	str	r3, [r7, #64]	; 0x40
 800693a:	2300      	movs	r3, #0
 800693c:	647b      	str	r3, [r7, #68]	; 0x44
 800693e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	f000 8081 	beq.w	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800694a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800694e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006952:	2b20      	cmp	r3, #32
 8006954:	d85f      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	080069e1 	.word	0x080069e1
 8006960:	08006a17 	.word	0x08006a17
 8006964:	08006a17 	.word	0x08006a17
 8006968:	08006a17 	.word	0x08006a17
 800696c:	08006a17 	.word	0x08006a17
 8006970:	08006a17 	.word	0x08006a17
 8006974:	08006a17 	.word	0x08006a17
 8006978:	08006a17 	.word	0x08006a17
 800697c:	080069ef 	.word	0x080069ef
 8006980:	08006a17 	.word	0x08006a17
 8006984:	08006a17 	.word	0x08006a17
 8006988:	08006a17 	.word	0x08006a17
 800698c:	08006a17 	.word	0x08006a17
 8006990:	08006a17 	.word	0x08006a17
 8006994:	08006a17 	.word	0x08006a17
 8006998:	08006a17 	.word	0x08006a17
 800699c:	08006a03 	.word	0x08006a03
 80069a0:	08006a17 	.word	0x08006a17
 80069a4:	08006a17 	.word	0x08006a17
 80069a8:	08006a17 	.word	0x08006a17
 80069ac:	08006a17 	.word	0x08006a17
 80069b0:	08006a17 	.word	0x08006a17
 80069b4:	08006a17 	.word	0x08006a17
 80069b8:	08006a17 	.word	0x08006a17
 80069bc:	08006a1f 	.word	0x08006a1f
 80069c0:	08006a17 	.word	0x08006a17
 80069c4:	08006a17 	.word	0x08006a17
 80069c8:	08006a17 	.word	0x08006a17
 80069cc:	08006a17 	.word	0x08006a17
 80069d0:	08006a17 	.word	0x08006a17
 80069d4:	08006a17 	.word	0x08006a17
 80069d8:	08006a17 	.word	0x08006a17
 80069dc:	08006a1f 	.word	0x08006a1f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4bab      	ldr	r3, [pc, #684]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	4aaa      	ldr	r2, [pc, #680]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ea:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80069ec:	e018      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069f2:	3308      	adds	r3, #8
 80069f4:	4618      	mov	r0, r3
 80069f6:	f003 fa4f 	bl	8009e98 <RCCEx_PLL2_Config>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006a00:	e00e      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a06:	3330      	adds	r3, #48	; 0x30
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f003 fadd 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006a14:	e004      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006a1c:	e000      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10d      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006a28:	4b99      	ldr	r3, [pc, #612]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a3a:	4a95      	ldr	r2, [pc, #596]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a42:	e003      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006a62:	460b      	mov	r3, r1
 8006a64:	4313      	orrs	r3, r2
 8006a66:	d04e      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a74:	d02e      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7a:	d827      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006a7c:	2bc0      	cmp	r3, #192	; 0xc0
 8006a7e:	d02b      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006a80:	2bc0      	cmp	r3, #192	; 0xc0
 8006a82:	d823      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	d017      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d81f      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d007      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006a94:	e01a      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a96:	4b7e      	ldr	r3, [pc, #504]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	4a7d      	ldr	r2, [pc, #500]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa0:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006aa2:	e01a      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f003 f9f4 	bl	8009e98 <RCCEx_PLL2_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006ab6:	e010      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006abc:	3330      	adds	r3, #48	; 0x30
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f003 fa82 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006aca:	e006      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006ad2:	e002      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006ad4:	bf00      	nop
 8006ad6:	e000      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ada:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10d      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006ae2:	4b6b      	ldr	r3, [pc, #428]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ae8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006af4:	4a66      	ldr	r2, [pc, #408]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006af6:	430b      	orrs	r3, r1
 8006af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006afc:	e003      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b02:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
 8006b14:	2300      	movs	r3, #0
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	d055      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006b22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006b2a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006b2e:	d031      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006b30:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006b34:	d82a      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3a:	d02d      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b40:	d824      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006b42:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b46:	d029      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006b48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b4c:	d81e      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d011      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d818      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d020      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b62:	d113      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b68:	3308      	adds	r3, #8
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f003 f994 	bl	8009e98 <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006b76:	e014      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b7c:	3330      	adds	r3, #48	; 0x30
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f003 fa22 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006b92:	e006      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b94:	bf00      	nop
 8006b96:	e004      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b98:	bf00      	nop
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006b9c:	bf00      	nop
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006baa:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bb0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006bbc:	4a34      	ldr	r2, [pc, #208]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006bc4:	e003      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bdc:	2300      	movs	r3, #0
 8006bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006be4:	460b      	mov	r3, r1
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d058      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bf2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006bf6:	d031      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006bf8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006bfc:	d82a      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c02:	d02d      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c08:	d824      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006c0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c0e:	d029      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006c10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c14:	d81e      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1a:	d011      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c20:	d818      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d020      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2a:	d113      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c30:	3308      	adds	r3, #8
 8006c32:	4618      	mov	r0, r3
 8006c34:	f003 f930 	bl	8009e98 <RCCEx_PLL2_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006c3e:	e014      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c44:	3330      	adds	r3, #48	; 0x30
 8006c46:	4618      	mov	r0, r3
 8006c48:	f003 f9be 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006c52:	e00a      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006c5a:	e006      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c5c:	bf00      	nop
 8006c5e:	e004      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c60:	bf00      	nop
 8006c62:	e002      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c64:	bf00      	nop
 8006c66:	e000      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d110      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c78:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c84:	4902      	ldr	r1, [pc, #8]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006c8c:	e006      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006c8e:	bf00      	nop
 8006c90:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c94:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c98:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	6239      	str	r1, [r7, #32]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
 8006cae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	d055      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cc0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006cc4:	d031      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006cc6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006cca:	d82a      	bhi.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd0:	d02d      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cd6:	d824      	bhi.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006cd8:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006cdc:	d029      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006cde:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006ce2:	d81e      	bhi.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce8:	d011      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cee:	d818      	bhi.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d020      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf8:	d113      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cfe:	3308      	adds	r3, #8
 8006d00:	4618      	mov	r0, r3
 8006d02:	f003 f8c9 	bl	8009e98 <RCCEx_PLL2_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d0c:	e014      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d12:	3330      	adds	r3, #48	; 0x30
 8006d14:	4618      	mov	r0, r3
 8006d16:	f003 f957 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d20:	e00a      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d28:	e006      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006d2a:	bf00      	nop
 8006d2c:	e004      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006d2e:	bf00      	nop
 8006d30:	e002      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10d      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006d40:	4b88      	ldr	r3, [pc, #544]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d46:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8006d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d52:	4984      	ldr	r1, [pc, #528]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006d5a:	e003      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	61b9      	str	r1, [r7, #24]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	d03d      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d81c      	bhi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006dcf 	.word	0x08006dcf
 8006d98:	08006da5 	.word	0x08006da5
 8006d9c:	08006db3 	.word	0x08006db3
 8006da0:	08006dcf 	.word	0x08006dcf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da4:	4b6f      	ldr	r3, [pc, #444]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	4a6e      	ldr	r2, [pc, #440]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dae:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006db0:	e00e      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006db6:	3308      	adds	r3, #8
 8006db8:	4618      	mov	r0, r3
 8006dba:	f003 f86d 	bl	8009e98 <RCCEx_PLL2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006dc4:	e004      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10d      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006dd8:	4b62      	ldr	r3, [pc, #392]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006dde:	f023 0203 	bic.w	r2, r3, #3
 8006de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006de6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006dea:	495e      	ldr	r1, [pc, #376]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006df8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	2100      	movs	r1, #0
 8006e06:	6139      	str	r1, [r7, #16]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	d03a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e24:	d00e      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2a:	d815      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d017      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e34:	d110      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e36:	4b4b      	ldr	r3, [pc, #300]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	4a4a      	ldr	r2, [pc, #296]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e40:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006e42:	e00e      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e48:	3308      	adds	r3, #8
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f003 f824 	bl	8009e98 <RCCEx_PLL2_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006e56:	e004      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006e5e:	e000      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006e6a:	4b3e      	ldr	r3, [pc, #248]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e7c:	4939      	ldr	r1, [pc, #228]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8006e84:	e003      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e8a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	2100      	movs	r1, #0
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	d038      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006eae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006eb2:	2b30      	cmp	r3, #48	; 0x30
 8006eb4:	d01b      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006eb6:	2b30      	cmp	r3, #48	; 0x30
 8006eb8:	d815      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006eba:	2b10      	cmp	r3, #16
 8006ebc:	d002      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d007      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006ec2:	e010      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec4:	4b27      	ldr	r3, [pc, #156]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	4a26      	ldr	r2, [pc, #152]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ed0:	e00e      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ed6:	3330      	adds	r3, #48	; 0x30
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f003 f875 	bl	8009fc8 <RCCEx_PLL3_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006ee4:	e004      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006eec:	e000      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10d      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006efa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006efe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006f0a:	4916      	ldr	r1, [pc, #88]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006f12:	e003      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	2100      	movs	r1, #0
 8006f26:	6039      	str	r1, [r7, #0]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f32:	460b      	mov	r3, r1
 8006f34:	4313      	orrs	r3, r2
 8006f36:	d00c      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006f38:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f46:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006f4a:	4906      	ldr	r1, [pc, #24]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8006f52:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f62:	bf00      	nop
 8006f64:	44020c00 	.word	0x44020c00

08006f68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b08b      	sub	sp, #44	; 0x2c
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006f70:	4bad      	ldr	r3, [pc, #692]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f78:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006f7a:	4bab      	ldr	r3, [pc, #684]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006f84:	4ba8      	ldr	r3, [pc, #672]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	0a1b      	lsrs	r3, r3, #8
 8006f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f8e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006f90:	4ba5      	ldr	r3, [pc, #660]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006f9a:	4ba3      	ldr	r3, [pc, #652]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	08db      	lsrs	r3, r3, #3
 8006fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 8126 	beq.w	800720a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d053      	beq.n	800706c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d86f      	bhi.n	80070aa <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d003      	beq.n	8006fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d02b      	beq.n	800702e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8006fd6:	e068      	b.n	80070aa <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fd8:	4b93      	ldr	r3, [pc, #588]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	08db      	lsrs	r3, r3, #3
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	4a92      	ldr	r2, [pc, #584]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007010:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007230 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007028:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800702c:	e068      	b.n	8007100 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007234 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800703c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704a:	ed97 6a04 	vldr	s12, [r7, #16]
 800704e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007230 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800706a:	e049      	b.n	8007100 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007238 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800707a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007088:	ed97 6a04 	vldr	s12, [r7, #16]
 800708c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007230 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80070a8:	e02a      	b.n	8007100 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070aa:	4b5f      	ldr	r3, [pc, #380]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	08db      	lsrs	r3, r3, #3
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	4a5d      	ldr	r2, [pc, #372]	; (800722c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070b6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ba:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	ed97 6a04 	vldr	s12, [r7, #16]
 80070e2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007230 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80070fe:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007100:	4b49      	ldr	r3, [pc, #292]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800710c:	d121      	bne.n	8007152 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800710e:	4b46      	ldr	r3, [pc, #280]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d017      	beq.n	800714a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800711a:	4b43      	ldr	r3, [pc, #268]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	0a5b      	lsrs	r3, r3, #9
 8007120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800712c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007130:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007134:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007140:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e006      	b.n	8007158 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e002      	b.n	8007158 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007158:	4b33      	ldr	r3, [pc, #204]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007164:	d121      	bne.n	80071aa <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007166:	4b30      	ldr	r3, [pc, #192]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007172:	4b2d      	ldr	r3, [pc, #180]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007176:	0c1b      	lsrs	r3, r3, #16
 8007178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007188:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800718c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007198:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	605a      	str	r2, [r3, #4]
 80071a0:	e006      	b.n	80071b0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	605a      	str	r2, [r3, #4]
 80071a8:	e002      	b.n	80071b0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071b0:	4b1d      	ldr	r3, [pc, #116]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071bc:	d121      	bne.n	8007202 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80071be:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d017      	beq.n	80071fa <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071ca:	4b17      	ldr	r3, [pc, #92]	; (8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	0e1b      	lsrs	r3, r3, #24
 80071d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80071dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80071e4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80071e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071f8:	e010      	b.n	800721c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	609a      	str	r2, [r3, #8]
}
 8007200:	e00c      	b.n	800721c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	609a      	str	r2, [r3, #8]
}
 8007208:	e008      	b.n	800721c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	609a      	str	r2, [r3, #8]
}
 800721c:	bf00      	nop
 800721e:	372c      	adds	r7, #44	; 0x2c
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	44020c00 	.word	0x44020c00
 800722c:	03d09000 	.word	0x03d09000
 8007230:	46000000 	.word	0x46000000
 8007234:	4a742400 	.word	0x4a742400
 8007238:	4af42400 	.word	0x4af42400

0800723c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800723c:	b480      	push	{r7}
 800723e:	b08b      	sub	sp, #44	; 0x2c
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007244:	4bad      	ldr	r3, [pc, #692]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800724e:	4bab      	ldr	r3, [pc, #684]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007258:	4ba8      	ldr	r3, [pc, #672]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	0a1b      	lsrs	r3, r3, #8
 800725e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007262:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007264:	4ba5      	ldr	r3, [pc, #660]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800726e:	4ba3      	ldr	r3, [pc, #652]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	08db      	lsrs	r3, r3, #3
 8007274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 8126 	beq.w	80074de <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d053      	beq.n	8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2b03      	cmp	r3, #3
 800729c:	d86f      	bhi.n	800737e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d003      	beq.n	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d02b      	beq.n	8007302 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80072aa:	e068      	b.n	800737e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072ac:	4b93      	ldr	r3, [pc, #588]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	08db      	lsrs	r3, r3, #3
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	4a92      	ldr	r2, [pc, #584]	; (8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
 80072bc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e0:	ed97 6a04 	vldr	s12, [r7, #16]
 80072e4:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80072e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007300:	e068      	b.n	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	ee07 3a90 	vmov	s15, r3
 8007308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007322:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800733e:	e049      	b.n	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800750c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007360:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007378:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800737c:	e02a      	b.n	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800737e:	4b5f      	ldr	r3, [pc, #380]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	08db      	lsrs	r3, r3, #3
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	4a5d      	ldr	r2, [pc, #372]	; (8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800738a:	fa22 f303 	lsr.w	r3, r2, r3
 800738e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b2:	ed97 6a04 	vldr	s12, [r7, #16]
 80073b6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80073ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80073d2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073d4:	4b49      	ldr	r3, [pc, #292]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073e0:	d121      	bne.n	8007426 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80073e2:	4b46      	ldr	r3, [pc, #280]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d017      	beq.n	800741e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073ee:	4b43      	ldr	r3, [pc, #268]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f2:	0a5b      	lsrs	r3, r3, #9
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007404:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007408:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800740c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	e006      	b.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e002      	b.n	800742c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800742c:	4b33      	ldr	r3, [pc, #204]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007438:	d121      	bne.n	800747e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800743a:	4b30      	ldr	r3, [pc, #192]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d017      	beq.n	8007476 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007446:	4b2d      	ldr	r3, [pc, #180]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800745c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007460:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	605a      	str	r2, [r3, #4]
 8007474:	e006      	b.n	8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	605a      	str	r2, [r3, #4]
 800747c:	e002      	b.n	8007484 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800748c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007490:	d121      	bne.n	80074d6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007492:	4b1a      	ldr	r3, [pc, #104]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d017      	beq.n	80074ce <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800749e:	4b17      	ldr	r3, [pc, #92]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	0e1b      	lsrs	r3, r3, #24
 80074a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80074b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80074b8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80074bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074cc:	e010      	b.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	609a      	str	r2, [r3, #8]
}
 80074d4:	e00c      	b.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	e008      	b.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	609a      	str	r2, [r3, #8]
}
 80074f0:	bf00      	nop
 80074f2:	372c      	adds	r7, #44	; 0x2c
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	44020c00 	.word	0x44020c00
 8007500:	03d09000 	.word	0x03d09000
 8007504:	46000000 	.word	0x46000000
 8007508:	4a742400 	.word	0x4a742400
 800750c:	4af42400 	.word	0x4af42400

08007510 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007510:	b480      	push	{r7}
 8007512:	b08b      	sub	sp, #44	; 0x2c
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007518:	4bad      	ldr	r3, [pc, #692]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007522:	4bab      	ldr	r3, [pc, #684]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800752c:	4ba8      	ldr	r3, [pc, #672]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	0a1b      	lsrs	r3, r3, #8
 8007532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007536:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007538:	4ba5      	ldr	r3, [pc, #660]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007542:	4ba3      	ldr	r3, [pc, #652]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007546:	08db      	lsrs	r3, r3, #3
 8007548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8126 	beq.w	80077b2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2b03      	cmp	r3, #3
 800756a:	d053      	beq.n	8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	2b03      	cmp	r3, #3
 8007570:	d86f      	bhi.n	8007652 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d003      	beq.n	8007580 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d02b      	beq.n	80075d6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800757e:	e068      	b.n	8007652 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007580:	4b93      	ldr	r3, [pc, #588]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	08db      	lsrs	r3, r3, #3
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	4a92      	ldr	r2, [pc, #584]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b4:	ed97 6a04 	vldr	s12, [r7, #16]
 80075b8:	eddf 5a87 	vldr	s11, [pc, #540]	; 80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80075bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80075d4:	e068      	b.n	80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80075e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80075f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80075fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007612:	e049      	b.n	80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007630:	ed97 6a04 	vldr	s12, [r7, #16]
 8007634:	eddf 5a68 	vldr	s11, [pc, #416]	; 80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007650:	e02a      	b.n	80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007652:	4b5f      	ldr	r3, [pc, #380]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	08db      	lsrs	r3, r3, #3
 8007658:	f003 0303 	and.w	r3, r3, #3
 800765c:	4a5d      	ldr	r2, [pc, #372]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800765e:	fa22 f303 	lsr.w	r3, r2, r3
 8007662:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007686:	ed97 6a04 	vldr	s12, [r7, #16]
 800768a:	eddf 5a53 	vldr	s11, [pc, #332]	; 80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80076a6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076a8:	4b49      	ldr	r3, [pc, #292]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d121      	bne.n	80076fa <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80076b6:	4b46      	ldr	r3, [pc, #280]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d017      	beq.n	80076f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076c2:	4b43      	ldr	r3, [pc, #268]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	0a5b      	lsrs	r3, r3, #9
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80076d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076d8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80076dc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80076e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e006      	b.n	8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e002      	b.n	8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007700:	4b33      	ldr	r3, [pc, #204]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800770c:	d121      	bne.n	8007752 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800770e:	4b30      	ldr	r3, [pc, #192]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d017      	beq.n	800774a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800771a:	4b2d      	ldr	r3, [pc, #180]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	0c1b      	lsrs	r3, r3, #16
 8007720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800772c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007730:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007734:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800773c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007740:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	605a      	str	r2, [r3, #4]
 8007748:	e006      	b.n	8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	605a      	str	r2, [r3, #4]
 8007750:	e002      	b.n	8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007758:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007764:	d121      	bne.n	80077aa <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d017      	beq.n	80077a2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007772:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007776:	0e1b      	lsrs	r3, r3, #24
 8007778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007788:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800778c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007798:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80077a0:	e010      	b.n	80077c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	609a      	str	r2, [r3, #8]
}
 80077a8:	e00c      	b.n	80077c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	e008      	b.n	80077c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	609a      	str	r2, [r3, #8]
}
 80077c4:	bf00      	nop
 80077c6:	372c      	adds	r7, #44	; 0x2c
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	44020c00 	.word	0x44020c00
 80077d4:	03d09000 	.word	0x03d09000
 80077d8:	46000000 	.word	0x46000000
 80077dc:	4a742400 	.word	0x4a742400
 80077e0:	4af42400 	.word	0x4af42400

080077e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80077e4:	b590      	push	{r4, r7, lr}
 80077e6:	b08f      	sub	sp, #60	; 0x3c
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80077ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077f2:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80077f6:	4321      	orrs	r1, r4
 80077f8:	d150      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80077fa:	4b26      	ldr	r3, [pc, #152]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007804:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007806:	4b23      	ldr	r3, [pc, #140]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d108      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800781a:	d104      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800781c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
 8007822:	f002 bb2a 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007826:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800782c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007834:	d108      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800783c:	d104      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800783e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
 8007844:	f002 bb19 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007848:	4b12      	ldr	r3, [pc, #72]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007854:	d119      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800785c:	d115      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8007866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786a:	d30a      	bcc.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	0a1b      	lsrs	r3, r3, #8
 8007872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007876:	4a08      	ldr	r2, [pc, #32]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800787e:	f002 bafc 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007886:	f002 baf8 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
 800788e:	f002 baf4 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007892:	bf00      	nop
 8007894:	44020c00 	.word	0x44020c00
 8007898:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800789c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078a0:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80078a4:	ea50 0104 	orrs.w	r1, r0, r4
 80078a8:	f001 8275 	beq.w	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80078ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078b0:	2801      	cmp	r0, #1
 80078b2:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80078b6:	f082 82dd 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078be:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80078c2:	ea50 0104 	orrs.w	r1, r0, r4
 80078c6:	f001 816c 	beq.w	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80078ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ce:	2801      	cmp	r0, #1
 80078d0:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80078d4:	f082 82ce 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078dc:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80078e0:	ea50 0104 	orrs.w	r1, r0, r4
 80078e4:	f001 8602 	beq.w	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80078e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ec:	2801      	cmp	r0, #1
 80078ee:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80078f2:	f082 82bf 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fa:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 80078fe:	ea50 0104 	orrs.w	r1, r0, r4
 8007902:	f001 854c 	beq.w	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800790a:	2801      	cmp	r0, #1
 800790c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8007910:	f082 82b0 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007918:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800791c:	ea50 0104 	orrs.w	r1, r0, r4
 8007920:	f001 849e 	beq.w	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007928:	2801      	cmp	r0, #1
 800792a:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800792e:	f082 82a1 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007936:	f1a1 0420 	sub.w	r4, r1, #32
 800793a:	ea50 0104 	orrs.w	r1, r0, r4
 800793e:	f001 83e8 	beq.w	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007946:	2801      	cmp	r0, #1
 8007948:	f171 0120 	sbcs.w	r1, r1, #32
 800794c:	f082 8292 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007954:	f1a1 0410 	sub.w	r4, r1, #16
 8007958:	ea50 0104 	orrs.w	r1, r0, r4
 800795c:	f002 8256 	beq.w	8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007964:	2801      	cmp	r0, #1
 8007966:	f171 0110 	sbcs.w	r1, r1, #16
 800796a:	f082 8283 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800796e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007972:	f1a1 0408 	sub.w	r4, r1, #8
 8007976:	ea50 0104 	orrs.w	r1, r0, r4
 800797a:	f002 81cc 	beq.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800797e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007982:	2801      	cmp	r0, #1
 8007984:	f171 0108 	sbcs.w	r1, r1, #8
 8007988:	f082 8274 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800798c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007990:	1f0c      	subs	r4, r1, #4
 8007992:	ea50 0104 	orrs.w	r1, r0, r4
 8007996:	f001 8648 	beq.w	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800799a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800799e:	2801      	cmp	r0, #1
 80079a0:	f171 0104 	sbcs.w	r1, r1, #4
 80079a4:	f082 8266 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ac:	1e8c      	subs	r4, r1, #2
 80079ae:	ea50 0104 	orrs.w	r1, r0, r4
 80079b2:	f002 8143 	beq.w	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80079b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ba:	2801      	cmp	r0, #1
 80079bc:	f171 0102 	sbcs.w	r1, r1, #2
 80079c0:	f082 8258 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079c8:	1e4c      	subs	r4, r1, #1
 80079ca:	ea50 0104 	orrs.w	r1, r0, r4
 80079ce:	f002 80ce 	beq.w	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80079d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079d6:	2801      	cmp	r0, #1
 80079d8:	f171 0101 	sbcs.w	r1, r1, #1
 80079dc:	f082 824a 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079e4:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80079e8:	4321      	orrs	r1, r4
 80079ea:	f002 8059 	beq.w	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80079ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079f2:	4cb6      	ldr	r4, [pc, #728]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80079f4:	42a0      	cmp	r0, r4
 80079f6:	f171 0100 	sbcs.w	r1, r1, #0
 80079fa:	f082 823b 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a02:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8007a06:	4321      	orrs	r1, r4
 8007a08:	f001 87d9 	beq.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a10:	4caf      	ldr	r4, [pc, #700]	; (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007a12:	42a0      	cmp	r0, r4
 8007a14:	f171 0100 	sbcs.w	r1, r1, #0
 8007a18:	f082 822c 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a20:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8007a24:	4321      	orrs	r1, r4
 8007a26:	f001 8751 	beq.w	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a2e:	4ca9      	ldr	r4, [pc, #676]	; (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	f171 0100 	sbcs.w	r1, r1, #0
 8007a36:	f082 821d 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a3e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8007a42:	4321      	orrs	r1, r4
 8007a44:	f001 869a 	beq.w	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a4c:	4ca2      	ldr	r4, [pc, #648]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007a4e:	42a0      	cmp	r0, r4
 8007a50:	f171 0100 	sbcs.w	r1, r1, #0
 8007a54:	f082 820e 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a5c:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8007a60:	4321      	orrs	r1, r4
 8007a62:	f001 8612 	beq.w	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a6a:	4c9c      	ldr	r4, [pc, #624]	; (8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8007a6c:	42a0      	cmp	r0, r4
 8007a6e:	f171 0100 	sbcs.w	r1, r1, #0
 8007a72:	f082 81ff 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a7a:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8007a7e:	4321      	orrs	r1, r4
 8007a80:	f002 817e 	beq.w	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a88:	4c95      	ldr	r4, [pc, #596]	; (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8007a8a:	42a0      	cmp	r0, r4
 8007a8c:	f171 0100 	sbcs.w	r1, r1, #0
 8007a90:	f082 81f0 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a98:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8007a9c:	4321      	orrs	r1, r4
 8007a9e:	f000 829e 	beq.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aa6:	4c8f      	ldr	r4, [pc, #572]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	f171 0100 	sbcs.w	r1, r1, #0
 8007aae:	f082 81e1 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ab6:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8007aba:	4321      	orrs	r1, r4
 8007abc:	f000 826d 	beq.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ac4:	4c88      	ldr	r4, [pc, #544]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ac6:	42a0      	cmp	r0, r4
 8007ac8:	f171 0100 	sbcs.w	r1, r1, #0
 8007acc:	f082 81d2 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ad4:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8007ad8:	4321      	orrs	r1, r4
 8007ada:	f001 800d 	beq.w	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ae2:	4c82      	ldr	r4, [pc, #520]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007ae4:	42a0      	cmp	r0, r4
 8007ae6:	f171 0100 	sbcs.w	r1, r1, #0
 8007aea:	f082 81c3 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007af2:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8007af6:	4321      	orrs	r1, r4
 8007af8:	f000 81d0 	beq.w	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b00:	4c7b      	ldr	r4, [pc, #492]	; (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007b02:	42a0      	cmp	r0, r4
 8007b04:	f171 0100 	sbcs.w	r1, r1, #0
 8007b08:	f082 81b4 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b10:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8007b14:	4321      	orrs	r1, r4
 8007b16:	f000 8142 	beq.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b1e:	4c75      	ldr	r4, [pc, #468]	; (8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	f171 0100 	sbcs.w	r1, r1, #0
 8007b26:	f082 81a5 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b2e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8007b32:	4321      	orrs	r1, r4
 8007b34:	f001 824e 	beq.w	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b3c:	4c6e      	ldr	r4, [pc, #440]	; (8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007b3e:	42a0      	cmp	r0, r4
 8007b40:	f171 0100 	sbcs.w	r1, r1, #0
 8007b44:	f082 8196 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b4c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8007b50:	4321      	orrs	r1, r4
 8007b52:	f001 8197 	beq.w	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b5a:	4c68      	ldr	r4, [pc, #416]	; (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007b5c:	42a0      	cmp	r0, r4
 8007b5e:	f171 0100 	sbcs.w	r1, r1, #0
 8007b62:	f082 8187 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b6a:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8007b6e:	4321      	orrs	r1, r4
 8007b70:	f001 8154 	beq.w	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b78:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8007b7c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b80:	f082 8178 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b88:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8007b8c:	4321      	orrs	r1, r4
 8007b8e:	f001 80b7 	beq.w	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b96:	f248 0401 	movw	r4, #32769	; 0x8001
 8007b9a:	42a0      	cmp	r0, r4
 8007b9c:	f171 0100 	sbcs.w	r1, r1, #0
 8007ba0:	f082 8168 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8007bac:	4321      	orrs	r1, r4
 8007bae:	f001 8064 	beq.w	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb6:	f244 0401 	movw	r4, #16385	; 0x4001
 8007bba:	42a0      	cmp	r0, r4
 8007bbc:	f171 0100 	sbcs.w	r1, r1, #0
 8007bc0:	f082 8158 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc8:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8007bcc:	4321      	orrs	r1, r4
 8007bce:	f001 8011 	beq.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd6:	f242 0401 	movw	r4, #8193	; 0x2001
 8007bda:	42a0      	cmp	r0, r4
 8007bdc:	f171 0100 	sbcs.w	r1, r1, #0
 8007be0:	f082 8148 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be8:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8007bec:	4321      	orrs	r1, r4
 8007bee:	f000 871e 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf6:	f241 0401 	movw	r4, #4097	; 0x1001
 8007bfa:	42a0      	cmp	r0, r4
 8007bfc:	f171 0100 	sbcs.w	r1, r1, #0
 8007c00:	f082 8138 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c08:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8007c0c:	4321      	orrs	r1, r4
 8007c0e:	f000 86a8 	beq.w	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c16:	f640 0401 	movw	r4, #2049	; 0x801
 8007c1a:	42a0      	cmp	r0, r4
 8007c1c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c20:	f082 8128 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c28:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8007c2c:	4321      	orrs	r1, r4
 8007c2e:	f000 8632 	beq.w	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c36:	f240 4401 	movw	r4, #1025	; 0x401
 8007c3a:	42a0      	cmp	r0, r4
 8007c3c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c40:	f082 8118 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c48:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8007c4c:	4321      	orrs	r1, r4
 8007c4e:	f000 85b0 	beq.w	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c56:	f240 2401 	movw	r4, #513	; 0x201
 8007c5a:	42a0      	cmp	r0, r4
 8007c5c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c60:	f082 8108 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c68:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8007c6c:	4321      	orrs	r1, r4
 8007c6e:	f000 8535 	beq.w	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007c72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c76:	f240 1401 	movw	r4, #257	; 0x101
 8007c7a:	42a0      	cmp	r0, r4
 8007c7c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c80:	f082 80f8 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c88:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8007c8c:	4321      	orrs	r1, r4
 8007c8e:	f000 84ba 	beq.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007c92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c96:	2881      	cmp	r0, #129	; 0x81
 8007c98:	f171 0100 	sbcs.w	r1, r1, #0
 8007c9c:	f082 80ea 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ca4:	2821      	cmp	r0, #33	; 0x21
 8007ca6:	f171 0100 	sbcs.w	r1, r1, #0
 8007caa:	d26f      	bcs.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cb0:	4301      	orrs	r1, r0
 8007cb2:	f002 80df 	beq.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cba:	1e42      	subs	r2, r0, #1
 8007cbc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007cc0:	2a20      	cmp	r2, #32
 8007cc2:	f173 0100 	sbcs.w	r1, r3, #0
 8007cc6:	f082 80d5 	bcs.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cca:	e019      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 8007ccc:	80000001 	.word	0x80000001
 8007cd0:	40000001 	.word	0x40000001
 8007cd4:	20000001 	.word	0x20000001
 8007cd8:	10000001 	.word	0x10000001
 8007cdc:	08000001 	.word	0x08000001
 8007ce0:	04000001 	.word	0x04000001
 8007ce4:	00800001 	.word	0x00800001
 8007ce8:	00400001 	.word	0x00400001
 8007cec:	00200001 	.word	0x00200001
 8007cf0:	00100001 	.word	0x00100001
 8007cf4:	00080001 	.word	0x00080001
 8007cf8:	00040001 	.word	0x00040001
 8007cfc:	00020001 	.word	0x00020001
 8007d00:	2a1f      	cmp	r2, #31
 8007d02:	f202 80b7 	bhi.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d06:	a101      	add	r1, pc, #4	; (adr r1, 8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007d08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d0c:	08008039 	.word	0x08008039
 8007d10:	08008105 	.word	0x08008105
 8007d14:	08009e75 	.word	0x08009e75
 8007d18:	080081c5 	.word	0x080081c5
 8007d1c:	08009e75 	.word	0x08009e75
 8007d20:	08009e75 	.word	0x08009e75
 8007d24:	08009e75 	.word	0x08009e75
 8007d28:	08008295 	.word	0x08008295
 8007d2c:	08009e75 	.word	0x08009e75
 8007d30:	08009e75 	.word	0x08009e75
 8007d34:	08009e75 	.word	0x08009e75
 8007d38:	08009e75 	.word	0x08009e75
 8007d3c:	08009e75 	.word	0x08009e75
 8007d40:	08009e75 	.word	0x08009e75
 8007d44:	08009e75 	.word	0x08009e75
 8007d48:	08008377 	.word	0x08008377
 8007d4c:	08009e75 	.word	0x08009e75
 8007d50:	08009e75 	.word	0x08009e75
 8007d54:	08009e75 	.word	0x08009e75
 8007d58:	08009e75 	.word	0x08009e75
 8007d5c:	08009e75 	.word	0x08009e75
 8007d60:	08009e75 	.word	0x08009e75
 8007d64:	08009e75 	.word	0x08009e75
 8007d68:	08009e75 	.word	0x08009e75
 8007d6c:	08009e75 	.word	0x08009e75
 8007d70:	08009e75 	.word	0x08009e75
 8007d74:	08009e75 	.word	0x08009e75
 8007d78:	08009e75 	.word	0x08009e75
 8007d7c:	08009e75 	.word	0x08009e75
 8007d80:	08009e75 	.word	0x08009e75
 8007d84:	08009e75 	.word	0x08009e75
 8007d88:	0800844d 	.word	0x0800844d
 8007d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d90:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007d94:	430b      	orrs	r3, r1
 8007d96:	f000 83c4 	beq.w	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007d9a:	f002 b86b 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007d9e:	4ba1      	ldr	r3, [pc, #644]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007da4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007da8:	633b      	str	r3, [r7, #48]	; 0x30
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007db0:	d036      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007db8:	d86b      	bhi.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dc0:	d02b      	beq.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dc8:	d863      	bhi.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd0:	d01b      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd8:	d85b      	bhi.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de6:	d008      	beq.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007de8:	e053      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dea:	f107 0320 	add.w	r3, r7, #32
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff f8ba 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007df8:	e04e      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dfa:	f107 0314 	add.w	r3, r7, #20
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff fa1c 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e08:	e046      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e0a:	f107 0308 	add.w	r3, r7, #8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff fb7e 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e18:	e03e      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007e1a:	4b83      	ldr	r3, [pc, #524]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e1e:	e03b      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e20:	4b80      	ldr	r3, [pc, #512]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e26:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e2c:	4b7d      	ldr	r3, [pc, #500]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d10c      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e3e:	4b79      	ldr	r3, [pc, #484]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	08db      	lsrs	r3, r3, #3
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	4a78      	ldr	r2, [pc, #480]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e50:	e01e      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e52:	4b74      	ldr	r3, [pc, #464]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5e:	d106      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e66:	d102      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e68:	4b71      	ldr	r3, [pc, #452]	; (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6c:	e010      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e6e:	4b6d      	ldr	r3, [pc, #436]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e7a:	d106      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e82:	d102      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e84:	4b6b      	ldr	r3, [pc, #428]	; (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
 8007e88:	e002      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007e8e:	e003      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007e90:	e002      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e96:	bf00      	nop
          }
        }
        break;
 8007e98:	f001 bfef 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007e9c:	4b61      	ldr	r3, [pc, #388]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ea2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8007ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eae:	d036      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eb6:	d86b      	bhi.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007ebe:	d02b      	beq.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007ec6:	d863      	bhi.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ece:	d01b      	beq.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed6:	d85b      	bhi.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ee4:	d008      	beq.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007ee6:	e053      	b.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ee8:	f107 0320 	add.w	r3, r7, #32
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff f83b 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ef6:	e04e      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef8:	f107 0314 	add.w	r3, r7, #20
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff f99d 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f06:	e046      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f08:	f107 0308 	add.w	r3, r7, #8
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff faff 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f16:	e03e      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007f18:	4b43      	ldr	r3, [pc, #268]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f1c:	e03b      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f1e:	4b41      	ldr	r3, [pc, #260]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f24:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f28:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f2a:	4b3e      	ldr	r3, [pc, #248]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d10c      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d109      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f3c:	4b39      	ldr	r3, [pc, #228]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	08db      	lsrs	r3, r3, #3
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	4a39      	ldr	r2, [pc, #228]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007f48:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4e:	e01e      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f50:	4b34      	ldr	r3, [pc, #208]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f5c:	d106      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f64:	d102      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f66:	4b32      	ldr	r3, [pc, #200]	; (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007f68:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6a:	e010      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f6c:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f78:	d106      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f80:	d102      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f82:	4b2c      	ldr	r3, [pc, #176]	; (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34
 8007f86:	e002      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007f8c:	e003      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007f8e:	e002      	b.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f94:	bf00      	nop
          }
        }
        break;
 8007f96:	f001 bf70 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007f9a:	4b22      	ldr	r3, [pc, #136]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fac:	f107 0320 	add.w	r3, r7, #32
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe ffd9 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007fba:	f001 bf5e 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d108      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fc4:	f107 0314 	add.w	r3, r7, #20
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff f937 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fd2:	f001 bf52 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fda:	f001 bf4e 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fe0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d108      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ff0:	f107 0320 	add.w	r3, r7, #32
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe ffb7 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ffe:	f001 bf3c 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	2b80      	cmp	r3, #128	; 0x80
 8008006:	d108      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008008:	f107 0314 	add.w	r3, r7, #20
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff f915 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008016:	f001 bf30 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800801e:	f001 bf2c 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008022:	bf00      	nop
 8008024:	44020c00 	.word	0x44020c00
 8008028:	00bb8000 	.word	0x00bb8000
 800802c:	03d09000 	.word	0x03d09000
 8008030:	003d0900 	.word	0x003d0900
 8008034:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008038:	4b9d      	ldr	r3, [pc, #628]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800803a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	2b00      	cmp	r3, #0
 8008048:	d104      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800804a:	f7fc ffd7 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 800804e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008050:	f001 bf13 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008054:	4b96      	ldr	r3, [pc, #600]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800805c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008060:	d10a      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	d107      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008068:	f107 0314 	add.w	r3, r7, #20
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff f8e5 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
 8008076:	e043      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008078:	4b8d      	ldr	r3, [pc, #564]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008084:	d10a      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b02      	cmp	r3, #2
 800808a:	d107      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800808c:	f107 0308 	add.w	r3, r7, #8
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fa3d 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
 800809a:	e031      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800809c:	4b84      	ldr	r3, [pc, #528]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d10c      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d109      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080ae:	4b80      	ldr	r3, [pc, #512]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	08db      	lsrs	r3, r3, #3
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	4a7e      	ldr	r2, [pc, #504]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80080ba:	fa22 f303 	lsr.w	r3, r2, r3
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
 80080c0:	e01e      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80080c2:	4b7b      	ldr	r3, [pc, #492]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ce:	d105      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d102      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80080d6:	4b78      	ldr	r3, [pc, #480]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
 80080da:	e011      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80080dc:	4b74      	ldr	r3, [pc, #464]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d106      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	2b05      	cmp	r3, #5
 80080ee:	d103      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80080f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
 80080f6:	e003      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080fc:	f001 bebd 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008100:	f001 bebb 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008104:	4b6a      	ldr	r3, [pc, #424]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800810a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800810e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008116:	f7fc ff5b 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 800811a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800811c:	f001 bead 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008120:	4b63      	ldr	r3, [pc, #396]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800812c:	d10a      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	2b08      	cmp	r3, #8
 8008132:	d107      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff f87f 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
 8008142:	e03d      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	2b10      	cmp	r3, #16
 8008148:	d108      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814a:	f107 0308 	add.w	r3, r7, #8
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff f9de 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008158:	f001 be8f 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800815c:	4b54      	ldr	r3, [pc, #336]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b02      	cmp	r3, #2
 8008166:	d10c      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	2b18      	cmp	r3, #24
 800816c:	d109      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800816e:	4b50      	ldr	r3, [pc, #320]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	08db      	lsrs	r3, r3, #3
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	4a4e      	ldr	r2, [pc, #312]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800817a:	fa22 f303 	lsr.w	r3, r2, r3
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
 8008180:	e01e      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008182:	4b4b      	ldr	r3, [pc, #300]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800818a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818e:	d105      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	2b20      	cmp	r3, #32
 8008194:	d102      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8008196:	4b48      	ldr	r3, [pc, #288]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
 800819a:	e011      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800819c:	4b44      	ldr	r3, [pc, #272]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800819e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d106      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	2b28      	cmp	r3, #40	; 0x28
 80081ae:	d103      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80081b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
 80081b6:	e003      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081bc:	f001 be5d 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081c0:	f001 be5b 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80081c4:	4b3a      	ldr	r3, [pc, #232]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80081ca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80081ce:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081d6:	f7fc fefb 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80081da:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80081dc:	f001 be4d 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80081e0:	4b33      	ldr	r3, [pc, #204]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081ec:	d10a      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d107      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f4:	f107 0314 	add.w	r3, r7, #20
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff f81f 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
 8008202:	e045      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008204:	4b2a      	ldr	r3, [pc, #168]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800820c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008210:	d10a      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	2b80      	cmp	r3, #128	; 0x80
 8008216:	d107      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008218:	f107 0308 	add.w	r3, r7, #8
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff f977 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
 8008226:	e033      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008228:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b02      	cmp	r3, #2
 8008232:	d10c      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	2bc0      	cmp	r3, #192	; 0xc0
 8008238:	d109      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800823a:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	4a1b      	ldr	r2, [pc, #108]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008246:	fa22 f303 	lsr.w	r3, r2, r3
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
 800824c:	e020      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800824e:	4b18      	ldr	r3, [pc, #96]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825a:	d106      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d102      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008264:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008266:	637b      	str	r3, [r7, #52]	; 0x34
 8008268:	e012      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800826c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b02      	cmp	r3, #2
 8008276:	d107      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800827e:	d103      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
 8008286:	e003      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828c:	f001 bdf5 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008290:	f001 bdf3 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800829a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800829e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082a6:	f7fc fe93 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80082aa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80082ac:	f001 bde5 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082b0:	44020c00 	.word	0x44020c00
 80082b4:	03d09000 	.word	0x03d09000
 80082b8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80082bc:	4ba0      	ldr	r3, [pc, #640]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082c8:	d10b      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d0:	d107      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082d2:	f107 0314 	add.w	r3, r7, #20
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe ffb0 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
 80082e0:	e047      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80082e2:	4b97      	ldr	r3, [pc, #604]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ee:	d10b      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f6:	d107      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f8:	f107 0308 	add.w	r3, r7, #8
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff f907 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	637b      	str	r3, [r7, #52]	; 0x34
 8008306:	e034      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008308:	4b8d      	ldr	r3, [pc, #564]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b02      	cmp	r3, #2
 8008312:	d10d      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800831a:	d109      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800831c:	4b88      	ldr	r3, [pc, #544]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	08db      	lsrs	r3, r3, #3
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	4a87      	ldr	r2, [pc, #540]	; (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	637b      	str	r3, [r7, #52]	; 0x34
 800832e:	e020      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008330:	4b83      	ldr	r3, [pc, #524]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833c:	d106      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008344:	d102      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008346:	4b80      	ldr	r3, [pc, #512]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008348:	637b      	str	r3, [r7, #52]	; 0x34
 800834a:	e012      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800834c:	4b7c      	ldr	r3, [pc, #496]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800834e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b02      	cmp	r3, #2
 8008358:	d107      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008360:	d103      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008366:	637b      	str	r3, [r7, #52]	; 0x34
 8008368:	e003      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800836e:	f001 bd84 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008372:	f001 bd82 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008376:	4b72      	ldr	r3, [pc, #456]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800837c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008380:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008388:	f7fc fe22 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 800838c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800838e:	f001 bd74 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008392:	4b6b      	ldr	r3, [pc, #428]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800839a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800839e:	d10b      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a6:	d107      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a8:	f107 0314 	add.w	r3, r7, #20
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe ff45 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	637b      	str	r3, [r7, #52]	; 0x34
 80083b6:	e047      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80083b8:	4b61      	ldr	r3, [pc, #388]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c4:	d10b      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083cc:	d107      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ce:	f107 0308 	add.w	r3, r7, #8
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff f89c 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	637b      	str	r3, [r7, #52]	; 0x34
 80083dc:	e034      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80083de:	4b58      	ldr	r3, [pc, #352]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d10d      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083f0:	d109      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083f2:	4b53      	ldr	r3, [pc, #332]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	4a51      	ldr	r2, [pc, #324]	; (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80083fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
 8008404:	e020      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008406:	4b4e      	ldr	r3, [pc, #312]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800840e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008412:	d106      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800841a:	d102      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800841c:	4b4a      	ldr	r3, [pc, #296]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
 8008420:	e012      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008422:	4b47      	ldr	r3, [pc, #284]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b02      	cmp	r3, #2
 800842e:	d107      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008436:	d103      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843c:	637b      	str	r3, [r7, #52]	; 0x34
 800843e:	e003      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008444:	f001 bd19 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008448:	f001 bd17 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800844c:	4b3c      	ldr	r3, [pc, #240]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800844e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008452:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008456:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	2b00      	cmp	r3, #0
 800845c:	d104      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800845e:	f7fc fdb7 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8008462:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008464:	f001 bd09 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008468:	4b35      	ldr	r3, [pc, #212]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008474:	d10b      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800847c:	d107      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800847e:	f107 0314 	add.w	r3, r7, #20
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe feda 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
 800848c:	e047      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800848e:	4b2c      	ldr	r3, [pc, #176]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849a:	d10b      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a2:	d107      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff f831 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	637b      	str	r3, [r7, #52]	; 0x34
 80084b2:	e034      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80084b4:	4b22      	ldr	r3, [pc, #136]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d10d      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80084c6:	d109      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084c8:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	08db      	lsrs	r3, r3, #3
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	4a1c      	ldr	r2, [pc, #112]	; (8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
 80084da:	e020      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80084dc:	4b18      	ldr	r3, [pc, #96]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084e8:	d106      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f0:	d102      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
 80084f6:	e012      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80084f8:	4b11      	ldr	r3, [pc, #68]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b02      	cmp	r3, #2
 8008504:	d107      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800850c:	d103      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800850e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008512:	637b      	str	r3, [r7, #52]	; 0x34
 8008514:	e003      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800851a:	f001 bcae 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800851e:	f001 bcac 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008522:	4b07      	ldr	r3, [pc, #28]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008528:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800852c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008534:	f7fc fd4c 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8008538:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800853a:	f001 bc9e 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800853e:	bf00      	nop
 8008540:	44020c00 	.word	0x44020c00
 8008544:	03d09000 	.word	0x03d09000
 8008548:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800854c:	4ba0      	ldr	r3, [pc, #640]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008558:	d10b      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008560:	d107      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008562:	f107 0314 	add.w	r3, r7, #20
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fe68 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	637b      	str	r3, [r7, #52]	; 0x34
 8008570:	e047      	b.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008572:	4b97      	ldr	r3, [pc, #604]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800857a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857e:	d10b      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008586:	d107      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008588:	f107 0308 	add.w	r3, r7, #8
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe ffbf 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	637b      	str	r3, [r7, #52]	; 0x34
 8008596:	e034      	b.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008598:	4b8d      	ldr	r3, [pc, #564]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0302 	and.w	r3, r3, #2
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d10d      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085aa:	d109      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085ac:	4b88      	ldr	r3, [pc, #544]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	08db      	lsrs	r3, r3, #3
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	4a87      	ldr	r2, [pc, #540]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
 80085be:	e020      	b.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80085c0:	4b83      	ldr	r3, [pc, #524]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085cc:	d106      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085d4:	d102      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80085d6:	4b80      	ldr	r3, [pc, #512]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80085d8:	637b      	str	r3, [r7, #52]	; 0x34
 80085da:	e012      	b.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80085dc:	4b7c      	ldr	r3, [pc, #496]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d107      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80085f0:	d103      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80085f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
 80085f8:	e003      	b.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085fe:	f001 bc3c 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008602:	f001 bc3a 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008606:	4b72      	ldr	r3, [pc, #456]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800860c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008610:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008618:	f7fc fcda 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 800861c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800861e:	f001 bc2c 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008622:	4b6b      	ldr	r3, [pc, #428]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800862a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800862e:	d10b      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008636:	d107      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008638:	f107 0314 	add.w	r3, r7, #20
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe fdfd 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
 8008646:	e047      	b.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008648:	4b61      	ldr	r3, [pc, #388]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008654:	d10b      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800865c:	d107      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe ff54 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	637b      	str	r3, [r7, #52]	; 0x34
 800866c:	e034      	b.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800866e:	4b58      	ldr	r3, [pc, #352]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b02      	cmp	r3, #2
 8008678:	d10d      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008680:	d109      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008682:	4b53      	ldr	r3, [pc, #332]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	4a51      	ldr	r2, [pc, #324]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800868e:	fa22 f303 	lsr.w	r3, r2, r3
 8008692:	637b      	str	r3, [r7, #52]	; 0x34
 8008694:	e020      	b.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008696:	4b4e      	ldr	r3, [pc, #312]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800869e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086a2:	d106      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086aa:	d102      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80086ac:	4b4a      	ldr	r3, [pc, #296]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
 80086b0:	e012      	b.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80086b2:	4b47      	ldr	r3, [pc, #284]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086b8:	f003 0302 	and.w	r3, r3, #2
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d107      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80086c6:	d103      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80086c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
 80086ce:	e003      	b.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086d4:	f001 bbd1 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086d8:	f001 bbcf 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80086dc:	4b3c      	ldr	r3, [pc, #240]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086ee:	f7fc fc6f 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80086f2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80086f4:	f001 bbc1 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80086f8:	4b35      	ldr	r3, [pc, #212]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008704:	d10b      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800870c:	d107      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870e:	f107 0314 	add.w	r3, r7, #20
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fd92 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
 800871c:	e047      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800871e:	4b2c      	ldr	r3, [pc, #176]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800872a:	d10b      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008732:	d107      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008734:	f107 0308 	add.w	r3, r7, #8
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe fee9 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
 8008742:	e034      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008744:	4b22      	ldr	r3, [pc, #136]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b02      	cmp	r3, #2
 800874e:	d10d      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008756:	d109      	bne.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008758:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	08db      	lsrs	r3, r3, #3
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	4a1c      	ldr	r2, [pc, #112]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008764:	fa22 f303 	lsr.w	r3, r2, r3
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
 800876a:	e020      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800876c:	4b18      	ldr	r3, [pc, #96]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008778:	d106      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008780:	d102      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
 8008786:	e012      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008788:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800878a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b02      	cmp	r3, #2
 8008794:	d107      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800879c:	d103      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800879e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a2:	637b      	str	r3, [r7, #52]	; 0x34
 80087a4:	e003      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087aa:	f001 bb66 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087ae:	f001 bb64 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087b8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80087bc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10b      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087c4:	f7fc fc04 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80087c8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80087ca:	f001 bb56 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087ce:	bf00      	nop
 80087d0:	44020c00 	.word	0x44020c00
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80087dc:	4ba1      	ldr	r3, [pc, #644]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087e8:	d10b      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087f0:	d107      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f2:	f107 0314 	add.w	r3, r7, #20
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fd20 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008800:	e047      	b.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008802:	4b98      	ldr	r3, [pc, #608]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800880a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880e:	d10b      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008816:	d107      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008818:	f107 0308 	add.w	r3, r7, #8
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fe77 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
 8008826:	e034      	b.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008828:	4b8e      	ldr	r3, [pc, #568]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b02      	cmp	r3, #2
 8008832:	d10d      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800883a:	d109      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800883c:	4b89      	ldr	r3, [pc, #548]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	08db      	lsrs	r3, r3, #3
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	4a88      	ldr	r2, [pc, #544]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008848:	fa22 f303 	lsr.w	r3, r2, r3
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
 800884e:	e020      	b.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008850:	4b84      	ldr	r3, [pc, #528]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885c:	d106      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008864:	d102      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008866:	4b81      	ldr	r3, [pc, #516]	; (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
 800886a:	e012      	b.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800886c:	4b7d      	ldr	r3, [pc, #500]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800886e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b02      	cmp	r3, #2
 8008878:	d107      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008880:	d103      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
 8008888:	e003      	b.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800888e:	f001 baf4 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008892:	f001 baf2 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008896:	4b73      	ldr	r3, [pc, #460]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008898:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d104      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088a8:	f7fc fb92 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80088ac:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80088ae:	f001 bae4 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80088b2:	4b6c      	ldr	r3, [pc, #432]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088be:	d10a      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d107      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c6:	f107 0314 	add.w	r3, r7, #20
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fe fcb6 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
 80088d4:	e043      	b.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80088d6:	4b63      	ldr	r3, [pc, #396]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e2:	d10a      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d107      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ea:	f107 0308 	add.w	r3, r7, #8
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fe0e 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	637b      	str	r3, [r7, #52]	; 0x34
 80088f8:	e031      	b.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80088fa:	4b5a      	ldr	r3, [pc, #360]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b02      	cmp	r3, #2
 8008904:	d10c      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	2b03      	cmp	r3, #3
 800890a:	d109      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800890c:	4b55      	ldr	r3, [pc, #340]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	08db      	lsrs	r3, r3, #3
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	4a54      	ldr	r2, [pc, #336]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
 800891e:	e01e      	b.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008920:	4b50      	ldr	r3, [pc, #320]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800892c:	d105      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	2b04      	cmp	r3, #4
 8008932:	d102      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008934:	4b4d      	ldr	r3, [pc, #308]	; (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
 8008938:	e011      	b.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800893a:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800893c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b02      	cmp	r3, #2
 8008946:	d106      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	2b05      	cmp	r3, #5
 800894c:	d103      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800894e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008952:	637b      	str	r3, [r7, #52]	; 0x34
 8008954:	e003      	b.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800895a:	f001 ba8e 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800895e:	f001 ba8c 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008962:	4b40      	ldr	r3, [pc, #256]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008964:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800896c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008974:	f7fc fb2c 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8008978:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800897a:	f001 ba7e 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800897e:	4b39      	ldr	r3, [pc, #228]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800898a:	d10a      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2b10      	cmp	r3, #16
 8008990:	d107      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008992:	f107 0314 	add.w	r3, r7, #20
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fc50 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	637b      	str	r3, [r7, #52]	; 0x34
 80089a0:	e043      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80089a2:	4b30      	ldr	r3, [pc, #192]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ae:	d10a      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	d107      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe fda8 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
 80089c4:	e031      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80089c6:	4b27      	ldr	r3, [pc, #156]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d10c      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	2b30      	cmp	r3, #48	; 0x30
 80089d6:	d109      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089d8:	4b22      	ldr	r3, [pc, #136]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	08db      	lsrs	r3, r3, #3
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	4a21      	ldr	r2, [pc, #132]	; (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ea:	e01e      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80089ec:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f8:	d105      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	2b40      	cmp	r3, #64	; 0x40
 80089fe:	d102      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
 8008a04:	e011      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008a06:	4b17      	ldr	r3, [pc, #92]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d106      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	2b50      	cmp	r3, #80	; 0x50
 8008a18:	d103      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a20:	e003      	b.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a26:	f001 ba28 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a2a:	f001 ba26 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008a2e:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a34:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008a38:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008a40:	f7fc faf2 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8008a44:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a46:	f001 ba18 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a50:	d10e      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a52:	f107 0314 	add.w	r3, r7, #20
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fbf0 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a60:	f001 ba0b 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a64:	44020c00 	.word	0x44020c00
 8008a68:	03d09000 	.word	0x03d09000
 8008a6c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a76:	d108      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe fd47 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a86:	f001 b9f8 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008a8a:	4ba4      	ldr	r3, [pc, #656]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d10d      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a9c:	d109      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a9e:	4b9f      	ldr	r3, [pc, #636]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	08db      	lsrs	r3, r3, #3
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	4a9d      	ldr	r2, [pc, #628]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab0:	e020      	b.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008ab2:	4b9a      	ldr	r3, [pc, #616]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008abe:	d106      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac6:	d102      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008ac8:	4b96      	ldr	r3, [pc, #600]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
 8008acc:	e012      	b.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008ace:	4b93      	ldr	r3, [pc, #588]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d107      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ae2:	d103      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aea:	e003      	b.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008af0:	f001 b9c3 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008af4:	f001 b9c1 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008af8:	4b88      	ldr	r3, [pc, #544]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d104      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008b0a:	f7fc fa45 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8008b0e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008b10:	f001 b9b3 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d104      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b1a:	f7fc f911 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8008b1e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008b20:	f001 b9ab 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d108      	bne.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b2a:	f107 0314 	add.w	r3, r7, #20
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fb84 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b38:	f001 b99f 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008b3c:	4b77      	ldr	r3, [pc, #476]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b48:	d105      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008b50:	4b75      	ldr	r3, [pc, #468]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008b52:	637b      	str	r3, [r7, #52]	; 0x34
 8008b54:	e023      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008b56:	4b71      	ldr	r3, [pc, #452]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d10c      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d109      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b68:	4b6c      	ldr	r3, [pc, #432]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	08db      	lsrs	r3, r3, #3
 8008b6e:	f003 0303 	and.w	r3, r3, #3
 8008b72:	4a6b      	ldr	r2, [pc, #428]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008b74:	fa22 f303 	lsr.w	r3, r2, r3
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7a:	e010      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008b7c:	4b67      	ldr	r3, [pc, #412]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b88:	d105      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	d102      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008b90:	4b64      	ldr	r3, [pc, #400]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008b92:	637b      	str	r3, [r7, #52]	; 0x34
 8008b94:	e003      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b9a:	f001 b96e 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b9e:	f001 b96c 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008ba2:	4b5e      	ldr	r3, [pc, #376]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008bae:	4b5b      	ldr	r3, [pc, #364]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d106      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc8:	e012      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008bca:	4b54      	ldr	r3, [pc, #336]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bd8:	d106      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d103      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008be0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
 8008be6:	e003      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008bec:	f001 b945 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bf0:	f001 b943 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008bf4:	4b49      	ldr	r3, [pc, #292]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bfe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c06:	f7fc f9e3 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8008c0a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c0c:	f001 b935 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c16:	d108      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c18:	f107 0308 	add.w	r3, r7, #8
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fc77 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c26:	f001 b928 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008c2a:	4b3c      	ldr	r3, [pc, #240]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d10d      	bne.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c3c:	d109      	bne.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c3e:	4b37      	ldr	r3, [pc, #220]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	08db      	lsrs	r3, r3, #3
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	4a35      	ldr	r2, [pc, #212]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c50:	e011      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008c52:	4b32      	ldr	r3, [pc, #200]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c5e:	d106      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c66:	d102      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008c68:	4b2e      	ldr	r3, [pc, #184]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c6c:	e003      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c72:	f001 b902 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c76:	f001 b900 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008c7a:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008c84:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c8c:	f7fc f9a0 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8008c90:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c92:	f001 b8f2 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c9c:	d108      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9e:	f107 0308 	add.w	r3, r7, #8
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fc34 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cac:	f001 b8e5 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d10d      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008cc2:	d109      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cc4:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	08db      	lsrs	r3, r3, #3
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	4a14      	ldr	r2, [pc, #80]	; (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd6:	e011      	b.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008cd8:	4b10      	ldr	r3, [pc, #64]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ce4:	d106      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008cec:	d102      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008cee:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf2:	e003      	b.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cf8:	f001 b8bf 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cfc:	f001 b8bd 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008d0a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10c      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008d12:	f7fc f989 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8008d16:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d18:	f001 b8af 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d1c:	44020c00 	.word	0x44020c00
 8008d20:	03d09000 	.word	0x03d09000
 8008d24:	003d0900 	.word	0x003d0900
 8008d28:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d32:	d108      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d34:	f107 0308 	add.w	r3, r7, #8
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe fbe9 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d42:	f001 b89a 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008d46:	4b9f      	ldr	r3, [pc, #636]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d10d      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d58:	d109      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d5a:	4b9a      	ldr	r3, [pc, #616]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	08db      	lsrs	r3, r3, #3
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	4a98      	ldr	r2, [pc, #608]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008d66:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6c:	e011      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008d6e:	4b95      	ldr	r3, [pc, #596]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d7a:	d106      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d82:	d102      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008d84:	4b91      	ldr	r3, [pc, #580]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008d86:	637b      	str	r3, [r7, #52]	; 0x34
 8008d88:	e003      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d8e:	f001 b874 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d92:	f001 b872 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008d96:	4b8b      	ldr	r3, [pc, #556]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d9c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008da0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008da8:	f7fc f93e 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8008dac:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008dae:	f001 b864 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db8:	d108      	bne.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dba:	f107 0308 	add.w	r3, r7, #8
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fba6 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008dc8:	f001 b857 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008dcc:	4b7d      	ldr	r3, [pc, #500]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d10d      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dde:	d109      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008de0:	4b78      	ldr	r3, [pc, #480]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	08db      	lsrs	r3, r3, #3
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	4a77      	ldr	r2, [pc, #476]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
 8008df2:	e011      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008df4:	4b73      	ldr	r3, [pc, #460]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e00:	d106      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e08:	d102      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008e0a:	4b70      	ldr	r3, [pc, #448]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0e:	e003      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e14:	f001 b831 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e18:	f001 b82f 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008e1c:	4b69      	ldr	r3, [pc, #420]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e22:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008e26:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d104      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e2e:	f7fc f8cf 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8008e32:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e34:	f001 b821 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e3e:	d108      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fb63 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e4e:	f001 b814 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008e52:	4b5c      	ldr	r3, [pc, #368]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d10e      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e64:	d10a      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e66:	4b57      	ldr	r3, [pc, #348]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	08db      	lsrs	r3, r3, #3
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	4a55      	ldr	r2, [pc, #340]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008e72:	fa22 f303 	lsr.w	r3, r2, r3
 8008e76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e78:	f000 bfff 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e80:	f000 bffb 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e84:	4b4f      	ldr	r3, [pc, #316]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008e96:	d056      	beq.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008e9e:	f200 808b 	bhi.w	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea8:	d03e      	beq.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb0:	f200 8082 	bhi.w	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eba:	d027      	beq.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ec2:	d879      	bhi.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eca:	d017      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed2:	d871      	bhi.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d004      	beq.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee0:	d004      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008ee2:	e069      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008ee4:	f7fc f8a0 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8008ee8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008eea:	e068      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eec:	f107 0314 	add.w	r3, r7, #20
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fe f9a3 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008efa:	e060      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008efc:	f107 0308 	add.w	r3, r7, #8
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fb05 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f0a:	e058      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f0c:	4b2d      	ldr	r3, [pc, #180]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d103      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f20:	e04d      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f26:	e04a      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f28:	4b26      	ldr	r3, [pc, #152]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f36:	d103      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008f38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008f3c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f3e:	e03e      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f44:	e03b      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f46:	4b1f      	ldr	r3, [pc, #124]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008f4c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008f50:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f52:	4b1c      	ldr	r3, [pc, #112]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d10c      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f64:	4b17      	ldr	r3, [pc, #92]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	08db      	lsrs	r3, r3, #3
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	4a16      	ldr	r2, [pc, #88]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	637b      	str	r3, [r7, #52]	; 0x34
 8008f76:	e01e      	b.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f78:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f84:	d106      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
 8008f92:	e010      	b.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f94:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fa0:	d106      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fa8:	d102      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
 8008fae:	e002      	b.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008fb4:	e003      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008fb6:	e002      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008fbc:	bf00      	nop
          }
        }
        break;
 8008fbe:	f000 bf5c 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fc2:	bf00      	nop
 8008fc4:	44020c00 	.word	0x44020c00
 8008fc8:	03d09000 	.word	0x03d09000
 8008fcc:	003d0900 	.word	0x003d0900
 8008fd0:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008fd4:	4b9e      	ldr	r3, [pc, #632]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008fda:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008fde:	633b      	str	r3, [r7, #48]	; 0x30
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008fe6:	d056      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008fee:	f200 808b 	bhi.w	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ff8:	d03e      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009000:	f200 8082 	bhi.w	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800900a:	d027      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009012:	d879      	bhi.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800901a:	d017      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009022:	d871      	bhi.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	2b00      	cmp	r3, #0
 8009028:	d004      	beq.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009030:	d004      	beq.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8009032:	e069      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009034:	f7fb ffcc 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8009038:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800903a:	e068      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800903c:	f107 0314 	add.w	r3, r7, #20
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe f8fb 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800904a:	e060      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800904c:	f107 0308 	add.w	r3, r7, #8
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe fa5d 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800905a:	e058      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800905c:	4b7c      	ldr	r3, [pc, #496]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800905e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b02      	cmp	r3, #2
 8009068:	d103      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800906a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800906e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009070:	e04d      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009076:	e04a      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009078:	4b75      	ldr	r3, [pc, #468]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800907a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800907e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009086:	d103      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009088:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800908e:	e03e      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009094:	e03b      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009096:	4b6e      	ldr	r3, [pc, #440]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800909c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090a2:	4b6b      	ldr	r3, [pc, #428]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d10c      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d109      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090b4:	4b66      	ldr	r3, [pc, #408]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	4a65      	ldr	r2, [pc, #404]	; (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
 80090c6:	e01e      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090c8:	4b61      	ldr	r3, [pc, #388]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d4:	d106      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090dc:	d102      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090de:	4b5e      	ldr	r3, [pc, #376]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80090e0:	637b      	str	r3, [r7, #52]	; 0x34
 80090e2:	e010      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e4:	4b5a      	ldr	r3, [pc, #360]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f0:	d106      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f8:	d102      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090fa:	4b58      	ldr	r3, [pc, #352]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80090fc:	637b      	str	r3, [r7, #52]	; 0x34
 80090fe:	e002      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009104:	e003      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009106:	e002      	b.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800910c:	bf00      	nop
          }
        }
        break;
 800910e:	f000 beb4 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009112:	4b4f      	ldr	r3, [pc, #316]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009114:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009118:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800911c:	633b      	str	r3, [r7, #48]	; 0x30
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009124:	d056      	beq.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800912c:	f200 808b 	bhi.w	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009136:	d03e      	beq.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800913e:	f200 8082 	bhi.w	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009148:	d027      	beq.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009150:	d879      	bhi.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009158:	d017      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009160:	d871      	bhi.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	2b00      	cmp	r3, #0
 8009166:	d004      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916e:	d004      	beq.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009170:	e069      	b.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009172:	f7fb ff59 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8009176:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009178:	e068      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917a:	f107 0314 	add.w	r3, r7, #20
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe f85c 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009188:	e060      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe f9be 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009198:	e058      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800919a:	4b2d      	ldr	r3, [pc, #180]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800919c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d103      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80091a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091ae:	e04d      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80091b4:	e04a      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80091b6:	4b26      	ldr	r3, [pc, #152]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c4:	d103      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80091c6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091cc:	e03e      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80091d2:	e03b      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091d4:	4b1e      	ldr	r3, [pc, #120]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80091da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091e0:	4b1b      	ldr	r3, [pc, #108]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d10c      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091f2:	4b17      	ldr	r3, [pc, #92]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	08db      	lsrs	r3, r3, #3
 80091f8:	f003 0303 	and.w	r3, r3, #3
 80091fc:	4a15      	ldr	r2, [pc, #84]	; (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80091fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
 8009204:	e01e      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009206:	4b12      	ldr	r3, [pc, #72]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800920e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009212:	d106      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921a:	d102      	bne.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800921c:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800921e:	637b      	str	r3, [r7, #52]	; 0x34
 8009220:	e010      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009222:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800922a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800922e:	d106      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009236:	d102      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009238:	4b08      	ldr	r3, [pc, #32]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
 800923c:	e002      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009242:	e003      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009244:	e002      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800924a:	bf00      	nop
          }
        }
        break;
 800924c:	f000 be15 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009250:	44020c00 	.word	0x44020c00
 8009254:	03d09000 	.word	0x03d09000
 8009258:	003d0900 	.word	0x003d0900
 800925c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009260:	4b9e      	ldr	r3, [pc, #632]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009262:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009266:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800926a:	633b      	str	r3, [r7, #48]	; 0x30
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009272:	d056      	beq.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800927a:	f200 808b 	bhi.w	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009284:	d03e      	beq.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800928c:	f200 8082 	bhi.w	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009296:	d027      	beq.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800929e:	d879      	bhi.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092a6:	d017      	beq.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092ae:	d871      	bhi.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d004      	beq.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092bc:	d004      	beq.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80092be:	e069      	b.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80092c0:	f7fb feb2 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 80092c4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80092c6:	e068      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fd ffb5 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80092d6:	e060      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d8:	f107 0308 	add.w	r3, r7, #8
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe f917 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80092e6:	e058      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092e8:	4b7c      	ldr	r3, [pc, #496]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d103      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80092f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092fa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092fc:	e04d      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009302:	e04a      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009304:	4b75      	ldr	r3, [pc, #468]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800930a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800930e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009312:	d103      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009314:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800931a:	e03e      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009320:	e03b      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009322:	4b6e      	ldr	r3, [pc, #440]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009328:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800932c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800932e:	4b6b      	ldr	r3, [pc, #428]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b02      	cmp	r3, #2
 8009338:	d10c      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d109      	bne.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009340:	4b66      	ldr	r3, [pc, #408]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	08db      	lsrs	r3, r3, #3
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	4a65      	ldr	r2, [pc, #404]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800934c:	fa22 f303 	lsr.w	r3, r2, r3
 8009350:	637b      	str	r3, [r7, #52]	; 0x34
 8009352:	e01e      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009354:	4b61      	ldr	r3, [pc, #388]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800935c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009360:	d106      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009368:	d102      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800936a:	4b5e      	ldr	r3, [pc, #376]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
 800936e:	e010      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009370:	4b5a      	ldr	r3, [pc, #360]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800937c:	d106      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009384:	d102      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009386:	4b58      	ldr	r3, [pc, #352]	; (80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
 800938a:	e002      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009390:	e003      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009392:	e002      	b.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009398:	bf00      	nop
          }
        }
        break;
 800939a:	f000 bd6e 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800939e:	4b4f      	ldr	r3, [pc, #316]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80093a4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80093a8:	633b      	str	r3, [r7, #48]	; 0x30
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80093b0:	d056      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80093b8:	f200 808b 	bhi.w	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093c2:	d03e      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093ca:	f200 8082 	bhi.w	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093d4:	d027      	beq.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093dc:	d879      	bhi.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093e4:	d017      	beq.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ec:	d871      	bhi.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093fa:	d004      	beq.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80093fc:	e069      	b.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80093fe:	f7fb fe13 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8009402:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009404:	e068      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009406:	f107 0314 	add.w	r3, r7, #20
 800940a:	4618      	mov	r0, r3
 800940c:	f7fd ff16 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009414:	e060      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe f878 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009424:	e058      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009426:	4b2d      	ldr	r3, [pc, #180]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b02      	cmp	r3, #2
 8009432:	d103      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009438:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800943a:	e04d      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009440:	e04a      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009442:	4b26      	ldr	r3, [pc, #152]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800944c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009450:	d103      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009452:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009456:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009458:	e03e      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800945e:	e03b      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009460:	4b1e      	ldr	r3, [pc, #120]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009466:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800946a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800946c:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b02      	cmp	r3, #2
 8009476:	d10c      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800947e:	4b17      	ldr	r3, [pc, #92]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	08db      	lsrs	r3, r3, #3
 8009484:	f003 0303 	and.w	r3, r3, #3
 8009488:	4a15      	ldr	r2, [pc, #84]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800948a:	fa22 f303 	lsr.w	r3, r2, r3
 800948e:	637b      	str	r3, [r7, #52]	; 0x34
 8009490:	e01e      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800949a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800949e:	d106      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a6:	d102      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80094a8:	4b0e      	ldr	r3, [pc, #56]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80094aa:	637b      	str	r3, [r7, #52]	; 0x34
 80094ac:	e010      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094ae:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094ba:	d106      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80094bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094c2:	d102      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094c4:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80094c6:	637b      	str	r3, [r7, #52]	; 0x34
 80094c8:	e002      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80094ce:	e003      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80094d0:	e002      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80094d6:	bf00      	nop
          }
        }
        break;
 80094d8:	f000 bccf 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094dc:	44020c00 	.word	0x44020c00
 80094e0:	03d09000 	.word	0x03d09000
 80094e4:	003d0900 	.word	0x003d0900
 80094e8:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80094ec:	4b9e      	ldr	r3, [pc, #632]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80094f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80094f6:	633b      	str	r3, [r7, #48]	; 0x30
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094fe:	d056      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009506:	f200 808b 	bhi.w	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009510:	d03e      	beq.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009518:	f200 8082 	bhi.w	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800951c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009522:	d027      	beq.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800952a:	d879      	bhi.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009532:	d017      	beq.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800953a:	d871      	bhi.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	2b00      	cmp	r3, #0
 8009540:	d004      	beq.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009548:	d004      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800954a:	e069      	b.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800954c:	f7fb fd6c 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8009550:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009552:	e068      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009554:	f107 0314 	add.w	r3, r7, #20
 8009558:	4618      	mov	r0, r3
 800955a:	f7fd fe6f 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009562:	e060      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009564:	f107 0308 	add.w	r3, r7, #8
 8009568:	4618      	mov	r0, r3
 800956a:	f7fd ffd1 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009572:	e058      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009574:	4b7c      	ldr	r3, [pc, #496]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b02      	cmp	r3, #2
 8009580:	d103      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009586:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009588:	e04d      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800958e:	e04a      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009590:	4b75      	ldr	r3, [pc, #468]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800959a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800959e:	d103      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80095a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095a6:	e03e      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80095ac:	e03b      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095ae:	4b6e      	ldr	r3, [pc, #440]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80095b8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095ba:	4b6b      	ldr	r3, [pc, #428]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d10c      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095cc:	4b66      	ldr	r3, [pc, #408]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	08db      	lsrs	r3, r3, #3
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	4a65      	ldr	r2, [pc, #404]	; (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80095d8:	fa22 f303 	lsr.w	r3, r2, r3
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
 80095de:	e01e      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095e0:	4b61      	ldr	r3, [pc, #388]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ec:	d106      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f4:	d102      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80095f6:	4b5e      	ldr	r3, [pc, #376]	; (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80095f8:	637b      	str	r3, [r7, #52]	; 0x34
 80095fa:	e010      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095fc:	4b5a      	ldr	r3, [pc, #360]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009608:	d106      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009610:	d102      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009612:	4b58      	ldr	r3, [pc, #352]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
 8009616:	e002      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800961c:	e003      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800961e:	e002      	b.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009624:	bf00      	nop
          }
        }
        break;
 8009626:	f000 bc28 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800962a:	4b4f      	ldr	r3, [pc, #316]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800962c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009634:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009636:	4b4c      	ldr	r3, [pc, #304]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800963e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009642:	d106      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	2b00      	cmp	r3, #0
 8009648:	d103      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800964a:	4b4a      	ldr	r3, [pc, #296]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800964e:	f000 bc14 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009658:	d108      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800965a:	f107 0320 	add.w	r3, r7, #32
 800965e:	4618      	mov	r0, r3
 8009660:	f7fd fc82 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009668:	f000 bc07 	b.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009672:	d107      	bne.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009674:	f107 0314 	add.w	r3, r7, #20
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd fddf 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009682:	e3fa      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009688:	e3f7      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800968a:	4b37      	ldr	r3, [pc, #220]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800968c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009690:	f003 0307 	and.w	r3, r3, #7
 8009694:	633b      	str	r3, [r7, #48]	; 0x30
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	2b04      	cmp	r3, #4
 800969a:	d861      	bhi.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096b9 	.word	0x080096b9
 80096a8:	080096c9 	.word	0x080096c9
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	080096e9 	.word	0x080096e9
 80096b4:	080096ef 	.word	0x080096ef
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096b8:	f107 0320 	add.w	r3, r7, #32
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fd fc53 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80096c6:	e04e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096c8:	f107 0314 	add.w	r3, r7, #20
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fd fdb5 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80096d6:	e046      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d8:	f107 0308 	add.w	r3, r7, #8
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fd ff17 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80096e6:	e03e      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80096e8:	4b23      	ldr	r3, [pc, #140]	; (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80096ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80096ec:	e03b      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096ee:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80096f8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096fa:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b02      	cmp	r3, #2
 8009704:	d10c      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	08db      	lsrs	r3, r3, #3
 8009712:	f003 0303 	and.w	r3, r3, #3
 8009716:	4a15      	ldr	r2, [pc, #84]	; (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
 800971e:	e01e      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009720:	4b11      	ldr	r3, [pc, #68]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800972c:	d106      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009734:	d102      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009736:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009738:	637b      	str	r3, [r7, #52]	; 0x34
 800973a:	e010      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800973c:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009748:	d106      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009750:	d102      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009752:	4b08      	ldr	r3, [pc, #32]	; (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
 8009756:	e002      	b.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800975c:	e003      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009764:	bf00      	nop
          }
        }
        break;
 8009766:	e388      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009768:	44020c00 	.word	0x44020c00
 800976c:	03d09000 	.word	0x03d09000
 8009770:	003d0900 	.word	0x003d0900
 8009774:	007a1200 	.word	0x007a1200
 8009778:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800977c:	4ba9      	ldr	r3, [pc, #676]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800977e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009786:	633b      	str	r3, [r7, #48]	; 0x30
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	2b20      	cmp	r3, #32
 800978c:	f200 809a 	bhi.w	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	0800981d 	.word	0x0800981d
 800979c:	080098c5 	.word	0x080098c5
 80097a0:	080098c5 	.word	0x080098c5
 80097a4:	080098c5 	.word	0x080098c5
 80097a8:	080098c5 	.word	0x080098c5
 80097ac:	080098c5 	.word	0x080098c5
 80097b0:	080098c5 	.word	0x080098c5
 80097b4:	080098c5 	.word	0x080098c5
 80097b8:	0800982d 	.word	0x0800982d
 80097bc:	080098c5 	.word	0x080098c5
 80097c0:	080098c5 	.word	0x080098c5
 80097c4:	080098c5 	.word	0x080098c5
 80097c8:	080098c5 	.word	0x080098c5
 80097cc:	080098c5 	.word	0x080098c5
 80097d0:	080098c5 	.word	0x080098c5
 80097d4:	080098c5 	.word	0x080098c5
 80097d8:	0800983d 	.word	0x0800983d
 80097dc:	080098c5 	.word	0x080098c5
 80097e0:	080098c5 	.word	0x080098c5
 80097e4:	080098c5 	.word	0x080098c5
 80097e8:	080098c5 	.word	0x080098c5
 80097ec:	080098c5 	.word	0x080098c5
 80097f0:	080098c5 	.word	0x080098c5
 80097f4:	080098c5 	.word	0x080098c5
 80097f8:	0800984d 	.word	0x0800984d
 80097fc:	080098c5 	.word	0x080098c5
 8009800:	080098c5 	.word	0x080098c5
 8009804:	080098c5 	.word	0x080098c5
 8009808:	080098c5 	.word	0x080098c5
 800980c:	080098c5 	.word	0x080098c5
 8009810:	080098c5 	.word	0x080098c5
 8009814:	080098c5 	.word	0x080098c5
 8009818:	08009853 	.word	0x08009853
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800981c:	f107 0320 	add.w	r3, r7, #32
 8009820:	4618      	mov	r0, r3
 8009822:	f7fd fba1 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800982a:	e04e      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800982c:	f107 0314 	add.w	r3, r7, #20
 8009830:	4618      	mov	r0, r3
 8009832:	f7fd fd03 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800983a:	e046      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	4618      	mov	r0, r3
 8009842:	f7fd fe65 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800984a:	e03e      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800984c:	4b76      	ldr	r3, [pc, #472]	; (8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800984e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009850:	e03b      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009852:	4b74      	ldr	r3, [pc, #464]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009858:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800985e:	4b71      	ldr	r3, [pc, #452]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b02      	cmp	r3, #2
 8009868:	d10c      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986c:	2b00      	cmp	r3, #0
 800986e:	d109      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009870:	4b6c      	ldr	r3, [pc, #432]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	08db      	lsrs	r3, r3, #3
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	4a6c      	ldr	r2, [pc, #432]	; (8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800987c:	fa22 f303 	lsr.w	r3, r2, r3
 8009880:	637b      	str	r3, [r7, #52]	; 0x34
 8009882:	e01e      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009884:	4b67      	ldr	r3, [pc, #412]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800988c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009890:	d106      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009898:	d102      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800989a:	4b65      	ldr	r3, [pc, #404]	; (8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800989c:	637b      	str	r3, [r7, #52]	; 0x34
 800989e:	e010      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098a0:	4b60      	ldr	r3, [pc, #384]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098ac:	d106      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098b4:	d102      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098b6:	4b5f      	ldr	r3, [pc, #380]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80098b8:	637b      	str	r3, [r7, #52]	; 0x34
 80098ba:	e002      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80098c0:	e003      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80098c2:	e002      	b.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098c8:	bf00      	nop
          }
        }
        break;
 80098ca:	e2d6      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80098cc:	4b55      	ldr	r3, [pc, #340]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80098d6:	633b      	str	r3, [r7, #48]	; 0x30
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098de:	d031      	beq.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098e6:	d866      	bhi.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	2bc0      	cmp	r3, #192	; 0xc0
 80098ec:	d027      	beq.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	2bc0      	cmp	r3, #192	; 0xc0
 80098f2:	d860      	bhi.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	2b80      	cmp	r3, #128	; 0x80
 80098f8:	d019      	beq.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fc:	2b80      	cmp	r3, #128	; 0x80
 80098fe:	d85a      	bhi.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	2b40      	cmp	r3, #64	; 0x40
 800990a:	d008      	beq.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800990c:	e053      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800990e:	f107 0320 	add.w	r3, r7, #32
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd fb28 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800991c:	e04e      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800991e:	f107 0314 	add.w	r3, r7, #20
 8009922:	4618      	mov	r0, r3
 8009924:	f7fd fc8a 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800992c:	e046      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800992e:	f107 0308 	add.w	r3, r7, #8
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd fdec 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800993c:	e03e      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800993e:	4b3a      	ldr	r3, [pc, #232]	; (8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009942:	e03b      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009944:	4b37      	ldr	r3, [pc, #220]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800994a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800994e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009950:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0302 	and.w	r3, r3, #2
 8009958:	2b02      	cmp	r3, #2
 800995a:	d10c      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009962:	4b30      	ldr	r3, [pc, #192]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	08db      	lsrs	r3, r3, #3
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	4a2f      	ldr	r2, [pc, #188]	; (8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800996e:	fa22 f303 	lsr.w	r3, r2, r3
 8009972:	637b      	str	r3, [r7, #52]	; 0x34
 8009974:	e01e      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009976:	4b2b      	ldr	r3, [pc, #172]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800997e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009982:	d106      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800998a:	d102      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800998c:	4b28      	ldr	r3, [pc, #160]	; (8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800998e:	637b      	str	r3, [r7, #52]	; 0x34
 8009990:	e010      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009992:	4b24      	ldr	r3, [pc, #144]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800999e:	d106      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099a6:	d102      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099a8:	4b22      	ldr	r3, [pc, #136]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80099aa:	637b      	str	r3, [r7, #52]	; 0x34
 80099ac:	e002      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80099b2:	e003      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80099b4:	e002      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099ba:	bf00      	nop
          }
        }
        break;
 80099bc:	e25d      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80099be:	4b19      	ldr	r3, [pc, #100]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099c4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80099c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80099d0:	f7fb fb14 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 80099d4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80099d6:	e250      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80099d8:	4b12      	ldr	r3, [pc, #72]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099e4:	d10b      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ec:	d107      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ee:	f107 0314 	add.w	r3, r7, #20
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fd fc22 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	637b      	str	r3, [r7, #52]	; 0x34
 80099fc:	e04f      	b.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80099fe:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a0a:	d115      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a12:	d111      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a14:	f107 0308 	add.w	r3, r7, #8
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fd fd79 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	637b      	str	r3, [r7, #52]	; 0x34
 8009a22:	e03c      	b.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009a24:	44020c00 	.word	0x44020c00
 8009a28:	00bb8000 	.word	0x00bb8000
 8009a2c:	03d09000 	.word	0x03d09000
 8009a30:	003d0900 	.word	0x003d0900
 8009a34:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009a38:	4b94      	ldr	r3, [pc, #592]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d10d      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a4a:	d109      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a4c:	4b8f      	ldr	r3, [pc, #572]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	4a8e      	ldr	r2, [pc, #568]	; (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a5e:	e01e      	b.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009a60:	4b8a      	ldr	r3, [pc, #552]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a6c:	d106      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a74:	d102      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009a76:	4b87      	ldr	r3, [pc, #540]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009a78:	637b      	str	r3, [r7, #52]	; 0x34
 8009a7a:	e010      	b.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009a7c:	4b83      	ldr	r3, [pc, #524]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a88:	d106      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009a90:	d102      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009a92:	4b81      	ldr	r3, [pc, #516]	; (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009a94:	637b      	str	r3, [r7, #52]	; 0x34
 8009a96:	e002      	b.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a9c:	e1ed      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a9e:	e1ec      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009aa0:	4b7a      	ldr	r3, [pc, #488]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009aa6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009aaa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009ab2:	f7fb fab9 	bl	8005028 <HAL_RCC_GetPCLK3Freq>
 8009ab6:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009ab8:	e1df      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009aba:	4b74      	ldr	r3, [pc, #464]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ac6:	d10b      	bne.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ace:	d107      	bne.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ad0:	f107 0314 	add.w	r3, r7, #20
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fd fbb1 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ade:	e045      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009ae0:	4b6a      	ldr	r3, [pc, #424]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aec:	d10b      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009af4:	d107      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fd fd08 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	637b      	str	r3, [r7, #52]	; 0x34
 8009b04:	e032      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009b06:	4b61      	ldr	r3, [pc, #388]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d10d      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b18:	d109      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b1a:	4b5c      	ldr	r3, [pc, #368]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	08db      	lsrs	r3, r3, #3
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	4a5a      	ldr	r2, [pc, #360]	; (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009b26:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b2c:	e01e      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009b2e:	4b57      	ldr	r3, [pc, #348]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b3a:	d106      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b42:	d102      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009b44:	4b53      	ldr	r3, [pc, #332]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009b46:	637b      	str	r3, [r7, #52]	; 0x34
 8009b48:	e010      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009b4a:	4b50      	ldr	r3, [pc, #320]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b56:	d106      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009b5e:	d102      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009b60:	4b4d      	ldr	r3, [pc, #308]	; (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34
 8009b64:	e002      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b6a:	e186      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b6c:	e185      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009b6e:	4b47      	ldr	r3, [pc, #284]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b74:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8009b78:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d103      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009b80:	f7fb fa3c 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8009b84:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009b86:	e178      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009b88:	4b40      	ldr	r3, [pc, #256]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b94:	d10b      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9c:	d107      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b9e:	f107 0314 	add.w	r3, r7, #20
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fd fb4a 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	637b      	str	r3, [r7, #52]	; 0x34
 8009bac:	e045      	b.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009bae:	4b37      	ldr	r3, [pc, #220]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bba:	d10b      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bc2:	d107      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bc4:	f107 0308 	add.w	r3, r7, #8
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fd fca1 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bd2:	e032      	b.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009bd4:	4b2d      	ldr	r3, [pc, #180]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d10d      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009be6:	d109      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009be8:	4b28      	ldr	r3, [pc, #160]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	08db      	lsrs	r3, r3, #3
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	4a27      	ldr	r2, [pc, #156]	; (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8009bfa:	e01e      	b.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009bfc:	4b23      	ldr	r3, [pc, #140]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c08:	d106      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c10:	d102      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009c12:	4b20      	ldr	r3, [pc, #128]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009c14:	637b      	str	r3, [r7, #52]	; 0x34
 8009c16:	e010      	b.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009c18:	4b1c      	ldr	r3, [pc, #112]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c24:	d106      	bne.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009c2c:	d102      	bne.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009c2e:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
 8009c32:	e002      	b.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c38:	e11f      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c3a:	e11e      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009c3c:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c42:	f003 0303 	and.w	r3, r3, #3
 8009c46:	633b      	str	r3, [r7, #48]	; 0x30
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d85f      	bhi.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c65 	.word	0x08009c65
 8009c58:	08009c6d 	.word	0x08009c6d
 8009c5c:	08009c7d 	.word	0x08009c7d
 8009c60:	08009c9d 	.word	0x08009c9d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009c64:	f7fb f998 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8009c68:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009c6a:	e053      	b.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c6c:	f107 0320 	add.w	r3, r7, #32
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fd f979 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c7a:	e04b      	b.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c7c:	f107 0314 	add.w	r3, r7, #20
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fd fadb 	bl	800723c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c8a:	e043      	b.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009c8c:	44020c00 	.word	0x44020c00
 8009c90:	03d09000 	.word	0x03d09000
 8009c94:	003d0900 	.word	0x003d0900
 8009c98:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c9c:	4b79      	ldr	r3, [pc, #484]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ca2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ca8:	4b76      	ldr	r3, [pc, #472]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d10c      	bne.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cba:	4b72      	ldr	r3, [pc, #456]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	08db      	lsrs	r3, r3, #3
 8009cc0:	f003 0303 	and.w	r3, r3, #3
 8009cc4:	4a70      	ldr	r2, [pc, #448]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cca:	637b      	str	r3, [r7, #52]	; 0x34
 8009ccc:	e01e      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cce:	4b6d      	ldr	r3, [pc, #436]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cda:	d106      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce2:	d102      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ce4:	4b69      	ldr	r3, [pc, #420]	; (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce8:	e010      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cea:	4b66      	ldr	r3, [pc, #408]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cf6:	d106      	bne.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cfe:	d102      	bne.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d00:	4b63      	ldr	r3, [pc, #396]	; (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34
 8009d04:	e002      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009d0a:	e003      	b.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009d0c:	e002      	b.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009d12:	bf00      	nop
          }
        }
        break;
 8009d14:	e0b1      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009d16:	4b5b      	ldr	r3, [pc, #364]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d20:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009d22:	4b58      	ldr	r3, [pc, #352]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d106      	bne.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3c:	e01f      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009d3e:	4b51      	ldr	r3, [pc, #324]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d4c:	d106      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	2b40      	cmp	r3, #64	; 0x40
 8009d52:	d103      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009d54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5a:	e010      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009d5c:	4b49      	ldr	r3, [pc, #292]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d68:	d106      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	2b80      	cmp	r3, #128	; 0x80
 8009d6e:	d103      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009d70:	f248 0312 	movw	r3, #32786	; 0x8012
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
 8009d76:	e002      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009d7c:	e07d      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d7e:	e07c      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009d80:	4b40      	ldr	r3, [pc, #256]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d8a:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009d8c:	4b3d      	ldr	r3, [pc, #244]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d98:	d105      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d102      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009da0:	4b3c      	ldr	r3, [pc, #240]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009da2:	637b      	str	r3, [r7, #52]	; 0x34
 8009da4:	e031      	b.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009da6:	4b37      	ldr	r3, [pc, #220]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009db2:	d10a      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	2b10      	cmp	r3, #16
 8009db8:	d107      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dba:	f107 0320 	add.w	r3, r7, #32
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fd f8d2 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc8:	e01f      	b.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009dca:	4b2e      	ldr	r3, [pc, #184]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d106      	bne.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	2b20      	cmp	r3, #32
 8009ddc:	d103      	bne.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009de2:	637b      	str	r3, [r7, #52]	; 0x34
 8009de4:	e011      	b.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009de6:	4b27      	ldr	r3, [pc, #156]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009df4:	d106      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	2b30      	cmp	r3, #48	; 0x30
 8009dfa:	d103      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009dfc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009e00:	637b      	str	r3, [r7, #52]	; 0x34
 8009e02:	e002      	b.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009e08:	e037      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e0a:	e036      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009e0c:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e16:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	2b10      	cmp	r3, #16
 8009e1c:	d107      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e1e:	f107 0320 	add.w	r3, r7, #32
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fd f8a0 	bl	8006f68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009e2c:	e025      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009e2e:	4b15      	ldr	r3, [pc, #84]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e3a:	d10a      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d107      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e42:	f107 0308 	add.w	r3, r7, #8
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fd fb62 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e50:	e00f      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009e52:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e5e:	d105      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	2b30      	cmp	r3, #48	; 0x30
 8009e64:	d102      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009e66:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009e68:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6a:	e002      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8009e70:	e003      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e72:	e002      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e78:	bf00      	nop
    }
  }

  return (frequency);
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	373c      	adds	r7, #60	; 0x3c
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd90      	pop	{r4, r7, pc}
 8009e84:	44020c00 	.word	0x44020c00
 8009e88:	03d09000 	.word	0x03d09000
 8009e8c:	003d0900 	.word	0x003d0900
 8009e90:	007a1200 	.word	0x007a1200
 8009e94:	02dc6c00 	.word	0x02dc6c00

08009e98 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009ea0:	4b48      	ldr	r3, [pc, #288]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a47      	ldr	r2, [pc, #284]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009ea6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009eaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009eac:	f7f7 fc92 	bl	80017d4 <HAL_GetTick>
 8009eb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009eb2:	e008      	b.n	8009ec6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eb4:	f7f7 fc8e 	bl	80017d4 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d901      	bls.n	8009ec6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e07a      	b.n	8009fbc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ec6:	4b3f      	ldr	r3, [pc, #252]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f0      	bne.n	8009eb4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009ed2:	4b3c      	ldr	r3, [pc, #240]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6811      	ldr	r1, [r2, #0]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6852      	ldr	r2, [r2, #4]
 8009ee6:	0212      	lsls	r2, r2, #8
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	4936      	ldr	r1, [pc, #216]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009eec:	4313      	orrs	r3, r2
 8009eee:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	025b      	lsls	r3, r3, #9
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	431a      	orrs	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	041b      	lsls	r3, r3, #16
 8009f0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	061b      	lsls	r3, r3, #24
 8009f1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f20:	4928      	ldr	r1, [pc, #160]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009f26:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	f023 020c 	bic.w	r2, r3, #12
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	4924      	ldr	r1, [pc, #144]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009f38:	4b22      	ldr	r3, [pc, #136]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	f023 0220 	bic.w	r2, r3, #32
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	491f      	ldr	r1, [pc, #124]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009f4a:	4b1e      	ldr	r3, [pc, #120]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	491c      	ldr	r1, [pc, #112]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009f58:	4b1a      	ldr	r3, [pc, #104]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	4a19      	ldr	r2, [pc, #100]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f5e:	f023 0310 	bic.w	r3, r3, #16
 8009f62:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009f64:	4b17      	ldr	r3, [pc, #92]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6a12      	ldr	r2, [r2, #32]
 8009f74:	00d2      	lsls	r2, r2, #3
 8009f76:	4913      	ldr	r1, [pc, #76]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009f7c:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f80:	4a10      	ldr	r2, [pc, #64]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f82:	f043 0310 	orr.w	r3, r3, #16
 8009f86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009f88:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a0d      	ldr	r2, [pc, #52]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f94:	f7f7 fc1e 	bl	80017d4 <HAL_GetTick>
 8009f98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f9a:	e008      	b.n	8009fae <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f9c:	f7f7 fc1a 	bl	80017d4 <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d901      	bls.n	8009fae <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e006      	b.n	8009fbc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fae:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <RCCEx_PLL2_Config+0x12c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0f0      	beq.n	8009f9c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0

}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	44020c00 	.word	0x44020c00

08009fc8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009fd0:	4b48      	ldr	r3, [pc, #288]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a47      	ldr	r2, [pc, #284]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 8009fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fdc:	f7f7 fbfa 	bl	80017d4 <HAL_GetTick>
 8009fe0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fe2:	e008      	b.n	8009ff6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fe4:	f7f7 fbf6 	bl	80017d4 <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d901      	bls.n	8009ff6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e07a      	b.n	800a0ec <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ff6:	4b3f      	ldr	r3, [pc, #252]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f0      	bne.n	8009fe4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a002:	4b3c      	ldr	r3, [pc, #240]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a006:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	6811      	ldr	r1, [r2, #0]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6852      	ldr	r2, [r2, #4]
 800a016:	0212      	lsls	r2, r2, #8
 800a018:	430a      	orrs	r2, r1
 800a01a:	4936      	ldr	r1, [pc, #216]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	630b      	str	r3, [r1, #48]	; 0x30
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	3b01      	subs	r3, #1
 800a026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	3b01      	subs	r3, #1
 800a030:	025b      	lsls	r3, r3, #9
 800a032:	b29b      	uxth	r3, r3
 800a034:	431a      	orrs	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	041b      	lsls	r3, r3, #16
 800a03e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	3b01      	subs	r3, #1
 800a04a:	061b      	lsls	r3, r3, #24
 800a04c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a050:	4928      	ldr	r1, [pc, #160]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a052:	4313      	orrs	r3, r2
 800a054:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a056:	4b27      	ldr	r3, [pc, #156]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	f023 020c 	bic.w	r2, r3, #12
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	4924      	ldr	r1, [pc, #144]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a064:	4313      	orrs	r3, r2
 800a066:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a068:	4b22      	ldr	r3, [pc, #136]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06c:	f023 0220 	bic.w	r2, r3, #32
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	491f      	ldr	r1, [pc, #124]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a076:	4313      	orrs	r3, r2
 800a078:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a07a:	4b1e      	ldr	r3, [pc, #120]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a07c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	491c      	ldr	r1, [pc, #112]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a088:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	4a19      	ldr	r2, [pc, #100]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a08e:	f023 0310 	bic.w	r3, r3, #16
 800a092:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a094:	4b17      	ldr	r3, [pc, #92]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a098:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a09c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6a12      	ldr	r2, [r2, #32]
 800a0a4:	00d2      	lsls	r2, r2, #3
 800a0a6:	4913      	ldr	r1, [pc, #76]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a0ac:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b0:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a0b2:	f043 0310 	orr.w	r3, r3, #16
 800a0b6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a0b8:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a0d      	ldr	r2, [pc, #52]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a0be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0c4:	f7f7 fb86 	bl	80017d4 <HAL_GetTick>
 800a0c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0ca:	e008      	b.n	800a0de <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0cc:	f7f7 fb82 	bl	80017d4 <HAL_GetTick>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d901      	bls.n	800a0de <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e006      	b.n	800a0ec <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0de:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <RCCEx_PLL3_Config+0x12c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0f0      	beq.n	800a0cc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	44020c00 	.word	0x44020c00

0800a0f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e042      	b.n	800a190 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7f7 f891 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2224      	movs	r2, #36	; 0x24
 800a126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 0201 	bic.w	r2, r2, #1
 800a138:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f82c 	bl	800a198 <UART_SetConfig>
 800a140:	4603      	mov	r3, r0
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e022      	b.n	800a190 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa0e 	bl	800a574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fa95 	bl	800a6b8 <UART_CheckIdleState>
 800a18e:	4603      	mov	r3, r0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a19c:	b094      	sub	sp, #80	; 0x50
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	4b78      	ldr	r3, [pc, #480]	; (800a390 <UART_SetConfig+0x1f8>)
 800a1ae:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4971      	ldr	r1, [pc, #452]	; (800a394 <UART_SetConfig+0x1fc>)
 800a1d0:	4019      	ands	r1, r3
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	68d9      	ldr	r1, [r3, #12]
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	ea40 0301 	orr.w	r3, r0, r1
 800a1f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4b64      	ldr	r3, [pc, #400]	; (800a390 <UART_SetConfig+0x1f8>)
 800a200:	429a      	cmp	r2, r3
 800a202:	d009      	beq.n	800a218 <UART_SetConfig+0x80>
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	4b63      	ldr	r3, [pc, #396]	; (800a398 <UART_SetConfig+0x200>)
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d004      	beq.n	800a218 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	6a1a      	ldr	r2, [r3, #32]
 800a212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a214:	4313      	orrs	r3, r2
 800a216:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a222:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a236:	f023 000f 	bic.w	r0, r3, #15
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	ea40 0301 	orr.w	r3, r0, r1
 800a246:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	4b53      	ldr	r3, [pc, #332]	; (800a39c <UART_SetConfig+0x204>)
 800a24e:	429a      	cmp	r2, r3
 800a250:	d102      	bne.n	800a258 <UART_SetConfig+0xc0>
 800a252:	2301      	movs	r3, #1
 800a254:	64bb      	str	r3, [r7, #72]	; 0x48
 800a256:	e066      	b.n	800a326 <UART_SetConfig+0x18e>
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	4b50      	ldr	r3, [pc, #320]	; (800a3a0 <UART_SetConfig+0x208>)
 800a25e:	429a      	cmp	r2, r3
 800a260:	d102      	bne.n	800a268 <UART_SetConfig+0xd0>
 800a262:	2302      	movs	r3, #2
 800a264:	64bb      	str	r3, [r7, #72]	; 0x48
 800a266:	e05e      	b.n	800a326 <UART_SetConfig+0x18e>
 800a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	4b4d      	ldr	r3, [pc, #308]	; (800a3a4 <UART_SetConfig+0x20c>)
 800a26e:	429a      	cmp	r2, r3
 800a270:	d102      	bne.n	800a278 <UART_SetConfig+0xe0>
 800a272:	2304      	movs	r3, #4
 800a274:	64bb      	str	r3, [r7, #72]	; 0x48
 800a276:	e056      	b.n	800a326 <UART_SetConfig+0x18e>
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	4b4a      	ldr	r3, [pc, #296]	; (800a3a8 <UART_SetConfig+0x210>)
 800a27e:	429a      	cmp	r2, r3
 800a280:	d102      	bne.n	800a288 <UART_SetConfig+0xf0>
 800a282:	2308      	movs	r3, #8
 800a284:	64bb      	str	r3, [r7, #72]	; 0x48
 800a286:	e04e      	b.n	800a326 <UART_SetConfig+0x18e>
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	4b47      	ldr	r3, [pc, #284]	; (800a3ac <UART_SetConfig+0x214>)
 800a28e:	429a      	cmp	r2, r3
 800a290:	d102      	bne.n	800a298 <UART_SetConfig+0x100>
 800a292:	2310      	movs	r3, #16
 800a294:	64bb      	str	r3, [r7, #72]	; 0x48
 800a296:	e046      	b.n	800a326 <UART_SetConfig+0x18e>
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	4b44      	ldr	r3, [pc, #272]	; (800a3b0 <UART_SetConfig+0x218>)
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d102      	bne.n	800a2a8 <UART_SetConfig+0x110>
 800a2a2:	2320      	movs	r3, #32
 800a2a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2a6:	e03e      	b.n	800a326 <UART_SetConfig+0x18e>
 800a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	4b41      	ldr	r3, [pc, #260]	; (800a3b4 <UART_SetConfig+0x21c>)
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d102      	bne.n	800a2b8 <UART_SetConfig+0x120>
 800a2b2:	2340      	movs	r3, #64	; 0x40
 800a2b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2b6:	e036      	b.n	800a326 <UART_SetConfig+0x18e>
 800a2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	4b3e      	ldr	r3, [pc, #248]	; (800a3b8 <UART_SetConfig+0x220>)
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d102      	bne.n	800a2c8 <UART_SetConfig+0x130>
 800a2c2:	2380      	movs	r3, #128	; 0x80
 800a2c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2c6:	e02e      	b.n	800a326 <UART_SetConfig+0x18e>
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b3b      	ldr	r3, [pc, #236]	; (800a3bc <UART_SetConfig+0x224>)
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d103      	bne.n	800a2da <UART_SetConfig+0x142>
 800a2d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2d8:	e025      	b.n	800a326 <UART_SetConfig+0x18e>
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	4b38      	ldr	r3, [pc, #224]	; (800a3c0 <UART_SetConfig+0x228>)
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d103      	bne.n	800a2ec <UART_SetConfig+0x154>
 800a2e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ea:	e01c      	b.n	800a326 <UART_SetConfig+0x18e>
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	4b34      	ldr	r3, [pc, #208]	; (800a3c4 <UART_SetConfig+0x22c>)
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d103      	bne.n	800a2fe <UART_SetConfig+0x166>
 800a2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2fc:	e013      	b.n	800a326 <UART_SetConfig+0x18e>
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4b31      	ldr	r3, [pc, #196]	; (800a3c8 <UART_SetConfig+0x230>)
 800a304:	429a      	cmp	r2, r3
 800a306:	d103      	bne.n	800a310 <UART_SetConfig+0x178>
 800a308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a30c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a30e:	e00a      	b.n	800a326 <UART_SetConfig+0x18e>
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	4b1e      	ldr	r3, [pc, #120]	; (800a390 <UART_SetConfig+0x1f8>)
 800a316:	429a      	cmp	r2, r3
 800a318:	d103      	bne.n	800a322 <UART_SetConfig+0x18a>
 800a31a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a31e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a320:	e001      	b.n	800a326 <UART_SetConfig+0x18e>
 800a322:	2300      	movs	r3, #0
 800a324:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4b19      	ldr	r3, [pc, #100]	; (800a390 <UART_SetConfig+0x1f8>)
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d005      	beq.n	800a33c <UART_SetConfig+0x1a4>
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b18      	ldr	r3, [pc, #96]	; (800a398 <UART_SetConfig+0x200>)
 800a336:	429a      	cmp	r2, r3
 800a338:	f040 8094 	bne.w	800a464 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a33e:	2200      	movs	r2, #0
 800a340:	623b      	str	r3, [r7, #32]
 800a342:	627a      	str	r2, [r7, #36]	; 0x24
 800a344:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a348:	f7fd fa4c 	bl	80077e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a34c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 80f7 	beq.w	800a544 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35a:	4a1c      	ldr	r2, [pc, #112]	; (800a3cc <UART_SetConfig+0x234>)
 800a35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a360:	461a      	mov	r2, r3
 800a362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a364:	fbb3 f3f2 	udiv	r3, r3, r2
 800a368:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	4613      	mov	r3, r2
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	4413      	add	r3, r2
 800a374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a376:	429a      	cmp	r2, r3
 800a378:	d305      	bcc.n	800a386 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a382:	429a      	cmp	r2, r3
 800a384:	d924      	bls.n	800a3d0 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a38c:	e069      	b.n	800a462 <UART_SetConfig+0x2ca>
 800a38e:	bf00      	nop
 800a390:	44002400 	.word	0x44002400
 800a394:	cfff69f3 	.word	0xcfff69f3
 800a398:	54002400 	.word	0x54002400
 800a39c:	40013800 	.word	0x40013800
 800a3a0:	40004400 	.word	0x40004400
 800a3a4:	40004800 	.word	0x40004800
 800a3a8:	40004c00 	.word	0x40004c00
 800a3ac:	40005000 	.word	0x40005000
 800a3b0:	40006400 	.word	0x40006400
 800a3b4:	40007800 	.word	0x40007800
 800a3b8:	40007c00 	.word	0x40007c00
 800a3bc:	40008000 	.word	0x40008000
 800a3c0:	40006800 	.word	0x40006800
 800a3c4:	40006c00 	.word	0x40006c00
 800a3c8:	40008400 	.word	0x40008400
 800a3cc:	0800b07c 	.word	0x0800b07c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	61bb      	str	r3, [r7, #24]
 800a3d6:	61fa      	str	r2, [r7, #28]
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	4a64      	ldr	r2, [pc, #400]	; (800a570 <UART_SetConfig+0x3d8>)
 800a3de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	613b      	str	r3, [r7, #16]
 800a3e8:	617a      	str	r2, [r7, #20]
 800a3ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a3ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a3f2:	f7f5 ff4b 	bl	800028c <__aeabi_uldivmod>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f04f 0200 	mov.w	r2, #0
 800a402:	f04f 0300 	mov.w	r3, #0
 800a406:	020b      	lsls	r3, r1, #8
 800a408:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a40c:	0202      	lsls	r2, r0, #8
 800a40e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a410:	6849      	ldr	r1, [r1, #4]
 800a412:	0849      	lsrs	r1, r1, #1
 800a414:	2000      	movs	r0, #0
 800a416:	460c      	mov	r4, r1
 800a418:	4605      	mov	r5, r0
 800a41a:	eb12 0804 	adds.w	r8, r2, r4
 800a41e:	eb43 0905 	adc.w	r9, r3, r5
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	60bb      	str	r3, [r7, #8]
 800a42a:	60fa      	str	r2, [r7, #12]
 800a42c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a430:	4640      	mov	r0, r8
 800a432:	4649      	mov	r1, r9
 800a434:	f7f5 ff2a 	bl	800028c <__aeabi_uldivmod>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4613      	mov	r3, r2
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a446:	d308      	bcc.n	800a45a <UART_SetConfig+0x2c2>
 800a448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a44a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a44e:	d204      	bcs.n	800a45a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a456:	60da      	str	r2, [r3, #12]
 800a458:	e003      	b.n	800a462 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a460:	e070      	b.n	800a544 <UART_SetConfig+0x3ac>
 800a462:	e06f      	b.n	800a544 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a46c:	d13c      	bne.n	800a4e8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a470:	2200      	movs	r2, #0
 800a472:	603b      	str	r3, [r7, #0]
 800a474:	607a      	str	r2, [r7, #4]
 800a476:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a47a:	f7fd f9b3 	bl	80077e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a47e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	2b00      	cmp	r3, #0
 800a484:	d05e      	beq.n	800a544 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	4a39      	ldr	r2, [pc, #228]	; (800a570 <UART_SetConfig+0x3d8>)
 800a48c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a490:	461a      	mov	r2, r3
 800a492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a494:	fbb3 f3f2 	udiv	r3, r3, r2
 800a498:	005a      	lsls	r2, r3, #1
 800a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	085b      	lsrs	r3, r3, #1
 800a4a0:	441a      	add	r2, r3
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ae:	2b0f      	cmp	r3, #15
 800a4b0:	d916      	bls.n	800a4e0 <UART_SetConfig+0x348>
 800a4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b8:	d212      	bcs.n	800a4e0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	f023 030f 	bic.w	r3, r3, #15
 800a4c2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c6:	085b      	lsrs	r3, r3, #1
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a4dc:	60da      	str	r2, [r3, #12]
 800a4de:	e031      	b.n	800a544 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a4e6:	e02d      	b.n	800a544 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	469a      	mov	sl, r3
 800a4ee:	4693      	mov	fp, r2
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	4659      	mov	r1, fp
 800a4f4:	f7fd f976 	bl	80077e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4f8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d021      	beq.n	800a544 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	4a1a      	ldr	r2, [pc, #104]	; (800a570 <UART_SetConfig+0x3d8>)
 800a506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a50a:	461a      	mov	r2, r3
 800a50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	085b      	lsrs	r3, r3, #1
 800a518:	441a      	add	r2, r3
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a526:	2b0f      	cmp	r3, #15
 800a528:	d909      	bls.n	800a53e <UART_SetConfig+0x3a6>
 800a52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a530:	d205      	bcs.n	800a53e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a534:	b29a      	uxth	r2, r3
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60da      	str	r2, [r3, #12]
 800a53c:	e002      	b.n	800a544 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	2201      	movs	r2, #1
 800a548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	2201      	movs	r2, #1
 800a550:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a556:	2200      	movs	r2, #0
 800a558:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	2200      	movs	r2, #0
 800a55e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a560:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a564:	4618      	mov	r0, r3
 800a566:	3750      	adds	r7, #80	; 0x50
 800a568:	46bd      	mov	sp, r7
 800a56a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a56e:	bf00      	nop
 800a570:	0800b07c 	.word	0x0800b07c

0800a574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a2:	f003 0302 	and.w	r3, r3, #2
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e6:	f003 0308 	and.w	r3, r3, #8
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	f003 0310 	and.w	r3, r3, #16
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00a      	beq.n	800a626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	430a      	orrs	r2, r1
 800a646:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01a      	beq.n	800a68a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a672:	d10a      	bne.n	800a68a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	605a      	str	r2, [r3, #4]
  }
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b098      	sub	sp, #96	; 0x60
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6c8:	f7f7 f884 	bl	80017d4 <HAL_GetTick>
 800a6cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d12f      	bne.n	800a73c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f88e 	bl	800a80c <UART_WaitOnFlagUntilTimeout>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d022      	beq.n	800a73c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a70a:	653b      	str	r3, [r7, #80]	; 0x50
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a714:	647b      	str	r3, [r7, #68]	; 0x44
 800a716:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a71a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e6      	bne.n	800a6f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2220      	movs	r2, #32
 800a72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e063      	b.n	800a804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 0304 	and.w	r3, r3, #4
 800a746:	2b04      	cmp	r3, #4
 800a748:	d149      	bne.n	800a7de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a74a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a752:	2200      	movs	r2, #0
 800a754:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f857 	bl	800a80c <UART_WaitOnFlagUntilTimeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d03c      	beq.n	800a7de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	623b      	str	r3, [r7, #32]
   return(result);
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a778:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a782:	633b      	str	r3, [r7, #48]	; 0x30
 800a784:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e6      	bne.n	800a764 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3308      	adds	r3, #8
 800a79c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f023 0301 	bic.w	r3, r3, #1
 800a7ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7b6:	61fa      	str	r2, [r7, #28]
 800a7b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	69b9      	ldr	r1, [r7, #24]
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e5      	bne.n	800a796 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e012      	b.n	800a804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3758      	adds	r7, #88	; 0x58
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a81c:	e049      	b.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d045      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a826:	f7f6 ffd5 	bl	80017d4 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	429a      	cmp	r2, r3
 800a834:	d302      	bcc.n	800a83c <UART_WaitOnFlagUntilTimeout+0x30>
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e048      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d031      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d110      	bne.n	800a87e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2208      	movs	r2, #8
 800a862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f838 	bl	800a8da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2208      	movs	r2, #8
 800a86e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e029      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a88c:	d111      	bne.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f81e 	bl	800a8da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e00f      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69da      	ldr	r2, [r3, #28]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	bf0c      	ite	eq
 800a8c2:	2301      	moveq	r3, #1
 800a8c4:	2300      	movne	r3, #0
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d0a6      	beq.n	800a81e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b095      	sub	sp, #84	; 0x54
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ea:	e853 3f00 	ldrex	r3, [r3]
 800a8ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a900:	643b      	str	r3, [r7, #64]	; 0x40
 800a902:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e6      	bne.n	800a8e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3308      	adds	r3, #8
 800a91a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	61fb      	str	r3, [r7, #28]
   return(result);
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a92a:	f023 0301 	bic.w	r3, r3, #1
 800a92e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a938:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a93a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a93e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a940:	e841 2300 	strex	r3, r2, [r1]
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e3      	bne.n	800a914 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a950:	2b01      	cmp	r3, #1
 800a952:	d118      	bne.n	800a986 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	e853 3f00 	ldrex	r3, [r3]
 800a960:	60bb      	str	r3, [r7, #8]
   return(result);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f023 0310 	bic.w	r3, r3, #16
 800a968:	647b      	str	r3, [r7, #68]	; 0x44
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a972:	61bb      	str	r3, [r7, #24]
 800a974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a976:	6979      	ldr	r1, [r7, #20]
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	613b      	str	r3, [r7, #16]
   return(result);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e6      	bne.n	800a954 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2220      	movs	r2, #32
 800a98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a99a:	bf00      	nop
 800a99c:	3754      	adds	r7, #84	; 0x54
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d101      	bne.n	800a9bc <HAL_UARTEx_DisableFifoMode+0x16>
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e027      	b.n	800aa0c <HAL_UARTEx_DisableFifoMode+0x66>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2224      	movs	r2, #36	; 0x24
 800a9c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f022 0201 	bic.w	r2, r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a9ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d101      	bne.n	800aa30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	e02d      	b.n	800aa8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2224      	movs	r2, #36	; 0x24
 800aa3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0201 	bic.w	r2, r2, #1
 800aa56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f84f 	bl	800ab10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d101      	bne.n	800aaac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	e02d      	b.n	800ab08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2224      	movs	r2, #36	; 0x24
 800aab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0201 	bic.w	r2, r2, #1
 800aad2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	430a      	orrs	r2, r1
 800aae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f811 	bl	800ab10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d108      	bne.n	800ab32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab30:	e031      	b.n	800ab96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab32:	2308      	movs	r3, #8
 800ab34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab36:	2308      	movs	r3, #8
 800ab38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	0e5b      	lsrs	r3, r3, #25
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 0307 	and.w	r3, r3, #7
 800ab48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	0f5b      	lsrs	r3, r3, #29
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	f003 0307 	and.w	r3, r3, #7
 800ab58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	7b3a      	ldrb	r2, [r7, #12]
 800ab5e:	4911      	ldr	r1, [pc, #68]	; (800aba4 <UARTEx_SetNbDataToProcess+0x94>)
 800ab60:	5c8a      	ldrb	r2, [r1, r2]
 800ab62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab66:	7b3a      	ldrb	r2, [r7, #12]
 800ab68:	490f      	ldr	r1, [pc, #60]	; (800aba8 <UARTEx_SetNbDataToProcess+0x98>)
 800ab6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	7b7a      	ldrb	r2, [r7, #13]
 800ab7c:	4909      	ldr	r1, [pc, #36]	; (800aba4 <UARTEx_SetNbDataToProcess+0x94>)
 800ab7e:	5c8a      	ldrb	r2, [r1, r2]
 800ab80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab84:	7b7a      	ldrb	r2, [r7, #13]
 800ab86:	4908      	ldr	r1, [pc, #32]	; (800aba8 <UARTEx_SetNbDataToProcess+0x98>)
 800ab88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	0800b094 	.word	0x0800b094
 800aba8:	0800b09c 	.word	0x0800b09c

0800abac <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800abac:	b480      	push	{r7}
 800abae:	b08b      	sub	sp, #44	; 0x2c
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	fa93 f3a3 	rbit	r3, r3
 800abc6:	613b      	str	r3, [r7, #16]
  return result;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800abd2:	2320      	movs	r3, #32
 800abd4:	e003      	b.n	800abde <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	fab3 f383 	clz	r3, r3
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	2103      	movs	r1, #3
 800abe2:	fa01 f303 	lsl.w	r3, r1, r3
 800abe6:	43db      	mvns	r3, r3
 800abe8:	401a      	ands	r2, r3
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	fa93 f3a3 	rbit	r3, r3
 800abf4:	61fb      	str	r3, [r7, #28]
  return result;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ac00:	2320      	movs	r3, #32
 800ac02:	e003      	b.n	800ac0c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	fab3 f383 	clz	r3, r3
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	fa01 f303 	lsl.w	r3, r1, r3
 800ac14:	431a      	orrs	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	601a      	str	r2, [r3, #0]
}
 800ac1a:	bf00      	nop
 800ac1c:	372c      	adds	r7, #44	; 0x2c
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	43db      	mvns	r3, r3
 800ac3a:	401a      	ands	r2, r3
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	fb01 f303 	mul.w	r3, r1, r3
 800ac44:	431a      	orrs	r2, r3
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	605a      	str	r2, [r3, #4]
}
 800ac4a:	bf00      	nop
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b08b      	sub	sp, #44	; 0x2c
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	689a      	ldr	r2, [r3, #8]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	fa93 f3a3 	rbit	r3, r3
 800ac70:	613b      	str	r3, [r7, #16]
  return result;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ac7c:	2320      	movs	r3, #32
 800ac7e:	e003      	b.n	800ac88 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	fab3 f383 	clz	r3, r3
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	2103      	movs	r1, #3
 800ac8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac90:	43db      	mvns	r3, r3
 800ac92:	401a      	ands	r2, r3
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	fa93 f3a3 	rbit	r3, r3
 800ac9e:	61fb      	str	r3, [r7, #28]
  return result;
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800acaa:	2320      	movs	r3, #32
 800acac:	e003      	b.n	800acb6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	fab3 f383 	clz	r3, r3
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	fa01 f303 	lsl.w	r3, r1, r3
 800acbe:	431a      	orrs	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800acc4:	bf00      	nop
 800acc6:	372c      	adds	r7, #44	; 0x2c
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b08b      	sub	sp, #44	; 0x2c
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	68da      	ldr	r2, [r3, #12]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	fa93 f3a3 	rbit	r3, r3
 800acea:	613b      	str	r3, [r7, #16]
  return result;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800acf6:	2320      	movs	r3, #32
 800acf8:	e003      	b.n	800ad02 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	fab3 f383 	clz	r3, r3
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	2103      	movs	r1, #3
 800ad06:	fa01 f303 	lsl.w	r3, r1, r3
 800ad0a:	43db      	mvns	r3, r3
 800ad0c:	401a      	ands	r2, r3
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	fa93 f3a3 	rbit	r3, r3
 800ad18:	61fb      	str	r3, [r7, #28]
  return result;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ad24:	2320      	movs	r3, #32
 800ad26:	e003      	b.n	800ad30 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	fab3 f383 	clz	r3, r3
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	fa01 f303 	lsl.w	r3, r1, r3
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	60da      	str	r2, [r3, #12]
}
 800ad3e:	bf00      	nop
 800ad40:	372c      	adds	r7, #44	; 0x2c
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b08b      	sub	sp, #44	; 0x2c
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60f8      	str	r0, [r7, #12]
 800ad52:	60b9      	str	r1, [r7, #8]
 800ad54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a1a      	ldr	r2, [r3, #32]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	fa93 f3a3 	rbit	r3, r3
 800ad64:	613b      	str	r3, [r7, #16]
  return result;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ad70:	2320      	movs	r3, #32
 800ad72:	e003      	b.n	800ad7c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	fab3 f383 	clz	r3, r3
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	210f      	movs	r1, #15
 800ad80:	fa01 f303 	lsl.w	r3, r1, r3
 800ad84:	43db      	mvns	r3, r3
 800ad86:	401a      	ands	r2, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	fa93 f3a3 	rbit	r3, r3
 800ad92:	61fb      	str	r3, [r7, #28]
  return result;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800ad9e:	2320      	movs	r3, #32
 800ada0:	e003      	b.n	800adaa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	fab3 f383 	clz	r3, r3
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	fa01 f303 	lsl.w	r3, r1, r3
 800adb2:	431a      	orrs	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800adb8:	bf00      	nop
 800adba:	372c      	adds	r7, #44	; 0x2c
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b08b      	sub	sp, #44	; 0x2c
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	0a1b      	lsrs	r3, r3, #8
 800add8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	fa93 f3a3 	rbit	r3, r3
 800ade0:	613b      	str	r3, [r7, #16]
  return result;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800adec:	2320      	movs	r3, #32
 800adee:	e003      	b.n	800adf8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	fab3 f383 	clz	r3, r3
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	210f      	movs	r1, #15
 800adfc:	fa01 f303 	lsl.w	r3, r1, r3
 800ae00:	43db      	mvns	r3, r3
 800ae02:	401a      	ands	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	0a1b      	lsrs	r3, r3, #8
 800ae08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	fa93 f3a3 	rbit	r3, r3
 800ae10:	61fb      	str	r3, [r7, #28]
  return result;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800ae1c:	2320      	movs	r3, #32
 800ae1e:	e003      	b.n	800ae28 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	fab3 f383 	clz	r3, r3
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae30:	431a      	orrs	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800ae36:	bf00      	nop
 800ae38:	372c      	adds	r7, #44	; 0x2c
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b08a      	sub	sp, #40	; 0x28
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	fa93 f3a3 	rbit	r3, r3
 800ae58:	617b      	str	r3, [r7, #20]
  return result;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <LL_GPIO_Init+0x26>
    return 32U;
 800ae64:	2320      	movs	r3, #32
 800ae66:	e003      	b.n	800ae70 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	fab3 f383 	clz	r3, r3
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800ae72:	e058      	b.n	800af26 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	2101      	movs	r1, #1
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae80:	4013      	ands	r3, r2
 800ae82:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800ae84:	6a3b      	ldr	r3, [r7, #32]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d04a      	beq.n	800af20 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d003      	beq.n	800ae9a <LL_GPIO_Init+0x58>
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d10e      	bne.n	800aeb8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	6a39      	ldr	r1, [r7, #32]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fed7 	bl	800ac56 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	6819      	ldr	r1, [r3, #0]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff feb7 	bl	800ac26 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	461a      	mov	r2, r3
 800aebe:	6a39      	ldr	r1, [r7, #32]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff ff05 	bl	800acd0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d121      	bne.n	800af12 <LL_GPIO_Init+0xd0>
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	fa93 f3a3 	rbit	r3, r3
 800aed8:	60bb      	str	r3, [r7, #8]
  return result;
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <LL_GPIO_Init+0xa6>
    return 32U;
 800aee4:	2320      	movs	r3, #32
 800aee6:	e003      	b.n	800aef0 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	fab3 f383 	clz	r3, r3
 800aeee:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800aef0:	2b07      	cmp	r3, #7
 800aef2:	d807      	bhi.n	800af04 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	461a      	mov	r2, r3
 800aefa:	6a39      	ldr	r1, [r7, #32]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff ff24 	bl	800ad4a <LL_GPIO_SetAFPin_0_7>
 800af02:	e006      	b.n	800af12 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	461a      	mov	r2, r3
 800af0a:	6a39      	ldr	r1, [r7, #32]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff ff59 	bl	800adc4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	461a      	mov	r2, r3
 800af18:	6a39      	ldr	r1, [r7, #32]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fe46 	bl	800abac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	3301      	adds	r3, #1
 800af24:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	fa22 f303 	lsr.w	r3, r2, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	d19f      	bne.n	800ae74 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3728      	adds	r7, #40	; 0x28
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800af3e:	b480      	push	{r7}
 800af40:	b085      	sub	sp, #20
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800af46:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800af4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	43db      	mvns	r3, r3
 800af54:	401a      	ands	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800af74:	78fb      	ldrb	r3, [r7, #3]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	641a      	str	r2, [r3, #64]	; 0x40
 800af86:	e00b      	b.n	800afa0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800af88:	78fb      	ldrb	r3, [r7, #3]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d106      	bne.n	800af9c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af92:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	641a      	str	r2, [r3, #64]	; 0x40
 800af9a:	e001      	b.n	800afa0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e000      	b.n	800afa2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800afae:	b084      	sub	sp, #16
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	f107 001c 	add.w	r0, r7, #28
 800afbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afca:	f023 0201 	bic.w	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800afd2:	2100      	movs	r1, #0
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ffc7 	bl	800af68 <USB_SetCurrentMode>
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aff0:	b004      	add	sp, #16
 800aff2:	4770      	bx	lr

0800aff4 <__libc_init_array>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	4d0d      	ldr	r5, [pc, #52]	; (800b02c <__libc_init_array+0x38>)
 800aff8:	2600      	movs	r6, #0
 800affa:	4c0d      	ldr	r4, [pc, #52]	; (800b030 <__libc_init_array+0x3c>)
 800affc:	1b64      	subs	r4, r4, r5
 800affe:	10a4      	asrs	r4, r4, #2
 800b000:	42a6      	cmp	r6, r4
 800b002:	d109      	bne.n	800b018 <__libc_init_array+0x24>
 800b004:	4d0b      	ldr	r5, [pc, #44]	; (800b034 <__libc_init_array+0x40>)
 800b006:	2600      	movs	r6, #0
 800b008:	4c0b      	ldr	r4, [pc, #44]	; (800b038 <__libc_init_array+0x44>)
 800b00a:	f000 f81f 	bl	800b04c <_init>
 800b00e:	1b64      	subs	r4, r4, r5
 800b010:	10a4      	asrs	r4, r4, #2
 800b012:	42a6      	cmp	r6, r4
 800b014:	d105      	bne.n	800b022 <__libc_init_array+0x2e>
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	f855 3b04 	ldr.w	r3, [r5], #4
 800b01c:	3601      	adds	r6, #1
 800b01e:	4798      	blx	r3
 800b020:	e7ee      	b.n	800b000 <__libc_init_array+0xc>
 800b022:	f855 3b04 	ldr.w	r3, [r5], #4
 800b026:	3601      	adds	r6, #1
 800b028:	4798      	blx	r3
 800b02a:	e7f2      	b.n	800b012 <__libc_init_array+0x1e>
 800b02c:	0800b0ac 	.word	0x0800b0ac
 800b030:	0800b0ac 	.word	0x0800b0ac
 800b034:	0800b0ac 	.word	0x0800b0ac
 800b038:	0800b0b0 	.word	0x0800b0b0

0800b03c <memset>:
 800b03c:	4402      	add	r2, r0
 800b03e:	4603      	mov	r3, r0
 800b040:	4293      	cmp	r3, r2
 800b042:	d100      	bne.n	800b046 <memset+0xa>
 800b044:	4770      	bx	lr
 800b046:	f803 1b01 	strb.w	r1, [r3], #1
 800b04a:	e7f9      	b.n	800b040 <memset+0x4>

0800b04c <_init>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	bf00      	nop
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr

0800b058 <_fini>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr
