
alphaProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000500c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005224  08005224  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800522c  0800522c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08005240  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005240  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dbc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d0  00000000  00000000  00039df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0003de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002007f  00000000  00000000  0003f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cc2  00000000  00000000  0005f4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da513  00000000  00000000  00079191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001536a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a0  00000000  00000000  001536f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080051cc 	.word	0x080051cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080051cc 	.word	0x080051cc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fdab 	bl	800107a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fad4 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052c:	f000 fa86 	bl	8000a3c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000530:	f000 f93e 	bl	80007b0 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000534:	f000 f85e 	bl	80005f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000538:	f000 f8d4 	bl	80006e4 <MX_ADC2_Init>
  MX_TIM1_Init();
 800053c:	f000 f978 	bl	8000830 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000540:	f000 fa16 	bl	8000970 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <main+0x3c>)
 800054a:	f002 f8bb 	bl	80026c4 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800054e:	2064      	movs	r0, #100	; 0x64
 8000550:	f000 fe04 	bl	800115c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000554:	e7f6      	b.n	8000544 <main+0x28>
 8000556:	bf00      	nop
 8000558:	48000400 	.word	0x48000400

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	; 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 fe26 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057e:	2000      	movs	r0, #0
 8000580:	f002 f9ec 	bl	800295c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059e:	2355      	movs	r3, #85	; 0x55
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fa76 	bl	8002aa4 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 fad7 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fd74 	bl	80030c8 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e6:	f000 fac3 	bl	8000b70 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2220      	movs	r2, #32
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f004 fdd5 	bl	80051bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061a:	4b30      	ldr	r3, [pc, #192]	; (80006dc <MX_ADC1_Init+0xe8>)
 800061c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000620:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_ADC1_Init+0xe8>)
 800063c:	2204      	movs	r2, #4
 800063e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_ADC1_Init+0xe8>)
 800064e:	2201      	movs	r2, #1
 8000650:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <MX_ADC1_Init+0xe8>)
 800067e:	f000 ff65 	bl	800154c <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000688:	f000 fa72 	bl	8000b70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000698:	f001 fcf2 	bl	8002080 <HAL_ADCEx_MultiModeConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006a2:	f000 fa65 	bl	8000b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_ADC1_Init+0xec>)
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006aa:	2306      	movs	r3, #6
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b2:	237f      	movs	r3, #127	; 0x7f
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b6:	2304      	movs	r3, #4
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0xe8>)
 80006c4:	f001 f8c6 	bl	8001854 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fa4f 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3730      	adds	r7, #48	; 0x30
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028
 80006e0:	04300002 	.word	0x04300002

080006e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2220      	movs	r2, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fd63 	bl	80051bc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_ADC2_Init+0xc0>)
 80006f8:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <MX_ADC2_Init+0xc4>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <MX_ADC2_Init+0xc0>)
 80006fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000702:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_ADC2_Init+0xc0>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_ADC2_Init+0xc0>)
 800071e:	2204      	movs	r2, #4
 8000720:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000730:	2201      	movs	r2, #1
 8000732:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000752:	2200      	movs	r2, #0
 8000754:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_ADC2_Init+0xc0>)
 8000760:	f000 fef4 	bl	800154c <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800076a:	f000 fa01 	bl	8000b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC2_Init+0xc8>)
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000772:	2306      	movs	r3, #6
 8000774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800077a:	237f      	movs	r3, #127	; 0x7f
 800077c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077e:	2304      	movs	r3, #4
 8000780:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_ADC2_Init+0xc0>)
 800078c:	f001 f862 	bl	8001854 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000796:	f000 f9eb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000094 	.word	0x20000094
 80007a8:	50000100 	.word	0x50000100
 80007ac:	36902000 	.word	0x36902000

080007b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_I2C2_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_I2C2_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_I2C2_Init+0x74>)
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <MX_I2C2_Init+0x7c>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_I2C2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_I2C2_Init+0x74>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_I2C2_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_I2C2_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <MX_I2C2_Init+0x74>)
 80007ec:	f001 ff84 	bl	80026f8 <HAL_I2C_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007f6:	f000 f9bb 	bl	8000b70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_I2C2_Init+0x74>)
 80007fe:	f002 f816 	bl	800282e <HAL_I2CEx_ConfigAnalogFilter>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000808:	f000 f9b2 	bl	8000b70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_I2C2_Init+0x74>)
 8000810:	f002 f858 	bl	80028c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 f9a9 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000100 	.word	0x20000100
 8000828:	40005800 	.word	0x40005800
 800082c:	30a0a7fb 	.word	0x30a0a7fb

08000830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b098      	sub	sp, #96	; 0x60
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2234      	movs	r2, #52	; 0x34
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fcad 	bl	80051bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000862:	4b41      	ldr	r3, [pc, #260]	; (8000968 <MX_TIM1_Init+0x138>)
 8000864:	4a41      	ldr	r2, [pc, #260]	; (800096c <MX_TIM1_Init+0x13c>)
 8000866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000868:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <MX_TIM1_Init+0x138>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <MX_TIM1_Init+0x138>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000874:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_TIM1_Init+0x138>)
 8000876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <MX_TIM1_Init+0x138>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <MX_TIM1_Init+0x138>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <MX_TIM1_Init+0x138>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800088e:	4836      	ldr	r0, [pc, #216]	; (8000968 <MX_TIM1_Init+0x138>)
 8000890:	f003 f826 	bl	80038e0 <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 f969 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ae:	4619      	mov	r1, r3
 80008b0:	482d      	ldr	r0, [pc, #180]	; (8000968 <MX_TIM1_Init+0x138>)
 80008b2:	f003 fd13 	bl	80042dc <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008bc:	f000 f958 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008cc:	2300      	movs	r3, #0
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e0:	2208      	movs	r2, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	4820      	ldr	r0, [pc, #128]	; (8000968 <MX_TIM1_Init+0x138>)
 80008e6:	f003 f853 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008f0:	f000 f93e 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008f8:	220c      	movs	r2, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <MX_TIM1_Init+0x138>)
 80008fe:	f003 f847 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000908:	f000 f932 	bl	8000b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM1_Init+0x138>)
 800094a:	f003 fd49 	bl	80043e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000954:	f000 f90c 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM1_Init+0x138>)
 800095a:	f000 fa63 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 800095e:	bf00      	nop
 8000960:	3760      	adds	r7, #96	; 0x60
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000154 	.word	0x20000154
 800096c:	40012c00 	.word	0x40012c00

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	463b      	mov	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_TIM3_Init+0xc4>)
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_TIM3_Init+0xc8>)
 8000998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_TIM3_Init+0xc4>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_TIM3_Init+0xc4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_TIM3_Init+0xc4>)
 80009a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_TIM3_Init+0xc4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_TIM3_Init+0xc4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ba:	481e      	ldr	r0, [pc, #120]	; (8000a34 <MX_TIM3_Init+0xc4>)
 80009bc:	f002 ff90 	bl	80038e0 <HAL_TIM_PWM_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80009c6:	f000 f8d3 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4816      	ldr	r0, [pc, #88]	; (8000a34 <MX_TIM3_Init+0xc4>)
 80009da:	f003 fc7f 	bl	80042dc <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80009e4:	f000 f8c4 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2360      	movs	r3, #96	; 0x60
 80009ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	4619      	mov	r1, r3
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_TIM3_Init+0xc4>)
 8000a00:	f002 ffc6 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 f8b1 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2204      	movs	r2, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM3_Init+0xc4>)
 8000a16:	f002 ffbb 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a20:	f000 f8a6 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM3_Init+0xc4>)
 8000a26:	f000 f9fd 	bl	8000e24 <HAL_TIM_MspPostInit>

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001a0 	.word	0x200001a0
 8000a38:	40000400 	.word	0x40000400

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <MX_USART2_UART_Init+0x94>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a86:	f003 fd37 	bl	80044f8 <HAL_UART_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a90:	f000 f86e 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000a98:	f004 faa2 	bl	8004fe0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa2:	f000 f865 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000aaa:	f004 fad7 	bl	800505c <HAL_UARTEx_SetRxFifoThreshold>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab4:	f000 f85c 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_USART2_UART_Init+0x90>)
 8000aba:	f004 fa58 	bl	8004f6e <HAL_UARTEx_DisableFifoMode>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac4:	f000 f854 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200001ec 	.word	0x200001ec
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_GPIO_Init+0x94>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <MX_GPIO_Init+0x94>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0x94>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0x94>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_GPIO_Init+0x94>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_GPIO_Init+0x94>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <MX_GPIO_Init+0x98>)
 8000b22:	f001 fdb7 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f001 fc28 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|LD2_Pin;
 8000b40:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_GPIO_Init+0x98>)
 8000b5a:	f001 fc19 	bl	8002390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000400 	.word	0x48000400

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09c      	sub	sp, #112	; 0x70
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	2244      	movs	r2, #68	; 0x44
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fae9 	bl	80051bc <memset>
  if(hadc->Instance==ADC1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bf2:	d13e      	bne.n	8000c72 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bfe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fc7b 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c10:	f7ff ffae 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c14:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <HAL_ADC_MspInit+0x13c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a39      	ldr	r2, [pc, #228]	; (8000d00 <HAL_ADC_MspInit+0x13c>)
 8000c1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c1e:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <HAL_ADC_MspInit+0x13c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10b      	bne.n	8000c3e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a30      	ldr	r2, [pc, #192]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c56:	2303      	movs	r3, #3
 8000c58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f001 fb90 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c70:	e042      	b.n	8000cf8 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <HAL_ADC_MspInit+0x144>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d13d      	bne.n	8000cf8 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fc37 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000c98:	f7ff ff6a 	bl	8000b70 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_ADC_MspInit+0x13c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0x13c>)
 8000ca4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_ADC_MspInit+0x13c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d10b      	bne.n	8000cc6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000cb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_ADC_MspInit+0x140>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cde:	2320      	movs	r3, #32
 8000ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f001 fb4c 	bl	8002390 <HAL_GPIO_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	3770      	adds	r7, #112	; 0x70
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000280 	.word	0x20000280
 8000d04:	40021000 	.word	0x40021000
 8000d08:	50000100 	.word	0x50000100

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	; 0x68
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2244      	movs	r2, #68	; 0x44
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fa45 	bl	80051bc <memset>
  if(hi2c->Instance==I2C2)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_I2C_MspInit+0xa8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d137      	bne.n	8000dac <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fbd9 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff ff0c 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_I2C_MspInit+0xac>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_I2C_MspInit+0xac>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_I2C_MspInit+0xac>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d74:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d76:	2312      	movs	r3, #18
 8000d78:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d82:	2304      	movs	r3, #4
 8000d84:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f001 fafe 	bl	8002390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_I2C_MspInit+0xac>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_I2C_MspInit+0xac>)
 8000d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_I2C_MspInit+0xac>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3768      	adds	r7, #104	; 0x68
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005800 	.word	0x40005800
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_TIM_PWM_MspInit+0x5c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10c      	bne.n	8000de8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de6:	e010      	b.n	8000e0a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_TIM_PWM_MspInit+0x64>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10b      	bne.n	8000e0a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40000400 	.word	0x40000400

08000e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <HAL_TIM_MspPostInit+0xd0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d130      	bne.n	8000ea8 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <HAL_TIM_MspPostInit+0xd4>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <HAL_TIM_MspPostInit+0xd4>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_TIM_MspPostInit+0xd4>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e70:	2306      	movs	r3, #6
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f001 fa87 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000e94:	230b      	movs	r3, #11
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f001 fa75 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ea6:	e021      	b.n	8000eec <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a13      	ldr	r2, [pc, #76]	; (8000efc <HAL_TIM_MspPostInit+0xd8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d11c      	bne.n	8000eec <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_TIM_MspPostInit+0xd4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_TIM_MspPostInit+0xd4>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_TIM_MspPostInit+0xd4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000eca:	2350      	movs	r3, #80	; 0x50
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eda:	2302      	movs	r3, #2
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f001 fa52 	bl	8002390 <HAL_GPIO_Init>
}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40012c00 	.word	0x40012c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40000400 	.word	0x40000400

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b09a      	sub	sp, #104	; 0x68
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2244      	movs	r2, #68	; 0x44
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 f94b 	bl	80051bc <memset>
  if(huart->Instance==USART2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_UART_MspInit+0xa8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d136      	bne.n	8000f9e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fadf 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f48:	f7ff fe12 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_UART_MspInit+0xac>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	4a16      	ldr	r2, [pc, #88]	; (8000fac <HAL_UART_MspInit+0xac>)
 8000f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f56:	6593      	str	r3, [r2, #88]	; 0x58
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_UART_MspInit+0xac>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_UART_MspInit+0xac>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_UART_MspInit+0xac>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_UART_MspInit+0xac>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f001 f9f9 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3768      	adds	r7, #104	; 0x68
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40021000 	.word	0x40021000

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 f890 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800102a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f004 f88d 	bl	8005174 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105a:	f7ff fa5f 	bl	800051c <main>

0800105e <LoopForever>:

LoopForever:
    b LoopForever
 800105e:	e7fe      	b.n	800105e <LoopForever>
  ldr   r0, =_estack
 8001060:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800106c:	08005234 	.word	0x08005234
  ldr r2, =_sbss
 8001070:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001074:	20000288 	.word	0x20000288

08001078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>

0800107a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f001 f951 	bl	800232c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f80e 	bl	80010ac <HAL_InitTick>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	e001      	b.n	80010a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800109c:	f7ff fd6e 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a0:	79fb      	ldrb	r3, [r7, #7]

}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_InitTick+0x68>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d022      	beq.n	8001106 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_InitTick+0x6c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <HAL_InitTick+0x68>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80010d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 f94e 	bl	8002376 <HAL_SYSTICK_Config>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10f      	bne.n	8001100 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	d809      	bhi.n	80010fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e6:	2200      	movs	r2, #0
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	f001 f928 	bl	8002342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_InitTick+0x70>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e007      	b.n	800110a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e004      	b.n	800110a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e001      	b.n	800110a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000008 	.word	0x20000008
 8001118:	20000000 	.word	0x20000000
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x1c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x20>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4413      	add	r3, r2
 800112e:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_IncTick+0x1c>)
 8001130:	6013      	str	r3, [r2, #0]
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20000284 	.word	0x20000284
 8001140:	20000008 	.word	0x20000008

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000284 	.word	0x20000284

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d004      	beq.n	8001180 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_Delay+0x40>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001180:	bf00      	nop
 8001182:	f7ff ffdf 	bl	8001144 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	429a      	cmp	r2, r3
 8001190:	d8f7      	bhi.n	8001182 <HAL_Delay+0x26>
  {
  }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000008 	.word	0x20000008

080011a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3360      	adds	r3, #96	; 0x60
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <LL_ADC_SetOffset+0x44>)
 800122a:	4013      	ands	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	4313      	orrs	r3, r2
 8001238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001240:	bf00      	nop
 8001242:	371c      	adds	r7, #28
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	03fff000 	.word	0x03fff000

08001250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	461a      	mov	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3360      	adds	r3, #96	; 0x60
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3360      	adds	r3, #96	; 0x60
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3360      	adds	r3, #96	; 0x60
 80012f8:	461a      	mov	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	431a      	orrs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	615a      	str	r2, [r3, #20]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3330      	adds	r3, #48	; 0x30
 8001354:	461a      	mov	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	4413      	add	r3, r2
 8001362:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	211f      	movs	r1, #31
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0e9b      	lsrs	r3, r3, #26
 800137c:	f003 011f 	and.w	r1, r3, #31
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	431a      	orrs	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3314      	adds	r3, #20
 80013ac:	461a      	mov	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0e5b      	lsrs	r3, r3, #25
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	0d1b      	lsrs	r3, r3, #20
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2107      	movs	r1, #7
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	401a      	ands	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	0d1b      	lsrs	r3, r3, #20
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	431a      	orrs	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0318 	and.w	r3, r3, #24
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001418:	40d9      	lsrs	r1, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	400b      	ands	r3, r1
 800141e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001422:	431a      	orrs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	0007ffff 	.word	0x0007ffff

0800143c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800144c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6093      	str	r3, [r2, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001474:	d101      	bne.n	800147a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800149c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014c4:	d101      	bne.n	80014ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <LL_ADC_IsEnabled+0x18>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <LL_ADC_IsEnabled+0x1a>
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b04      	cmp	r3, #4
 8001510:	d101      	bne.n	8001516 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b08      	cmp	r3, #8
 8001536:	d101      	bne.n	800153c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e167      	b.n	8001836 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fb25 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff67 	bl	8001460 <LL_ADC_IsDeepPowerDownEnabled>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff4d 	bl	800143c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff82 	bl	80014b0 <LL_ADC_IsInternalRegulatorEnabled>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d115      	bne.n	80015de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff66 	bl	8001488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015bc:	4ba0      	ldr	r3, [pc, #640]	; (8001840 <HAL_ADC_Init+0x2f4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	4aa0      	ldr	r2, [pc, #640]	; (8001844 <HAL_ADC_Init+0x2f8>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	3301      	adds	r3, #1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff64 	bl	80014b0 <LL_ADC_IsInternalRegulatorEnabled>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	f043 0210 	orr.w	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff75 	bl	80014fe <LL_ADC_REG_IsConversionOngoing>
 8001614:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8100 	bne.w	8001824 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 80fc 	bne.w	8001824 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001634:	f043 0202 	orr.w	r2, r3, #2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff49 	bl	80014d8 <LL_ADC_IsEnabled>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d111      	bne.n	8001670 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800164c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001650:	f7ff ff42 	bl	80014d8 <LL_ADC_IsEnabled>
 8001654:	4604      	mov	r4, r0
 8001656:	487c      	ldr	r0, [pc, #496]	; (8001848 <HAL_ADC_Init+0x2fc>)
 8001658:	f7ff ff3e 	bl	80014d8 <LL_ADC_IsEnabled>
 800165c:	4603      	mov	r3, r0
 800165e:	4323      	orrs	r3, r4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4619      	mov	r1, r3
 800166a:	4878      	ldr	r0, [pc, #480]	; (800184c <HAL_ADC_Init+0x300>)
 800166c:	f7ff fd98 	bl	80011a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7f5b      	ldrb	r3, [r3, #29]
 8001674:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800167a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001680:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001686:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800168e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800169a:	2b01      	cmp	r3, #1
 800169c:	d106      	bne.n	80016ac <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	045b      	lsls	r3, r3, #17
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <HAL_ADC_Init+0x304>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	430b      	orrs	r3, r1
 80016da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff14 	bl	8001524 <LL_ADC_INJ_IsConversionOngoing>
 80016fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d16d      	bne.n	80017e0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d16a      	bne.n	80017e0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800170e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001716:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001726:	f023 0302 	bic.w	r3, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	430b      	orrs	r3, r1
 8001732:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d017      	beq.n	800176c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800174a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001754:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6911      	ldr	r1, [r2, #16]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	430b      	orrs	r3, r1
 8001766:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800176a:	e013      	b.n	8001794 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800177a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800178c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001790:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800179a:	2b01      	cmp	r3, #1
 800179c:	d118      	bne.n	80017d0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017b4:	4311      	orrs	r1, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017ba:	4311      	orrs	r1, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017c0:	430a      	orrs	r2, r1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	e007      	b.n	80017e0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10c      	bne.n	8001802 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f023 010f 	bic.w	r1, r3, #15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	1e5a      	subs	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001800:	e007      	b.n	8001812 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 020f 	bic.w	r2, r2, #15
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c
 8001822:	e007      	b.n	8001834 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	f043 0210 	orr.w	r2, r3, #16
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001834:	7ffb      	ldrb	r3, [r7, #31]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	20000000 	.word	0x20000000
 8001844:	053e2d63 	.word	0x053e2d63
 8001848:	50000100 	.word	0x50000100
 800184c:	50000300 	.word	0x50000300
 8001850:	fff04007 	.word	0xfff04007

08001854 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0b6      	sub	sp, #216	; 0xd8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x22>
 8001872:	2302      	movs	r3, #2
 8001874:	e3c8      	b.n	8002008 <HAL_ADC_ConfigChannel+0x7b4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe3b 	bl	80014fe <LL_ADC_REG_IsConversionOngoing>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 83ad 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	f7ff fd51 	bl	8001344 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fe29 	bl	80014fe <LL_ADC_REG_IsConversionOngoing>
 80018ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe35 	bl	8001524 <LL_ADC_INJ_IsConversionOngoing>
 80018ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 81d9 	bne.w	8001c7a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 81d4 	bne.w	8001c7a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018da:	d10f      	bne.n	80018fc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff fd58 	bl	800139c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fd12 	bl	800131e <LL_ADC_SetSamplingTimeCommonConfig>
 80018fa:	e00e      	b.n	800191a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	461a      	mov	r2, r3
 800190a:	f7ff fd47 	bl	800139c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fd02 	bl	800131e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d022      	beq.n	8001982 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6919      	ldr	r1, [r3, #16]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800194c:	f7ff fc5c 	bl	8001208 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6919      	ldr	r1, [r3, #16]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	461a      	mov	r2, r3
 800195e:	f7ff fca8 	bl	80012b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x124>
 8001972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001976:	e000      	b.n	800197a <HAL_ADC_ConfigChannel+0x126>
 8001978:	2300      	movs	r3, #0
 800197a:	461a      	mov	r2, r3
 800197c:	f7ff fcb4 	bl	80012e8 <LL_ADC_SetOffsetSaturation>
 8001980:	e17b      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc61 	bl	8001250 <LL_ADC_GetOffsetChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x15a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fc56 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	0e9b      	lsrs	r3, r3, #26
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	e01e      	b.n	80019ec <HAL_ADC_ConfigChannel+0x198>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc4b 	bl	8001250 <LL_ADC_GetOffsetChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e004      	b.n	80019ea <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80019e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1b0>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0e9b      	lsrs	r3, r3, #26
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	e018      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1e2>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e004      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001a2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fc1a 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fbfe 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x220>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fbf3 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	0e9b      	lsrs	r3, r3, #26
 8001a6e:	f003 021f 	and.w	r2, r3, #31
 8001a72:	e01e      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x25e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fbe8 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e004      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x276>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	e018      	b.n	8001afc <HAL_ADC_ConfigChannel+0x2a8>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001aee:	2320      	movs	r3, #32
 8001af0:	e004      	b.n	8001afc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d106      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	2101      	movs	r1, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fbb7 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2102      	movs	r1, #2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fb9b 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x2e6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fb90 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	e01e      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x324>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fb85 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e004      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x33c>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	e016      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x36a>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	e004      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d106      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2102      	movs	r1, #2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fb56 	bl	800127c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fb3a 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10a      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x3a8>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2103      	movs	r1, #3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fb2f 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	f003 021f 	and.w	r2, r3, #31
 8001bfa:	e017      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x3d8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2103      	movs	r1, #3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fb24 	bl	8001250 <LL_ADC_GetOffsetChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c16:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e003      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x3f0>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0e9b      	lsrs	r3, r3, #26
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	e011      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x414>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c54:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	e003      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d106      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	2103      	movs	r1, #3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fb01 	bl	800127c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fc2a 	bl	80014d8 <LL_ADC_IsEnabled>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 8140 	bne.w	8001f0c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f7ff fbab 	bl	80013f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	4a8f      	ldr	r2, [pc, #572]	; (8001ee0 <HAL_ADC_ConfigChannel+0x68c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	f040 8131 	bne.w	8001f0c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x47e>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0e9b      	lsrs	r3, r3, #26
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	bf94      	ite	ls
 8001cca:	2301      	movls	r3, #1
 8001ccc:	2300      	movhi	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	e019      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x4b2>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001cea:	2320      	movs	r3, #32
 8001cec:	e003      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	bf94      	ite	ls
 8001d00:	2301      	movls	r3, #1
 8001d02:	2300      	movhi	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d079      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x4d2>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	069b      	lsls	r3, r3, #26
 8001d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d24:	e015      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x4fe>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d36:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	069b      	lsls	r3, r3, #26
 8001d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x51e>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0e9b      	lsrs	r3, r3, #26
 8001d64:	3301      	adds	r3, #1
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	e017      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x54e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e003      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	ea42 0103 	orr.w	r1, r2, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x574>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	051b      	lsls	r3, r3, #20
 8001dc6:	e018      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x5a6>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001de0:	2320      	movs	r3, #32
 8001de2:	e003      	b.n	8001dec <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	e081      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x5c6>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	3301      	adds	r3, #1
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e18:	e015      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x5f2>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e003      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	069b      	lsls	r3, r3, #26
 8001e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x612>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	e017      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x642>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	61fb      	str	r3, [r7, #28]
  return result;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e003      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	ea42 0103 	orr.w	r1, r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x66e>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b1e      	subs	r3, #30
 8001eba:	051b      	lsls	r3, r3, #20
 8001ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	e01e      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x6ac>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	613b      	str	r3, [r7, #16]
  return result;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e006      	b.n	8001eec <HAL_ADC_ConfigChannel+0x698>
 8001ede:	bf00      	nop
 8001ee0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	f003 021f 	and.w	r2, r3, #31
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b1e      	subs	r3, #30
 8001efa:	051b      	lsls	r3, r3, #20
 8001efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f00:	430b      	orrs	r3, r1
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6892      	ldr	r2, [r2, #8]
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7ff fa48 	bl	800139c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d071      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f18:	483e      	ldr	r0, [pc, #248]	; (8002014 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f1a:	f7ff f967 	bl	80011ec <LL_ADC_GetCommonPathInternalCh>
 8001f1e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3c      	ldr	r2, [pc, #240]	; (8002018 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_ADC_ConfigChannel+0x6e2>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a3a      	ldr	r2, [pc, #232]	; (800201c <HAL_ADC_ConfigChannel+0x7c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d127      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d121      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4a:	d157      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f54:	4619      	mov	r1, r3
 8001f56:	482f      	ldr	r0, [pc, #188]	; (8002014 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f58:	f7ff f935 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	4a30      	ldr	r2, [pc, #192]	; (8002024 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f76:	e002      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f84:	e03a      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d113      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10d      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_ADC_ConfigChannel+0x7d8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02a      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4818      	ldr	r0, [pc, #96]	; (8002014 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fb2:	f7ff f908 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fb6:	e021      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d11c      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d116      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_ADC_ConfigChannel+0x7d8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d011      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480c      	ldr	r0, [pc, #48]	; (8002014 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fe4:	f7ff f8ef 	bl	80011c6 <LL_ADC_SetCommonPathInternalCh>
 8001fe8:	e008      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002004:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002008:	4618      	mov	r0, r3
 800200a:	37d8      	adds	r7, #216	; 0xd8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	80080000 	.word	0x80080000
 8002014:	50000300 	.word	0x50000300
 8002018:	c3210000 	.word	0xc3210000
 800201c:	90c00010 	.word	0x90c00010
 8002020:	20000000 	.word	0x20000000
 8002024:	053e2d63 	.word	0x053e2d63
 8002028:	c7520000 	.word	0xc7520000
 800202c:	50000100 	.word	0x50000100
 8002030:	cb840000 	.word	0xcb840000

08002034 <LL_ADC_IsEnabled>:
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <LL_ADC_IsEnabled+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_ADC_IsEnabled+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_REG_IsConversionOngoing>:
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d101      	bne.n	8002072 <LL_ADC_REG_IsConversionOngoing+0x18>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b0a1      	sub	sp, #132	; 0x84
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800209a:	2302      	movs	r3, #2
 800209c:	e08b      	b.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020a6:	2300      	movs	r3, #0
 80020a8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020aa:	2300      	movs	r3, #0
 80020ac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b6:	d102      	bne.n	80020be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	e001      	b.n	80020c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10b      	bne.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	f043 0220 	orr.w	r2, r3, #32
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e06a      	b.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ffb9 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 80020e8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ffb3 	bl	800205a <LL_ADC_REG_IsConversionOngoing>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d14c      	bne.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80020fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d149      	bne.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002100:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002102:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d028      	beq.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800210c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800211e:	035b      	lsls	r3, r3, #13
 8002120:	430b      	orrs	r3, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002126:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002128:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800212c:	f7ff ff82 	bl	8002034 <LL_ADC_IsEnabled>
 8002130:	4604      	mov	r4, r0
 8002132:	4823      	ldr	r0, [pc, #140]	; (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002134:	f7ff ff7e 	bl	8002034 <LL_ADC_IsEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	4323      	orrs	r3, r4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d133      	bne.n	80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002148:	f023 030f 	bic.w	r3, r3, #15
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	6811      	ldr	r1, [r2, #0]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	6892      	ldr	r2, [r2, #8]
 8002154:	430a      	orrs	r2, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800215a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800215c:	e024      	b.n	80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800215e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002168:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800216e:	f7ff ff61 	bl	8002034 <LL_ADC_IsEnabled>
 8002172:	4604      	mov	r4, r0
 8002174:	4812      	ldr	r0, [pc, #72]	; (80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002176:	f7ff ff5d 	bl	8002034 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	4323      	orrs	r3, r4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d112      	bne.n	80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800218a:	f023 030f 	bic.w	r3, r3, #15
 800218e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002190:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002192:	e009      	b.n	80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021a6:	e000      	b.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80021b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3784      	adds	r7, #132	; 0x84
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	50000100 	.word	0x50000100
 80021c4:	50000300 	.word	0x50000300

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f8:	d301      	bcc.n	80022fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00f      	b.n	800231e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <SysTick_Config+0x40>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002306:	210f      	movs	r1, #15
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f7ff ff8e 	bl	800222c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <SysTick_Config+0x40>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SysTick_Config+0x40>)
 8002318:	2207      	movs	r2, #7
 800231a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	e000e010 	.word	0xe000e010

0800232c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff47 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002350:	f7ff ff5e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff ff90 	bl	8002280 <NVIC_EncodePriority>
 8002360:	4602      	mov	r2, r0
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5f 	bl	800222c <__NVIC_SetPriority>
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ffb2 	bl	80022e8 <SysTick_Config>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800239e:	e15a      	b.n	8002656 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 814c 	beq.w	8002650 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d005      	beq.n	80023d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d130      	bne.n	8002432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002406:	2201      	movs	r2, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0201 	and.w	r2, r3, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b03      	cmp	r3, #3
 800243c:	d017      	beq.n	800246e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d123      	bne.n	80024c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0203 	and.w	r2, r3, #3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002504:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <HAL_GPIO_Init+0x2e4>)
 8002506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002508:	4a5a      	ldr	r2, [pc, #360]	; (8002674 <HAL_GPIO_Init+0x2e4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6613      	str	r3, [r2, #96]	; 0x60
 8002510:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_GPIO_Init+0x2e4>)
 8002512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251c:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002546:	d01f      	beq.n	8002588 <HAL_GPIO_Init+0x1f8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_GPIO_Init+0x2ec>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d019      	beq.n	8002584 <HAL_GPIO_Init+0x1f4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a4b      	ldr	r2, [pc, #300]	; (8002680 <HAL_GPIO_Init+0x2f0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_GPIO_Init+0x1f0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <HAL_GPIO_Init+0x2f4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00d      	beq.n	800257c <HAL_GPIO_Init+0x1ec>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a49      	ldr	r2, [pc, #292]	; (8002688 <HAL_GPIO_Init+0x2f8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_Init+0x1e8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a48      	ldr	r2, [pc, #288]	; (800268c <HAL_GPIO_Init+0x2fc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_GPIO_Init+0x1e4>
 8002570:	2305      	movs	r3, #5
 8002572:	e00a      	b.n	800258a <HAL_GPIO_Init+0x1fa>
 8002574:	2306      	movs	r3, #6
 8002576:	e008      	b.n	800258a <HAL_GPIO_Init+0x1fa>
 8002578:	2304      	movs	r3, #4
 800257a:	e006      	b.n	800258a <HAL_GPIO_Init+0x1fa>
 800257c:	2303      	movs	r3, #3
 800257e:	e004      	b.n	800258a <HAL_GPIO_Init+0x1fa>
 8002580:	2302      	movs	r3, #2
 8002582:	e002      	b.n	800258a <HAL_GPIO_Init+0x1fa>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_GPIO_Init+0x1fa>
 8002588:	2300      	movs	r3, #0
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	f002 0203 	and.w	r2, r2, #3
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	4093      	lsls	r3, r2
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259a:	4937      	ldr	r1, [pc, #220]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_GPIO_Init+0x300>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025cc:	4a30      	ldr	r2, [pc, #192]	; (8002690 <HAL_GPIO_Init+0x300>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <HAL_GPIO_Init+0x300>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025f6:	4a26      	ldr	r2, [pc, #152]	; (8002690 <HAL_GPIO_Init+0x300>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_GPIO_Init+0x300>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002620:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <HAL_GPIO_Init+0x300>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_GPIO_Init+0x300>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800264a:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_GPIO_Init+0x300>)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	f47f ae9d 	bne.w	80023a0 <HAL_GPIO_Init+0x10>
  }
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40021000 	.word	0x40021000
 8002678:	40010000 	.word	0x40010000
 800267c:	48000400 	.word	0x48000400
 8002680:	48000800 	.word	0x48000800
 8002684:	48000c00 	.word	0x48000c00
 8002688:	48001000 	.word	0x48001000
 800268c:	48001400 	.word	0x48001400
 8002690:	40010400 	.word	0x40010400

08002694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	041a      	lsls	r2, r3, #16
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	43d9      	mvns	r1, r3
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	400b      	ands	r3, r1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e08d      	b.n	8002826 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe faf4 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e006      	b.n	8002780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800277e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d108      	bne.n	800279a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	e007      	b.n	80027aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69d9      	ldr	r1, [r3, #28]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	d138      	bne.n	80028b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800284e:	2302      	movs	r3, #2
 8002850:	e032      	b.n	80028b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2224      	movs	r2, #36	; 0x24
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002880:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d139      	bne.n	800294e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e033      	b.n	8002950 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002916:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800294e:	2302      	movs	r3, #2
  }
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d141      	bne.n	80029ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d131      	bne.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002978:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800297e:	4a46      	ldr	r2, [pc, #280]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002990:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002998:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2232      	movs	r2, #50	; 0x32
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	4a3f      	ldr	r2, [pc, #252]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	0c9b      	lsrs	r3, r3, #18
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ae:	e002      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d102      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f2      	bne.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ca:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d6:	d158      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e057      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029dc:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	4a2d      	ldr	r2, [pc, #180]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029ec:	e04d      	b.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d141      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d131      	bne.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a0a:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2232      	movs	r2, #50	; 0x32
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	0c9b      	lsrs	r3, r3, #18
 8002a36:	3301      	adds	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3a:	e002      	b.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d102      	bne.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f2      	bne.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d112      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e011      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a78:	e007      	b.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	431bde83 	.word	0x431bde83

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e2fe      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d075      	beq.n	8002bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac2:	4b97      	ldr	r3, [pc, #604]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002acc:	4b94      	ldr	r3, [pc, #592]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3e>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x44>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d05b      	beq.n	8002bac <HAL_RCC_OscConfig+0x108>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d157      	bne.n	8002bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e2d9      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d106      	bne.n	8002b18 <HAL_RCC_OscConfig+0x74>
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a84      	ldr	r2, [pc, #528]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e01d      	b.n	8002b54 <HAL_RCC_OscConfig+0xb0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x98>
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7e      	ldr	r2, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0xb0>
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a74      	ldr	r2, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe faf2 	bl	8001144 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe faee 	bl	8001144 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e29e      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0xc0>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fade 	bl	8001144 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fada 	bl	8001144 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e28a      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9e:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0xe8>
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d075      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bba:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc4:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_OscConfig+0x136>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d002      	beq.n	8002be0 <HAL_RCC_OscConfig+0x13c>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d11f      	bne.n	8002c20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x154>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e25d      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	4946      	ldr	r1, [pc, #280]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c0c:	4b45      	ldr	r3, [pc, #276]	; (8002d24 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fa4b 	bl	80010ac <HAL_InitTick>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d043      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e249      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d023      	beq.n	8002c70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c28:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3c      	ldr	r2, [pc, #240]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fa86 	bl	8001144 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fa82 	bl	8001144 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e232      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	492d      	ldr	r1, [pc, #180]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
 8002c6e:	e01a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fa62 	bl	8001144 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fa5e 	bl	8001144 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e20e      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1e0>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d041      	beq.n	8002d36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe fa3b 	bl	8001144 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fa37 	bl	8001144 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1e7      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ef      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x22e>
 8002cf2:	e020      	b.n	8002d36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fa1e 	bl	8001144 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d0a:	e00d      	b.n	8002d28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fa1a 	bl	8001144 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d906      	bls.n	8002d28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1ca      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d28:	4b8c      	ldr	r3, [pc, #560]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1ea      	bne.n	8002d0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80a6 	beq.w	8002e90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d48:	4b84      	ldr	r3, [pc, #528]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2b4>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x2b6>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	4b7f      	ldr	r3, [pc, #508]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	4a7e      	ldr	r2, [pc, #504]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6593      	str	r3, [r2, #88]	; 0x58
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d76:	2301      	movs	r3, #1
 8002d78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7a:	4b79      	ldr	r3, [pc, #484]	; (8002f60 <HAL_RCC_OscConfig+0x4bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x4bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x4bc>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7fe f9d7 	bl	8001144 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7fe f9d3 	bl	8001144 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e183      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dac:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x4bc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d108      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x32e>
 8002dc0:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd0:	e024      	b.n	8002e1c <HAL_RCC_OscConfig+0x378>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d110      	bne.n	8002dfc <HAL_RCC_OscConfig+0x358>
 8002dda:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	4a5e      	ldr	r2, [pc, #376]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dea:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	4a5a      	ldr	r2, [pc, #360]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dfa:	e00f      	b.n	8002e1c <HAL_RCC_OscConfig+0x378>
 8002dfc:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	4a56      	ldr	r2, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d016      	beq.n	8002e52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe f98e 	bl	8001144 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f98a 	bl	8001144 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e138      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e42:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ed      	beq.n	8002e2c <HAL_RCC_OscConfig+0x388>
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe f977 	bl	8001144 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe f973 	bl	8001144 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e121      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ed      	bne.n	8002e5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e7e:	7ffb      	ldrb	r3, [r7, #31]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d03c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01c      	beq.n	8002ede <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eaa:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe f946 	bl	8001144 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ebc:	f7fe f942 	bl	8001144 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0f2      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ef      	beq.n	8002ebc <HAL_RCC_OscConfig+0x418>
 8002edc:	e01b      	b.n	8002f16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe f929 	bl	8001144 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef6:	f7fe f925 	bl	8001144 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0d5      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ef      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80c9 	beq.w	80030b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	f000 8083 	beq.w	8003034 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d15e      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_RCC_OscConfig+0x4b8>)
 8002f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe f8ff 	bl	8001144 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f48:	e00c      	b.n	8002f64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe f8fb 	bl	8001144 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d905      	bls.n	8002f64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0ab      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f64:	4b55      	ldr	r3, [pc, #340]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ec      	bne.n	8002f4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f70:	4b52      	ldr	r3, [pc, #328]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	4b52      	ldr	r3, [pc, #328]	; (80030c0 <HAL_RCC_OscConfig+0x61c>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6a11      	ldr	r1, [r2, #32]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f80:	3a01      	subs	r2, #1
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	4311      	orrs	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f8a:	0212      	lsls	r2, r2, #8
 8002f8c:	4311      	orrs	r1, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f92:	0852      	lsrs	r2, r2, #1
 8002f94:	3a01      	subs	r2, #1
 8002f96:	0552      	lsls	r2, r2, #21
 8002f98:	4311      	orrs	r1, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f9e:	0852      	lsrs	r2, r2, #1
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	0652      	lsls	r2, r2, #25
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002faa:	06d2      	lsls	r2, r2, #27
 8002fac:	430a      	orrs	r2, r1
 8002fae:	4943      	ldr	r1, [pc, #268]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a40      	ldr	r2, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc0:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a3d      	ldr	r2, [pc, #244]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f8ba 	bl	8001144 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe f8b6 	bl	8001144 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e066      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe6:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x530>
 8002ff2:	e05e      	b.n	80030b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a30      	ldr	r2, [pc, #192]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe f8a0 	bl	8001144 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe f89c 	bl	8001144 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e04c      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	4924      	ldr	r1, [pc, #144]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x620>)
 800302e:	4013      	ands	r3, r2
 8003030:	60cb      	str	r3, [r1, #12]
 8003032:	e03e      	b.n	80030b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e039      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_OscConfig+0x618>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	429a      	cmp	r2, r3
 8003052:	d12c      	bne.n	80030ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	3b01      	subs	r3, #1
 8003060:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d123      	bne.n	80030ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d11b      	bne.n	80030ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d113      	bne.n	80030ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d109      	bne.n	80030ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	019f800c 	.word	0x019f800c
 80030c4:	feeefffc 	.word	0xfeeefffc

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e11e      	b.n	800331e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b91      	ldr	r3, [pc, #580]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d910      	bls.n	8003110 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b8e      	ldr	r3, [pc, #568]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 020f 	bic.w	r2, r3, #15
 80030f6:	498c      	ldr	r1, [pc, #560]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b8a      	ldr	r3, [pc, #552]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e106      	b.n	800331e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d073      	beq.n	8003204 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d129      	bne.n	8003178 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003124:	4b81      	ldr	r3, [pc, #516]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0f4      	b.n	800331e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003134:	f000 f99e 	bl	8003474 <RCC_GetSysClockFreqFromPLLSource>
 8003138:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4a7c      	ldr	r2, [pc, #496]	; (8003330 <HAL_RCC_ClockConfig+0x268>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d93f      	bls.n	80031c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003142:	4b7a      	ldr	r3, [pc, #488]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003156:	2b00      	cmp	r3, #0
 8003158:	d033      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d12f      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316a:	4a70      	ldr	r2, [pc, #448]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 800316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003170:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e024      	b.n	80031c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d107      	bne.n	8003190 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003180:	4b6a      	ldr	r3, [pc, #424]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0c6      	b.n	800331e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0be      	b.n	800331e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031a0:	f000 f8ce 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4a61      	ldr	r2, [pc, #388]	; (8003330 <HAL_RCC_ClockConfig+0x268>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d909      	bls.n	80031c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031ae:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b6:	4a5d      	ldr	r2, [pc, #372]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b5a      	ldr	r3, [pc, #360]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4957      	ldr	r1, [pc, #348]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d4:	f7fd ffb6 	bl	8001144 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fd ffb2 	bl	8001144 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e095      	b.n	800331e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d023      	beq.n	8003258 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003226:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003234:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800323c:	4a3b      	ldr	r2, [pc, #236]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 800323e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b39      	ldr	r3, [pc, #228]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4936      	ldr	r1, [pc, #216]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
 8003256:	e008      	b.n	800326a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b80      	cmp	r3, #128	; 0x80
 800325c:	d105      	bne.n	800326a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800325e:	4b33      	ldr	r3, [pc, #204]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4a32      	ldr	r2, [pc, #200]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 8003264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003268:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d21d      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 020f 	bic.w	r2, r3, #15
 8003280:	4929      	ldr	r1, [pc, #164]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003288:	f7fd ff5c 	bl	8001144 <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fd ff58 	bl	8001144 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e03b      	b.n	800331e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1ed      	bne.n	8003290 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4917      	ldr	r1, [pc, #92]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	490f      	ldr	r1, [pc, #60]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032f2:	f000 f825 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCC_ClockConfig+0x264>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490c      	ldr	r1, [pc, #48]	; (8003334 <HAL_RCC_ClockConfig+0x26c>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x270>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_ClockConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fec8 	bl	80010ac <HAL_InitTick>
 800331c:	4603      	mov	r3, r0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40022000 	.word	0x40022000
 800332c:	40021000 	.word	0x40021000
 8003330:	04c4b400 	.word	0x04c4b400
 8003334:	080051e4 	.word	0x080051e4
 8003338:	20000000 	.word	0x20000000
 800333c:	20000004 	.word	0x20000004

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003346:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d102      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003352:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e047      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d102      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003364:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	e03e      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800336a:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d136      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3301      	adds	r3, #1
 800338c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003394:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800339e:	68d2      	ldr	r2, [r2, #12]
 80033a0:	0a12      	lsrs	r2, r2, #8
 80033a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	617b      	str	r3, [r7, #20]
      break;
 80033ac:	e00c      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ae:	4a13      	ldr	r2, [pc, #76]	; (80033fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b8:	68d2      	ldr	r2, [r2, #12]
 80033ba:	0a12      	lsrs	r2, r2, #8
 80033bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
      break;
 80033c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0e5b      	lsrs	r3, r3, #25
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e001      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033e8:	693b      	ldr	r3, [r7, #16]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4904      	ldr	r1, [pc, #16]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	080051f4 	.word	0x080051f4

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800344c:	f7ff ffda 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0adb      	lsrs	r3, r3, #11
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4904      	ldr	r1, [pc, #16]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	080051f4 	.word	0x080051f4

08003474 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d10c      	bne.n	80034b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034a2:	68d2      	ldr	r2, [r2, #12]
 80034a4:	0a12      	lsrs	r2, r2, #8
 80034a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	617b      	str	r3, [r7, #20]
    break;
 80034b0:	e00c      	b.n	80034cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034b2:	4a12      	ldr	r2, [pc, #72]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	0a12      	lsrs	r2, r2, #8
 80034c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
    break;
 80034ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0e5b      	lsrs	r3, r3, #25
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034e6:	687b      	ldr	r3, [r7, #4]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40021000 	.word	0x40021000
 80034f8:	007a1200 	.word	0x007a1200
 80034fc:	00f42400 	.word	0x00f42400

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003508:	2300      	movs	r3, #0
 800350a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800350c:	2300      	movs	r3, #0
 800350e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8098 	beq.w	800364e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b43      	ldr	r3, [pc, #268]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b40      	ldr	r3, [pc, #256]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a3f      	ldr	r2, [pc, #252]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6593      	str	r3, [r2, #88]	; 0x58
 800353a:	4b3d      	ldr	r3, [pc, #244]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003546:	2301      	movs	r3, #1
 8003548:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a39      	ldr	r2, [pc, #228]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003556:	f7fd fdf5 	bl	8001144 <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800355c:	e009      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fd fdf1 	bl	8001144 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d902      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	74fb      	strb	r3, [r7, #19]
        break;
 8003570:	e005      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ef      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d159      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003584:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01e      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	429a      	cmp	r2, r3
 800359e:	d019      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ac:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fd fdb1 	bl	8001144 <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e4:	e00b      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fd fdad 	bl	8001144 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d902      	bls.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	74fb      	strb	r3, [r7, #19]
            break;
 80035fc:	e006      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ec      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4903      	ldr	r1, [pc, #12]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003628:	e008      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	74bb      	strb	r3, [r7, #18]
 800362e:	e005      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363c:	7c7b      	ldrb	r3, [r7, #17]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4ba6      	ldr	r3, [pc, #664]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	4aa5      	ldr	r2, [pc, #660]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800365a:	4ba0      	ldr	r3, [pc, #640]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f023 0203 	bic.w	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	499c      	ldr	r1, [pc, #624]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800367c:	4b97      	ldr	r3, [pc, #604]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f023 020c 	bic.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	4994      	ldr	r1, [pc, #592]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369e:	4b8f      	ldr	r3, [pc, #572]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	498b      	ldr	r1, [pc, #556]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036c0:	4b86      	ldr	r3, [pc, #536]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4983      	ldr	r1, [pc, #524]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e2:	4b7e      	ldr	r3, [pc, #504]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	497a      	ldr	r1, [pc, #488]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003704:	4b75      	ldr	r3, [pc, #468]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	4972      	ldr	r1, [pc, #456]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003726:	4b6d      	ldr	r3, [pc, #436]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	4969      	ldr	r1, [pc, #420]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003748:	4b64      	ldr	r3, [pc, #400]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4961      	ldr	r1, [pc, #388]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376a:	4b5c      	ldr	r3, [pc, #368]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	4958      	ldr	r1, [pc, #352]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d015      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	4950      	ldr	r1, [pc, #320]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037c4:	4b45      	ldr	r3, [pc, #276]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	4942      	ldr	r1, [pc, #264]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e2:	d105      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e4:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d015      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037fc:	4b37      	ldr	r3, [pc, #220]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4934      	ldr	r1, [pc, #208]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800381a:	d105      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381c:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a2e      	ldr	r2, [pc, #184]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003826:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d015      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	4926      	ldr	r1, [pc, #152]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003852:	d105      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003854:	4b21      	ldr	r3, [pc, #132]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800385e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	4918      	ldr	r1, [pc, #96]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388a:	d105      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a12      	ldr	r2, [pc, #72]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d015      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80038d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e049      	b.n	8003986 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fa58 	bl	8000dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 f94a 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0ff      	b.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b14      	cmp	r3, #20
 80039ba:	f200 80f0 	bhi.w	8003b9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003b9f 	.word	0x08003b9f
 80039cc:	08003b9f 	.word	0x08003b9f
 80039d0:	08003b9f 	.word	0x08003b9f
 80039d4:	08003a59 	.word	0x08003a59
 80039d8:	08003b9f 	.word	0x08003b9f
 80039dc:	08003b9f 	.word	0x08003b9f
 80039e0:	08003b9f 	.word	0x08003b9f
 80039e4:	08003a9b 	.word	0x08003a9b
 80039e8:	08003b9f 	.word	0x08003b9f
 80039ec:	08003b9f 	.word	0x08003b9f
 80039f0:	08003b9f 	.word	0x08003b9f
 80039f4:	08003adb 	.word	0x08003adb
 80039f8:	08003b9f 	.word	0x08003b9f
 80039fc:	08003b9f 	.word	0x08003b9f
 8003a00:	08003b9f 	.word	0x08003b9f
 8003a04:	08003b1d 	.word	0x08003b1d
 8003a08:	08003b9f 	.word	0x08003b9f
 8003a0c:	08003b9f 	.word	0x08003b9f
 8003a10:	08003b9f 	.word	0x08003b9f
 8003a14:	08003b5d 	.word	0x08003b5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f966 	bl	8003cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0208 	orr.w	r2, r2, #8
 8003a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6999      	ldr	r1, [r3, #24]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	619a      	str	r2, [r3, #24]
      break;
 8003a56:	e0a5      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f9d6 	bl	8003e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6999      	ldr	r1, [r3, #24]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	619a      	str	r2, [r3, #24]
      break;
 8003a98:	e084      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fa3f 	bl	8003f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0208 	orr.w	r2, r2, #8
 8003ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0204 	bic.w	r2, r2, #4
 8003ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69d9      	ldr	r1, [r3, #28]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	61da      	str	r2, [r3, #28]
      break;
 8003ad8:	e064      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 faa7 	bl	8004034 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69d9      	ldr	r1, [r3, #28]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	61da      	str	r2, [r3, #28]
      break;
 8003b1a:	e043      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fb10 	bl	8004148 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0204 	bic.w	r2, r2, #4
 8003b46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b5a:	e023      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fb54 	bl	8004210 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b9c:	e002      	b.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <TIM_Base_SetConfig+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3f      	ldr	r2, [pc, #252]	; (8003cd8 <TIM_Base_SetConfig+0x120>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3e      	ldr	r2, [pc, #248]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3d      	ldr	r2, [pc, #244]	; (8003ce0 <TIM_Base_SetConfig+0x128>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a33      	ldr	r2, [pc, #204]	; (8003cd4 <TIM_Base_SetConfig+0x11c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01b      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d017      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <TIM_Base_SetConfig+0x120>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2e      	ldr	r2, [pc, #184]	; (8003ce0 <TIM_Base_SetConfig+0x128>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <TIM_Base_SetConfig+0x12c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <TIM_Base_SetConfig+0x130>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <TIM_Base_SetConfig+0x134>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a16      	ldr	r2, [pc, #88]	; (8003cd4 <TIM_Base_SetConfig+0x11c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00f      	beq.n	8003ca0 <TIM_Base_SetConfig+0xe8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <TIM_Base_SetConfig+0x128>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_Base_SetConfig+0xe8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a16      	ldr	r2, [pc, #88]	; (8003ce4 <TIM_Base_SetConfig+0x12c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_Base_SetConfig+0xe8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <TIM_Base_SetConfig+0x130>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0xe8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <TIM_Base_SetConfig+0x134>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d103      	bne.n	8003ca8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f023 0201 	bic.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	611a      	str	r2, [r3, #16]
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40013400 	.word	0x40013400
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400
 8003cec:	40014800 	.word	0x40014800

08003cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f023 0201 	bic.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <TIM_OC1_SetConfig+0x10c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00f      	beq.n	8003d70 <TIM_OC1_SetConfig+0x80>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <TIM_OC1_SetConfig+0x110>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_OC1_SetConfig+0x80>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <TIM_OC1_SetConfig+0x114>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC1_SetConfig+0x80>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <TIM_OC1_SetConfig+0x118>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC1_SetConfig+0x80>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <TIM_OC1_SetConfig+0x11c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10c      	bne.n	8003d8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0308 	bic.w	r3, r3, #8
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <TIM_OC1_SetConfig+0x10c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00f      	beq.n	8003db2 <TIM_OC1_SetConfig+0xc2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1a      	ldr	r2, [pc, #104]	; (8003e00 <TIM_OC1_SetConfig+0x110>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_OC1_SetConfig+0xc2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <TIM_OC1_SetConfig+0x114>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_OC1_SetConfig+0xc2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <TIM_OC1_SetConfig+0x118>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_OC1_SetConfig+0xc2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <TIM_OC1_SetConfig+0x11c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40013400 	.word	0x40013400
 8003e04:	40014000 	.word	0x40014000
 8003e08:	40014400 	.word	0x40014400
 8003e0c:	40014800 	.word	0x40014800

08003e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 0210 	bic.w	r2, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0320 	bic.w	r3, r3, #32
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a28      	ldr	r2, [pc, #160]	; (8003f10 <TIM_OC2_SetConfig+0x100>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC2_SetConfig+0x6c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a27      	ldr	r2, [pc, #156]	; (8003f14 <TIM_OC2_SetConfig+0x104>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10d      	bne.n	8003e98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <TIM_OC2_SetConfig+0x100>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00f      	beq.n	8003ec0 <TIM_OC2_SetConfig+0xb0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <TIM_OC2_SetConfig+0x104>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_OC2_SetConfig+0xb0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <TIM_OC2_SetConfig+0x108>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_OC2_SetConfig+0xb0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <TIM_OC2_SetConfig+0x10c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_OC2_SetConfig+0xb0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <TIM_OC2_SetConfig+0x110>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d113      	bne.n	8003ee8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40013400 	.word	0x40013400
 8003f18:	40014000 	.word	0x40014000
 8003f1c:	40014400 	.word	0x40014400
 8003f20:	40014800 	.word	0x40014800

08003f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0303 	bic.w	r3, r3, #3
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a27      	ldr	r2, [pc, #156]	; (8004020 <TIM_OC3_SetConfig+0xfc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_OC3_SetConfig+0x6a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a26      	ldr	r2, [pc, #152]	; (8004024 <TIM_OC3_SetConfig+0x100>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10d      	bne.n	8003faa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <TIM_OC3_SetConfig+0xfc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <TIM_OC3_SetConfig+0xae>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <TIM_OC3_SetConfig+0x100>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <TIM_OC3_SetConfig+0xae>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <TIM_OC3_SetConfig+0x104>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_OC3_SetConfig+0xae>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	; (800402c <TIM_OC3_SetConfig+0x108>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_OC3_SetConfig+0xae>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	; (8004030 <TIM_OC3_SetConfig+0x10c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d113      	bne.n	8003ffa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40013400 	.word	0x40013400
 8004028:	40014000 	.word	0x40014000
 800402c:	40014400 	.word	0x40014400
 8004030:	40014800 	.word	0x40014800

08004034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	031b      	lsls	r3, r3, #12
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <TIM_OC4_SetConfig+0x100>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC4_SetConfig+0x6c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a27      	ldr	r2, [pc, #156]	; (8004138 <TIM_OC4_SetConfig+0x104>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10d      	bne.n	80040bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	031b      	lsls	r3, r3, #12
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <TIM_OC4_SetConfig+0x100>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00f      	beq.n	80040e4 <TIM_OC4_SetConfig+0xb0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <TIM_OC4_SetConfig+0x104>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00b      	beq.n	80040e4 <TIM_OC4_SetConfig+0xb0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1b      	ldr	r2, [pc, #108]	; (800413c <TIM_OC4_SetConfig+0x108>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d007      	beq.n	80040e4 <TIM_OC4_SetConfig+0xb0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <TIM_OC4_SetConfig+0x10c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_OC4_SetConfig+0xb0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a19      	ldr	r2, [pc, #100]	; (8004144 <TIM_OC4_SetConfig+0x110>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d113      	bne.n	800410c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40013400 	.word	0x40013400
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800

08004148 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800418c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <TIM_OC5_SetConfig+0xb4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00f      	beq.n	80041c2 <TIM_OC5_SetConfig+0x7a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <TIM_OC5_SetConfig+0xb8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <TIM_OC5_SetConfig+0x7a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <TIM_OC5_SetConfig+0xbc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <TIM_OC5_SetConfig+0x7a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <TIM_OC5_SetConfig+0xc0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_OC5_SetConfig+0x7a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <TIM_OC5_SetConfig+0xc4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d109      	bne.n	80041d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	621a      	str	r2, [r3, #32]
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40013400 	.word	0x40013400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800

08004210 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	051b      	lsls	r3, r3, #20
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <TIM_OC6_SetConfig+0xb8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00f      	beq.n	800428c <TIM_OC6_SetConfig+0x7c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <TIM_OC6_SetConfig+0xbc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_OC6_SetConfig+0x7c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <TIM_OC6_SetConfig+0xc0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <TIM_OC6_SetConfig+0x7c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <TIM_OC6_SetConfig+0xc4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_OC6_SetConfig+0x7c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <TIM_OC6_SetConfig+0xc8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d109      	bne.n	80042a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	029b      	lsls	r3, r3, #10
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40013400 	.word	0x40013400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e065      	b.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2c      	ldr	r2, [pc, #176]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2b      	ldr	r2, [pc, #172]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d108      	bne.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800432e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004344:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1b      	ldr	r2, [pc, #108]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d013      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a13      	ldr	r2, [pc, #76]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10c      	bne.n	80043ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40014000 	.word	0x40014000

080043e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e073      	b.n	80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d11c      	bne.n	80044d2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	051b      	lsls	r3, r3, #20
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40013400 	.word	0x40013400

080044f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e042      	b.n	8004590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7fc fcef 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2224      	movs	r2, #36	; 0x24
 8004526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 faf4 	bl	8004b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f825 	bl	8004598 <UART_SetConfig>
 800454e:	4603      	mov	r3, r0
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e01b      	b.n	8004590 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fb73 	bl	8004c74 <UART_CheckIdleState>
 800458e:	4603      	mov	r3, r0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b08c      	sub	sp, #48	; 0x30
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	4313      	orrs	r3, r2
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4bab      	ldr	r3, [pc, #684]	; (8004874 <UART_SetConfig+0x2dc>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4aa0      	ldr	r2, [pc, #640]	; (8004878 <UART_SetConfig+0x2e0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004600:	4313      	orrs	r3, r2
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800460e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004618:	430b      	orrs	r3, r1
 800461a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f023 010f 	bic.w	r1, r3, #15
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a91      	ldr	r2, [pc, #580]	; (800487c <UART_SetConfig+0x2e4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d125      	bne.n	8004688 <UART_SetConfig+0xf0>
 800463c:	4b90      	ldr	r3, [pc, #576]	; (8004880 <UART_SetConfig+0x2e8>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b03      	cmp	r3, #3
 8004648:	d81a      	bhi.n	8004680 <UART_SetConfig+0xe8>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <UART_SetConfig+0xb8>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004661 	.word	0x08004661
 8004654:	08004671 	.word	0x08004671
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	2301      	movs	r3, #1
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004666:	e0d6      	b.n	8004816 <UART_SetConfig+0x27e>
 8004668:	2302      	movs	r3, #2
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466e:	e0d2      	b.n	8004816 <UART_SetConfig+0x27e>
 8004670:	2304      	movs	r3, #4
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004676:	e0ce      	b.n	8004816 <UART_SetConfig+0x27e>
 8004678:	2308      	movs	r3, #8
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467e:	e0ca      	b.n	8004816 <UART_SetConfig+0x27e>
 8004680:	2310      	movs	r3, #16
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004686:	e0c6      	b.n	8004816 <UART_SetConfig+0x27e>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7d      	ldr	r2, [pc, #500]	; (8004884 <UART_SetConfig+0x2ec>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d138      	bne.n	8004704 <UART_SetConfig+0x16c>
 8004692:	4b7b      	ldr	r3, [pc, #492]	; (8004880 <UART_SetConfig+0x2e8>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d82d      	bhi.n	80046fc <UART_SetConfig+0x164>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0x110>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046fd 	.word	0x080046fd
 80046b0:	080046fd 	.word	0x080046fd
 80046b4:	080046fd 	.word	0x080046fd
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080046fd 	.word	0x080046fd
 80046c0:	080046fd 	.word	0x080046fd
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	080046e5 	.word	0x080046e5
 80046cc:	080046fd 	.word	0x080046fd
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	080046fd 	.word	0x080046fd
 80046d8:	080046f5 	.word	0x080046f5
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e2:	e098      	b.n	8004816 <UART_SetConfig+0x27e>
 80046e4:	2302      	movs	r3, #2
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ea:	e094      	b.n	8004816 <UART_SetConfig+0x27e>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e090      	b.n	8004816 <UART_SetConfig+0x27e>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fa:	e08c      	b.n	8004816 <UART_SetConfig+0x27e>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004702:	e088      	b.n	8004816 <UART_SetConfig+0x27e>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5f      	ldr	r2, [pc, #380]	; (8004888 <UART_SetConfig+0x2f0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d125      	bne.n	800475a <UART_SetConfig+0x1c2>
 800470e:	4b5c      	ldr	r3, [pc, #368]	; (8004880 <UART_SetConfig+0x2e8>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d016      	beq.n	800474a <UART_SetConfig+0x1b2>
 800471c:	2b30      	cmp	r3, #48	; 0x30
 800471e:	d818      	bhi.n	8004752 <UART_SetConfig+0x1ba>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d00a      	beq.n	800473a <UART_SetConfig+0x1a2>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d814      	bhi.n	8004752 <UART_SetConfig+0x1ba>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <UART_SetConfig+0x19a>
 800472c:	2b10      	cmp	r3, #16
 800472e:	d008      	beq.n	8004742 <UART_SetConfig+0x1aa>
 8004730:	e00f      	b.n	8004752 <UART_SetConfig+0x1ba>
 8004732:	2300      	movs	r3, #0
 8004734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004738:	e06d      	b.n	8004816 <UART_SetConfig+0x27e>
 800473a:	2302      	movs	r3, #2
 800473c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004740:	e069      	b.n	8004816 <UART_SetConfig+0x27e>
 8004742:	2304      	movs	r3, #4
 8004744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004748:	e065      	b.n	8004816 <UART_SetConfig+0x27e>
 800474a:	2308      	movs	r3, #8
 800474c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004750:	e061      	b.n	8004816 <UART_SetConfig+0x27e>
 8004752:	2310      	movs	r3, #16
 8004754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004758:	e05d      	b.n	8004816 <UART_SetConfig+0x27e>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a4b      	ldr	r2, [pc, #300]	; (800488c <UART_SetConfig+0x2f4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d125      	bne.n	80047b0 <UART_SetConfig+0x218>
 8004764:	4b46      	ldr	r3, [pc, #280]	; (8004880 <UART_SetConfig+0x2e8>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800476e:	2bc0      	cmp	r3, #192	; 0xc0
 8004770:	d016      	beq.n	80047a0 <UART_SetConfig+0x208>
 8004772:	2bc0      	cmp	r3, #192	; 0xc0
 8004774:	d818      	bhi.n	80047a8 <UART_SetConfig+0x210>
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d00a      	beq.n	8004790 <UART_SetConfig+0x1f8>
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d814      	bhi.n	80047a8 <UART_SetConfig+0x210>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <UART_SetConfig+0x1f0>
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0x200>
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x210>
 8004788:	2300      	movs	r3, #0
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800478e:	e042      	b.n	8004816 <UART_SetConfig+0x27e>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004796:	e03e      	b.n	8004816 <UART_SetConfig+0x27e>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479e:	e03a      	b.n	8004816 <UART_SetConfig+0x27e>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a6:	e036      	b.n	8004816 <UART_SetConfig+0x27e>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ae:	e032      	b.n	8004816 <UART_SetConfig+0x27e>
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a30      	ldr	r2, [pc, #192]	; (8004878 <UART_SetConfig+0x2e0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d12a      	bne.n	8004810 <UART_SetConfig+0x278>
 80047ba:	4b31      	ldr	r3, [pc, #196]	; (8004880 <UART_SetConfig+0x2e8>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c8:	d01a      	beq.n	8004800 <UART_SetConfig+0x268>
 80047ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ce:	d81b      	bhi.n	8004808 <UART_SetConfig+0x270>
 80047d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d4:	d00c      	beq.n	80047f0 <UART_SetConfig+0x258>
 80047d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047da:	d815      	bhi.n	8004808 <UART_SetConfig+0x270>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <UART_SetConfig+0x250>
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e4:	d008      	beq.n	80047f8 <UART_SetConfig+0x260>
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x270>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ee:	e012      	b.n	8004816 <UART_SetConfig+0x27e>
 80047f0:	2302      	movs	r3, #2
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f6:	e00e      	b.n	8004816 <UART_SetConfig+0x27e>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fe:	e00a      	b.n	8004816 <UART_SetConfig+0x27e>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004806:	e006      	b.n	8004816 <UART_SetConfig+0x27e>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480e:	e002      	b.n	8004816 <UART_SetConfig+0x27e>
 8004810:	2310      	movs	r3, #16
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <UART_SetConfig+0x2e0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	f040 80a8 	bne.w	8004972 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004826:	2b08      	cmp	r3, #8
 8004828:	d834      	bhi.n	8004894 <UART_SetConfig+0x2fc>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0x298>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004855 	.word	0x08004855
 8004834:	08004895 	.word	0x08004895
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004895 	.word	0x08004895
 8004840:	08004863 	.word	0x08004863
 8004844:	08004895 	.word	0x08004895
 8004848:	08004895 	.word	0x08004895
 800484c:	08004895 	.word	0x08004895
 8004850:	0800486b 	.word	0x0800486b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004854:	f7fe fde2 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800485a:	e021      	b.n	80048a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <UART_SetConfig+0x2f8>)
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004860:	e01e      	b.n	80048a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004862:	f7fe fd6d 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004868:	e01a      	b.n	80048a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004870:	e016      	b.n	80048a0 <UART_SetConfig+0x308>
 8004872:	bf00      	nop
 8004874:	cfff69f3 	.word	0xcfff69f3
 8004878:	40008000 	.word	0x40008000
 800487c:	40013800 	.word	0x40013800
 8004880:	40021000 	.word	0x40021000
 8004884:	40004400 	.word	0x40004400
 8004888:	40004800 	.word	0x40004800
 800488c:	40004c00 	.word	0x40004c00
 8004890:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800489e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 812a 	beq.w	8004afc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	4a9e      	ldr	r2, [pc, #632]	; (8004b28 <UART_SetConfig+0x590>)
 80048ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b2:	461a      	mov	r2, r3
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d305      	bcc.n	80048d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d903      	bls.n	80048e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048de:	e10d      	b.n	8004afc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	2200      	movs	r2, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	60fa      	str	r2, [r7, #12]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	4a8e      	ldr	r2, [pc, #568]	; (8004b28 <UART_SetConfig+0x590>)
 80048ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2200      	movs	r2, #0
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004902:	f7fb fc89 	bl	8000218 <__aeabi_uldivmod>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	020b      	lsls	r3, r1, #8
 8004918:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800491c:	0202      	lsls	r2, r0, #8
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	6849      	ldr	r1, [r1, #4]
 8004922:	0849      	lsrs	r1, r1, #1
 8004924:	2000      	movs	r0, #0
 8004926:	460c      	mov	r4, r1
 8004928:	4605      	mov	r5, r0
 800492a:	eb12 0804 	adds.w	r8, r2, r4
 800492e:	eb43 0905 	adc.w	r9, r3, r5
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	469a      	mov	sl, r3
 800493a:	4693      	mov	fp, r2
 800493c:	4652      	mov	r2, sl
 800493e:	465b      	mov	r3, fp
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fb fc68 	bl	8000218 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4613      	mov	r3, r2
 800494e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004956:	d308      	bcc.n	800496a <UART_SetConfig+0x3d2>
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d204      	bcs.n	800496a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e0c8      	b.n	8004afc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004970:	e0c4      	b.n	8004afc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497a:	d167      	bne.n	8004a4c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800497c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004980:	2b08      	cmp	r3, #8
 8004982:	d828      	bhi.n	80049d6 <UART_SetConfig+0x43e>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <UART_SetConfig+0x3f4>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	080049d7 	.word	0x080049d7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049d7 	.word	0x080049d7
 80049a8:	080049d7 	.word	0x080049d7
 80049ac:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7fe fd34 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049b6:	e014      	b.n	80049e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7fe fd46 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <UART_SetConfig+0x594>)
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7fe fcbb 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 80049ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049cc:	e009      	b.n	80049e2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049d4:	e005      	b.n	80049e2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8089 	beq.w	8004afc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	4a4e      	ldr	r2, [pc, #312]	; (8004b28 <UART_SetConfig+0x590>)
 80049f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049fc:	005a      	lsls	r2, r3, #1
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	441a      	add	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	d916      	bls.n	8004a44 <UART_SetConfig+0x4ac>
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d212      	bcs.n	8004a44 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f023 030f 	bic.w	r3, r3, #15
 8004a26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	8bfb      	ldrh	r3, [r7, #30]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	8bfa      	ldrh	r2, [r7, #30]
 8004a40:	60da      	str	r2, [r3, #12]
 8004a42:	e05b      	b.n	8004afc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a4a:	e057      	b.n	8004afc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d828      	bhi.n	8004aa6 <UART_SetConfig+0x50e>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x4c4>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aa7 	.word	0x08004aa7
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7fe fccc 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a86:	e014      	b.n	8004ab2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a88:	f7fe fcde 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8004a8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a8e:	e010      	b.n	8004ab2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <UART_SetConfig+0x594>)
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a94:	e00d      	b.n	8004ab2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fe fc53 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 8004a9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a9c:	e009      	b.n	8004ab2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aa4:	e005      	b.n	8004ab2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ab0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d021      	beq.n	8004afc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <UART_SetConfig+0x590>)
 8004abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	441a      	add	r2, r3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d909      	bls.n	8004af6 <UART_SetConfig+0x55e>
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d205      	bcs.n	8004af6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e002      	b.n	8004afc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004b18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3730      	adds	r7, #48	; 0x30
 8004b20:	46bd      	mov	sp, r7
 8004b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b26:	bf00      	nop
 8004b28:	080051fc 	.word	0x080051fc
 8004b2c:	00f42400 	.word	0x00f42400

08004b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2e:	d10a      	bne.n	8004c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b098      	sub	sp, #96	; 0x60
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c84:	f7fc fa5e 	bl	8001144 <HAL_GetTick>
 8004c88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d12f      	bne.n	8004cf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f88e 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d022      	beq.n	8004cf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e6      	bne.n	8004cb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e063      	b.n	8004dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d149      	bne.n	8004d9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f857 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d03c      	beq.n	8004d9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e6      	bne.n	8004d20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3308      	adds	r3, #8
 8004d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d72:	61fa      	str	r2, [r7, #28]
 8004d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	69b9      	ldr	r1, [r7, #24]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e012      	b.n	8004dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3758      	adds	r7, #88	; 0x58
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd8:	e04f      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d04b      	beq.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de2:	f7fc f9af 	bl	8001144 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e04e      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d037      	beq.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d034      	beq.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d031      	beq.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d110      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f838 	bl	8004ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2208      	movs	r2, #8
 8004e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e029      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e54:	d111      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f81e 	bl	8004ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e00f      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4013      	ands	r3, r2
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	bf0c      	ite	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	2300      	movne	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d0a0      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b095      	sub	sp, #84	; 0x54
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e6      	bne.n	8004eaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e3      	bne.n	8004edc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d118      	bne.n	8004f4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0310 	bic.w	r3, r3, #16
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6979      	ldr	r1, [r7, #20]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	613b      	str	r3, [r7, #16]
   return(result);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e6      	bne.n	8004f1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f62:	bf00      	nop
 8004f64:	3754      	adds	r7, #84	; 0x54
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e027      	b.n	8004fd4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	; 0x24
 8004f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e02d      	b.n	8005054 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f84f 	bl	80050d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005070:	2302      	movs	r3, #2
 8005072:	e02d      	b.n	80050d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f811 	bl	80050d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050f8:	e031      	b.n	800515e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050fa:	2308      	movs	r3, #8
 80050fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050fe:	2308      	movs	r3, #8
 8005100:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	0e5b      	lsrs	r3, r3, #25
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	0f5b      	lsrs	r3, r3, #29
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	7b3a      	ldrb	r2, [r7, #12]
 8005126:	4911      	ldr	r1, [pc, #68]	; (800516c <UARTEx_SetNbDataToProcess+0x94>)
 8005128:	5c8a      	ldrb	r2, [r1, r2]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800512e:	7b3a      	ldrb	r2, [r7, #12]
 8005130:	490f      	ldr	r1, [pc, #60]	; (8005170 <UARTEx_SetNbDataToProcess+0x98>)
 8005132:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005134:	fb93 f3f2 	sdiv	r3, r3, r2
 8005138:	b29a      	uxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	7b7a      	ldrb	r2, [r7, #13]
 8005144:	4909      	ldr	r1, [pc, #36]	; (800516c <UARTEx_SetNbDataToProcess+0x94>)
 8005146:	5c8a      	ldrb	r2, [r1, r2]
 8005148:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800514c:	7b7a      	ldrb	r2, [r7, #13]
 800514e:	4908      	ldr	r1, [pc, #32]	; (8005170 <UARTEx_SetNbDataToProcess+0x98>)
 8005150:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005152:	fb93 f3f2 	sdiv	r3, r3, r2
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	08005214 	.word	0x08005214
 8005170:	0800521c 	.word	0x0800521c

08005174 <__libc_init_array>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4d0d      	ldr	r5, [pc, #52]	; (80051ac <__libc_init_array+0x38>)
 8005178:	4c0d      	ldr	r4, [pc, #52]	; (80051b0 <__libc_init_array+0x3c>)
 800517a:	1b64      	subs	r4, r4, r5
 800517c:	10a4      	asrs	r4, r4, #2
 800517e:	2600      	movs	r6, #0
 8005180:	42a6      	cmp	r6, r4
 8005182:	d109      	bne.n	8005198 <__libc_init_array+0x24>
 8005184:	4d0b      	ldr	r5, [pc, #44]	; (80051b4 <__libc_init_array+0x40>)
 8005186:	4c0c      	ldr	r4, [pc, #48]	; (80051b8 <__libc_init_array+0x44>)
 8005188:	f000 f820 	bl	80051cc <_init>
 800518c:	1b64      	subs	r4, r4, r5
 800518e:	10a4      	asrs	r4, r4, #2
 8005190:	2600      	movs	r6, #0
 8005192:	42a6      	cmp	r6, r4
 8005194:	d105      	bne.n	80051a2 <__libc_init_array+0x2e>
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	f855 3b04 	ldr.w	r3, [r5], #4
 800519c:	4798      	blx	r3
 800519e:	3601      	adds	r6, #1
 80051a0:	e7ee      	b.n	8005180 <__libc_init_array+0xc>
 80051a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a6:	4798      	blx	r3
 80051a8:	3601      	adds	r6, #1
 80051aa:	e7f2      	b.n	8005192 <__libc_init_array+0x1e>
 80051ac:	0800522c 	.word	0x0800522c
 80051b0:	0800522c 	.word	0x0800522c
 80051b4:	0800522c 	.word	0x0800522c
 80051b8:	08005230 	.word	0x08005230

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <_init>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	bf00      	nop
 80051d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d2:	bc08      	pop	{r3}
 80051d4:	469e      	mov	lr, r3
 80051d6:	4770      	bx	lr

080051d8 <_fini>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr
